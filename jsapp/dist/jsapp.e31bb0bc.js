// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"node_modules/@azure/core-http/es/src/httpHeaders.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isHttpHeadersLike = isHttpHeadersLike;
exports.HttpHeaders = void 0;

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * A collection of HttpHeaders that can be sent with a HTTP request.
 */
function getHeaderKey(headerName) {
  return headerName.toLowerCase();
}

function isHttpHeadersLike(object) {
  if (object && typeof object === "object") {
    var castObject = object;

    if (typeof castObject.rawHeaders === "function" && typeof castObject.clone === "function" && typeof castObject.get === "function" && typeof castObject.set === "function" && typeof castObject.contains === "function" && typeof castObject.remove === "function" && typeof castObject.headersArray === "function" && typeof castObject.headerValues === "function" && typeof castObject.headerNames === "function" && typeof castObject.toJson === "function") {
      return true;
    }
  }

  return false;
}
/**
 * A collection of HTTP header key/value pairs.
 */


var HttpHeaders =
/** @class */
function () {
  function HttpHeaders(rawHeaders) {
    this._headersMap = {};

    if (rawHeaders) {
      for (var headerName in rawHeaders) {
        this.set(headerName, rawHeaders[headerName]);
      }
    }
  }
  /**
   * Set a header in this collection with the provided name and value. The name is
   * case-insensitive.
   * @param headerName - The name of the header to set. This value is case-insensitive.
   * @param headerValue - The value of the header to set.
   */


  HttpHeaders.prototype.set = function (headerName, headerValue) {
    this._headersMap[getHeaderKey(headerName)] = {
      name: headerName,
      value: headerValue.toString()
    };
  };
  /**
   * Get the header value for the provided header name, or undefined if no header exists in this
   * collection with the provided name.
   * @param headerName - The name of the header.
   */


  HttpHeaders.prototype.get = function (headerName) {
    var header = this._headersMap[getHeaderKey(headerName)];

    return !header ? undefined : header.value;
  };
  /**
   * Get whether or not this header collection contains a header entry for the provided header name.
   */


  HttpHeaders.prototype.contains = function (headerName) {
    return !!this._headersMap[getHeaderKey(headerName)];
  };
  /**
   * Remove the header with the provided headerName. Return whether or not the header existed and
   * was removed.
   * @param headerName - The name of the header to remove.
   */


  HttpHeaders.prototype.remove = function (headerName) {
    var result = this.contains(headerName);
    delete this._headersMap[getHeaderKey(headerName)];
    return result;
  };
  /**
   * Get the headers that are contained this collection as an object.
   */


  HttpHeaders.prototype.rawHeaders = function () {
    var result = {};

    for (var headerKey in this._headersMap) {
      var header = this._headersMap[headerKey];
      result[header.name.toLowerCase()] = header.value;
    }

    return result;
  };
  /**
   * Get the headers that are contained in this collection as an array.
   */


  HttpHeaders.prototype.headersArray = function () {
    var headers = [];

    for (var headerKey in this._headersMap) {
      headers.push(this._headersMap[headerKey]);
    }

    return headers;
  };
  /**
   * Get the header names that are contained in this collection.
   */


  HttpHeaders.prototype.headerNames = function () {
    var headerNames = [];
    var headers = this.headersArray();

    for (var i = 0; i < headers.length; ++i) {
      headerNames.push(headers[i].name);
    }

    return headerNames;
  };
  /**
   * Get the header values that are contained in this collection.
   */


  HttpHeaders.prototype.headerValues = function () {
    var headerValues = [];
    var headers = this.headersArray();

    for (var i = 0; i < headers.length; ++i) {
      headerValues.push(headers[i].value);
    }

    return headerValues;
  };
  /**
   * Get the JSON object representation of this HTTP header collection.
   */


  HttpHeaders.prototype.toJson = function () {
    return this.rawHeaders();
  };
  /**
   * Get the string representation of this HTTP header collection.
   */


  HttpHeaders.prototype.toString = function () {
    return JSON.stringify(this.toJson());
  };
  /**
   * Create a deep clone/copy of this HttpHeaders collection.
   */


  HttpHeaders.prototype.clone = function () {
    return new HttpHeaders(this.rawHeaders());
  };

  return HttpHeaders;
}();

exports.HttpHeaders = HttpHeaders;
},{}],"node_modules/tslib/tslib.es6.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__extends = __extends;
exports.__rest = __rest;
exports.__decorate = __decorate;
exports.__param = __param;
exports.__metadata = __metadata;
exports.__awaiter = __awaiter;
exports.__generator = __generator;
exports.__exportStar = __exportStar;
exports.__values = __values;
exports.__read = __read;
exports.__spread = __spread;
exports.__spreadArrays = __spreadArrays;
exports.__spreadArray = __spreadArray;
exports.__await = __await;
exports.__asyncGenerator = __asyncGenerator;
exports.__asyncDelegator = __asyncDelegator;
exports.__asyncValues = __asyncValues;
exports.__makeTemplateObject = __makeTemplateObject;
exports.__importStar = __importStar;
exports.__importDefault = __importDefault;
exports.__classPrivateFieldGet = __classPrivateFieldGet;
exports.__classPrivateFieldSet = __classPrivateFieldSet;
exports.__createBinding = exports.__assign = void 0;

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

/* global Reflect, Promise */
var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function () {
  exports.__assign = __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

exports.__assign = __assign;

function __rest(s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}

function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}

function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}

var __createBinding = Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function () {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
};

exports.__createBinding = __createBinding;

function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
      m = s && o[s],
      i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
}
/** @deprecated */


function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

  return ar;
}
/** @deprecated */


function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

  return r;
}

function __spreadArray(to, from) {
  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];

  return to;
}

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
      i,
      q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;

  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }

  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }

  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }

  function fulfill(value) {
    resume("next", value);
  }

  function reject(value) {
    resume("throw", value);
  }

  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;

  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await(o[n](v)),
        done: n === "return"
      } : f ? f(v) : v;
    } : f;
  }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
      i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);

  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }

  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}

function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }

  return cooked;
}

;

var __setModuleDefault = Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
};

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);

  __setModuleDefault(result, mod);

  return result;
}

function __importDefault(mod) {
  return mod && mod.__esModule ? mod : {
    default: mod
  };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
},{}],"node_modules/@azure/core-http/es/src/util/base64.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.encodeString = encodeString;
exports.encodeByteArray = encodeByteArray;
exports.decodeString = decodeString;

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Encodes a string in base64 format.
 * @param value - The string to encode
 */
function encodeString(value) {
  return btoa(value);
}
/**
 * Encodes a byte array in base64 format.
 * @param value - The Uint8Aray to encode
 */


function encodeByteArray(value) {
  var str = "";

  for (var i = 0; i < value.length; i++) {
    str += String.fromCharCode(value[i]);
  }

  return btoa(str);
}
/**
 * Decodes a base64 string into a byte array.
 * @param value - The base64 string to decode
 */


function decodeString(value) {
  var byteString = atob(value);
  var arr = new Uint8Array(byteString.length);

  for (var i = 0; i < byteString.length; i++) {
    arr[i] = byteString.charCodeAt(i);
  }

  return arr;
}
},{}],"node_modules/uuid/dist/esm-browser/rng.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = rng;
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
var getRandomValues;
var rnds8 = new Uint8Array(16);

function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
    // find the complete implementation of crypto (msCrypto) on IE11.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}
},{}],"node_modules/uuid/dist/esm-browser/regex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
exports.default = _default;
},{}],"node_modules/uuid/dist/esm-browser/validate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regex = _interopRequireDefault(require("./regex.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validate(uuid) {
  return typeof uuid === 'string' && _regex.default.test(uuid);
}

var _default = validate;
exports.default = _default;
},{"./regex.js":"node_modules/uuid/dist/esm-browser/regex.js"}],"node_modules/uuid/dist/esm-browser/stringify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _validate = _interopRequireDefault(require("./validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];

for (var i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0; // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434

  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

var _default = stringify;
exports.default = _default;
},{"./validate.js":"node_modules/uuid/dist/esm-browser/validate.js"}],"node_modules/uuid/dist/esm-browser/v1.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _rng = _interopRequireDefault(require("./rng.js"));

var _stringify = _interopRequireDefault(require("./stringify.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
var _nodeId;

var _clockseq; // Previous uuid creation time


var _lastMSecs = 0;
var _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || new Array(16);
  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    var seedBytes = options.random || (options.rng || _rng.default)();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || (0, _stringify.default)(b);
}

var _default = v1;
exports.default = _default;
},{"./rng.js":"node_modules/uuid/dist/esm-browser/rng.js","./stringify.js":"node_modules/uuid/dist/esm-browser/stringify.js"}],"node_modules/uuid/dist/esm-browser/parse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _validate = _interopRequireDefault(require("./validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  var v;
  var arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

var _default = parse;
exports.default = _default;
},{"./validate.js":"node_modules/uuid/dist/esm-browser/validate.js"}],"node_modules/uuid/dist/esm-browser/v35.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.URL = exports.DNS = void 0;

var _stringify = _interopRequireDefault(require("./stringify.js"));

var _parse = _interopRequireDefault(require("./parse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  var bytes = [];

  for (var i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
exports.DNS = DNS;
var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
exports.URL = URL;

function _default(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = (0, _parse.default)(namespace);
    }

    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return (0, _stringify.default)(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}
},{"./stringify.js":"node_modules/uuid/dist/esm-browser/stringify.js","./parse.js":"node_modules/uuid/dist/esm-browser/parse.js"}],"node_modules/uuid/dist/esm-browser/md5.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);

    for (var i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }

  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */


function md5ToHexEncodedArray(input) {
  var output = [];
  var length32 = input.length * 32;
  var hexTab = '0123456789abcdef';

  for (var i = 0; i < length32; i += 8) {
    var x = input[i >> 5] >>> i % 32 & 0xff;
    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }

  return output;
}
/**
 * Calculate output length with padding and bit length
 */


function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */


function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  var a = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;

  for (var i = 0; i < x.length; i += 16) {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }

  return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */


function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }

  var length8 = input.length * 8;
  var output = new Uint32Array(getOutputLength(length8));

  for (var i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }

  return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */


function safeAdd(x, y) {
  var lsw = (x & 0xffff) + (y & 0xffff);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */


function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */


function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}

function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}

var _default = md5;
exports.default = _default;
},{}],"node_modules/uuid/dist/esm-browser/v3.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _v = _interopRequireDefault(require("./v35.js"));

var _md = _interopRequireDefault(require("./md5.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var v3 = (0, _v.default)('v3', 0x30, _md.default);
var _default = v3;
exports.default = _default;
},{"./v35.js":"node_modules/uuid/dist/esm-browser/v35.js","./md5.js":"node_modules/uuid/dist/esm-browser/md5.js"}],"node_modules/uuid/dist/esm-browser/v4.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _rng = _interopRequireDefault(require("./rng.js"));

var _stringify = _interopRequireDefault(require("./stringify.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function v4(options, buf, offset) {
  options = options || {};

  var rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0, _stringify.default)(rnds);
}

var _default = v4;
exports.default = _default;
},{"./rng.js":"node_modules/uuid/dist/esm-browser/rng.js","./stringify.js":"node_modules/uuid/dist/esm-browser/stringify.js"}],"node_modules/uuid/dist/esm-browser/sha1.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;

    case 1:
      return x ^ y ^ z;

    case 2:
      return x & y ^ x & z ^ y & z;

    case 3:
      return x ^ y ^ z;
  }
}

function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}

function sha1(bytes) {
  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];

    for (var i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
  }

  bytes.push(0x80);
  var l = bytes.length / 4 + 2;
  var N = Math.ceil(l / 16);
  var M = new Array(N);

  for (var _i = 0; _i < N; ++_i) {
    var arr = new Uint32Array(16);

    for (var j = 0; j < 16; ++j) {
      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
    }

    M[_i] = arr;
  }

  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

  for (var _i2 = 0; _i2 < N; ++_i2) {
    var W = new Uint32Array(80);

    for (var t = 0; t < 16; ++t) {
      W[t] = M[_i2][t];
    }

    for (var _t = 16; _t < 80; ++_t) {
      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
    }

    var a = H[0];
    var b = H[1];
    var c = H[2];
    var d = H[3];
    var e = H[4];

    for (var _t2 = 0; _t2 < 80; ++_t2) {
      var s = Math.floor(_t2 / 20);
      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }

    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }

  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}

var _default = sha1;
exports.default = _default;
},{}],"node_modules/uuid/dist/esm-browser/v5.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _v = _interopRequireDefault(require("./v35.js"));

var _sha = _interopRequireDefault(require("./sha1.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var v5 = (0, _v.default)('v5', 0x50, _sha.default);
var _default = v5;
exports.default = _default;
},{"./v35.js":"node_modules/uuid/dist/esm-browser/v35.js","./sha1.js":"node_modules/uuid/dist/esm-browser/sha1.js"}],"node_modules/uuid/dist/esm-browser/nil.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = '00000000-0000-0000-0000-000000000000';
exports.default = _default;
},{}],"node_modules/uuid/dist/esm-browser/version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _validate = _interopRequireDefault(require("./validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function version(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.substr(14, 1), 16);
}

var _default = version;
exports.default = _default;
},{"./validate.js":"node_modules/uuid/dist/esm-browser/validate.js"}],"node_modules/uuid/dist/esm-browser/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "v1", {
  enumerable: true,
  get: function () {
    return _v.default;
  }
});
Object.defineProperty(exports, "v3", {
  enumerable: true,
  get: function () {
    return _v2.default;
  }
});
Object.defineProperty(exports, "v4", {
  enumerable: true,
  get: function () {
    return _v3.default;
  }
});
Object.defineProperty(exports, "v5", {
  enumerable: true,
  get: function () {
    return _v4.default;
  }
});
Object.defineProperty(exports, "NIL", {
  enumerable: true,
  get: function () {
    return _nil.default;
  }
});
Object.defineProperty(exports, "version", {
  enumerable: true,
  get: function () {
    return _version.default;
  }
});
Object.defineProperty(exports, "validate", {
  enumerable: true,
  get: function () {
    return _validate.default;
  }
});
Object.defineProperty(exports, "stringify", {
  enumerable: true,
  get: function () {
    return _stringify.default;
  }
});
Object.defineProperty(exports, "parse", {
  enumerable: true,
  get: function () {
    return _parse.default;
  }
});

var _v = _interopRequireDefault(require("./v1.js"));

var _v2 = _interopRequireDefault(require("./v3.js"));

var _v3 = _interopRequireDefault(require("./v4.js"));

var _v4 = _interopRequireDefault(require("./v5.js"));

var _nil = _interopRequireDefault(require("./nil.js"));

var _version = _interopRequireDefault(require("./version.js"));

var _validate = _interopRequireDefault(require("./validate.js"));

var _stringify = _interopRequireDefault(require("./stringify.js"));

var _parse = _interopRequireDefault(require("./parse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./v1.js":"node_modules/uuid/dist/esm-browser/v1.js","./v3.js":"node_modules/uuid/dist/esm-browser/v3.js","./v4.js":"node_modules/uuid/dist/esm-browser/v4.js","./v5.js":"node_modules/uuid/dist/esm-browser/v5.js","./nil.js":"node_modules/uuid/dist/esm-browser/nil.js","./version.js":"node_modules/uuid/dist/esm-browser/version.js","./validate.js":"node_modules/uuid/dist/esm-browser/validate.js","./stringify.js":"node_modules/uuid/dist/esm-browser/stringify.js","./parse.js":"node_modules/uuid/dist/esm-browser/parse.js"}],"node_modules/@azure/core-http/es/src/util/constants.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Constants = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var Constants = {
  /**
   * The core-http version
   */
  coreHttpVersion: "1.2.4",

  /**
   * Specifies HTTP.
   */
  HTTP: "http:",

  /**
   * Specifies HTTPS.
   */
  HTTPS: "https:",

  /**
   * Specifies HTTP Proxy.
   */
  HTTP_PROXY: "HTTP_PROXY",

  /**
   * Specifies HTTPS Proxy.
   */
  HTTPS_PROXY: "HTTPS_PROXY",

  /**
   * Specifies NO Proxy.
   */
  NO_PROXY: "NO_PROXY",

  /**
   * Specifies ALL Proxy.
   */
  ALL_PROXY: "ALL_PROXY",
  HttpConstants: {
    /**
     * Http Verbs
     */
    HttpVerbs: {
      PUT: "PUT",
      GET: "GET",
      DELETE: "DELETE",
      POST: "POST",
      MERGE: "MERGE",
      HEAD: "HEAD",
      PATCH: "PATCH"
    },
    StatusCodes: {
      TooManyRequests: 429
    }
  },

  /**
   * Defines constants for use with HTTP headers.
   */
  HeaderConstants: {
    /**
     * The Authorization header.
     */
    AUTHORIZATION: "authorization",
    AUTHORIZATION_SCHEME: "Bearer",

    /**
     * The Retry-After response-header field can be used with a 503 (Service
     * Unavailable) or 349 (Too Many Requests) responses to indicate how long
     * the service is expected to be unavailable to the requesting client.
     */
    RETRY_AFTER: "Retry-After",

    /**
     * The UserAgent header.
     */
    USER_AGENT: "User-Agent"
  }
};
exports.Constants = Constants;
},{}],"node_modules/@azure/core-http/es/src/util/serializer.common.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.XML_CHARKEY = exports.XML_ATTRKEY = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Default key used to access the XML attributes.
 */
var XML_ATTRKEY = "$";
/**
 * Default key used to access the XML value content.
 */

exports.XML_ATTRKEY = XML_ATTRKEY;
var XML_CHARKEY = "_";
exports.XML_CHARKEY = XML_CHARKEY;
},{}],"../../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/process/browser.js":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};
},{}],"node_modules/@azure/core-http/es/src/util/utils.js":[function(require,module,exports) {
var process = require("process");
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.urlIsHTTPS = urlIsHTTPS;
exports.encodeUri = encodeUri;
exports.stripResponse = stripResponse;
exports.stripRequest = stripRequest;
exports.isValidUuid = isValidUuid;
exports.generateUuid = generateUuid;
exports.executePromisesSequentially = executePromisesSequentially;
exports.delay = delay;
exports.promiseToCallback = promiseToCallback;
exports.promiseToServiceCallback = promiseToServiceCallback;
exports.prepareXMLRootList = prepareXMLRootList;
exports.applyMixins = applyMixins;
exports.isDuration = isDuration;
exports.replaceAll = replaceAll;
exports.isPrimitiveType = isPrimitiveType;
exports.getEnvironmentValue = getEnvironmentValue;
exports.isNode = void 0;

var _uuid = require("uuid");

var _constants = require("./constants");

var _serializer = require("./serializer.common");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var validUuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;
/**
 * A constant that indicates whether the environment is node.js or browser based.
 */

var isNode = typeof process !== "undefined" && !!process.version && !!process.versions && !!process.versions.node;
/**
 * Checks if a parsed URL is HTTPS
 *
 * @param urlToCheck - The url to check
 * @returns True if the URL is HTTPS; false otherwise.
 */

exports.isNode = isNode;

function urlIsHTTPS(urlToCheck) {
  return urlToCheck.protocol.toLowerCase() === _constants.Constants.HTTPS;
}
/**
 * Encodes an URI.
 *
 * @param uri - The URI to be encoded.
 * @returns The encoded URI.
 */


function encodeUri(uri) {
  return encodeURIComponent(uri).replace(/!/g, "%21").replace(/"/g, "%27").replace(/\(/g, "%28").replace(/\)/g, "%29").replace(/\*/g, "%2A");
}
/**
 * Returns a stripped version of the Http Response which only contains body,
 * headers and the status.
 *
 * @param response - The Http Response
 * @returns The stripped version of Http Response.
 */


function stripResponse(response) {
  var strippedResponse = {};
  strippedResponse.body = response.bodyAsText;
  strippedResponse.headers = response.headers;
  strippedResponse.status = response.status;
  return strippedResponse;
}
/**
 * Returns a stripped version of the Http Request that does not contain the
 * Authorization header.
 *
 * @param request - The Http Request object
 * @returns The stripped version of Http Request.
 */


function stripRequest(request) {
  var strippedRequest = request.clone();

  if (strippedRequest.headers) {
    strippedRequest.headers.remove("authorization");
  }

  return strippedRequest;
}
/**
 * Validates the given uuid as a string
 *
 * @param uuid - The uuid as a string that needs to be validated
 * @returns True if the uuid is valid; false otherwise.
 */


function isValidUuid(uuid) {
  return validUuidRegex.test(uuid);
}
/**
 * Generated UUID
 *
 * @returns RFC4122 v4 UUID.
 */


function generateUuid() {
  return (0, _uuid.v4)();
}
/**
 * Executes an array of promises sequentially. Inspiration of this method is here:
 * https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html. An awesome blog on promises!
 *
 * @param promiseFactories - An array of promise factories(A function that return a promise)
 * @param kickstart - Input to the first promise that is used to kickstart the promise chain.
 * If not provided then the promise chain starts with undefined.
 * @returns A chain of resolved or rejected promises
 */


function executePromisesSequentially(promiseFactories, kickstart) {
  var result = Promise.resolve(kickstart);
  promiseFactories.forEach(function (promiseFactory) {
    result = result.then(promiseFactory);
  });
  return result;
}
/**
 * A wrapper for setTimeout that resolves a promise after t milliseconds.
 * @param t - The number of milliseconds to be delayed.
 * @param value - The value to be resolved with after a timeout of t milliseconds.
 * @returns Resolved promise
 */


function delay(t, value) {
  return new Promise(function (resolve) {
    return setTimeout(function () {
      return resolve(value);
    }, t);
  });
}
/**
 * Converts a Promise to a callback.
 * @param promise - The Promise to be converted to a callback
 * @returns A function that takes the callback `(cb: Function) => void`
 * @deprecated generated code should instead depend on responseToBody
 */
// eslint-disable-next-line @typescript-eslint/ban-types


function promiseToCallback(promise) {
  if (typeof promise.then !== "function") {
    throw new Error("The provided input is not a Promise.");
  } // eslint-disable-next-line @typescript-eslint/ban-types


  return function (cb) {
    promise.then(function (data) {
      // eslint-disable-next-line promise/no-callback-in-promise
      return cb(undefined, data);
    }).catch(function (err) {
      // eslint-disable-next-line promise/no-callback-in-promise
      cb(err);
    });
  };
}
/**
 * Converts a Promise to a service callback.
 * @param promise - The Promise of HttpOperationResponse to be converted to a service callback
 * @returns A function that takes the service callback (cb: ServiceCallback<T>): void
 */


function promiseToServiceCallback(promise) {
  if (typeof promise.then !== "function") {
    throw new Error("The provided input is not a Promise.");
  }

  return function (cb) {
    promise.then(function (data) {
      return process.nextTick(cb, undefined, data.parsedBody, data.request, data);
    }).catch(function (err) {
      process.nextTick(cb, err);
    });
  };
}

function prepareXMLRootList(obj, elementName, xmlNamespaceKey, xmlNamespace) {
  var _a, _b, _c;

  if (!Array.isArray(obj)) {
    obj = [obj];
  }

  if (!xmlNamespaceKey || !xmlNamespace) {
    return _a = {}, _a[elementName] = obj, _a;
  }

  var result = (_b = {}, _b[elementName] = obj, _b);
  result[_serializer.XML_ATTRKEY] = (_c = {}, _c[xmlNamespaceKey] = xmlNamespace, _c);
  return result;
}
/**
 * Applies the properties on the prototype of sourceCtors to the prototype of targetCtor
 * @param targetCtor - The target object on which the properties need to be applied.
 * @param sourceCtors - An array of source objects from which the properties need to be taken.
 */


function applyMixins(targetCtorParam, sourceCtors) {
  var castTargetCtorParam = targetCtorParam;
  sourceCtors.forEach(function (sourceCtor) {
    Object.getOwnPropertyNames(sourceCtor.prototype).forEach(function (name) {
      castTargetCtorParam.prototype[name] = sourceCtor.prototype[name];
    });
  });
}

var validateISODuration = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
/**
 * Indicates whether the given string is in ISO 8601 format.
 * @param value - The value to be validated for ISO 8601 duration format.
 * @returns `true` if valid, `false` otherwise.
 */

function isDuration(value) {
  return validateISODuration.test(value);
}
/**
 * Replace all of the instances of searchValue in value with the provided replaceValue.
 * @param value - The value to search and replace in.
 * @param searchValue - The value to search for in the value argument.
 * @param replaceValue - The value to replace searchValue with in the value argument.
 * @returns The value where each instance of searchValue was replaced with replacedValue.
 */


function replaceAll(value, searchValue, replaceValue) {
  return !value || !searchValue ? value : value.split(searchValue).join(replaceValue || "");
}
/**
 * Determines whether the given entity is a basic/primitive type
 * (string, number, boolean, null, undefined).
 * @param value - Any entity
 * @returns true is it is primitive type, false otherwise.
 */


function isPrimitiveType(value) {
  return typeof value !== "object" && typeof value !== "function" || value === null;
}

function getEnvironmentValue(name) {
  if (process.env[name]) {
    return process.env[name];
  } else if (process.env[name.toLowerCase()]) {
    return process.env[name.toLowerCase()];
  }

  return undefined;
}
},{"uuid":"node_modules/uuid/dist/esm-browser/index.js","./constants":"node_modules/@azure/core-http/es/src/util/constants.js","./serializer.common":"node_modules/@azure/core-http/es/src/util/serializer.common.js","process":"../../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/process/browser.js"}],"node_modules/@azure/core-http/es/src/serializer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.serializeObject = serializeObject;
exports.MapperType = exports.Serializer = void 0;

var _tslib = require("tslib");

var base64 = _interopRequireWildcard(require("./util/base64"));

var utils = _interopRequireWildcard(require("./util/utils"));

var _serializer = require("./util/serializer.common");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/* eslint-disable eqeqeq */
var Serializer =
/** @class */
function () {
  function Serializer(modelMappers, isXML) {
    if (modelMappers === void 0) {
      modelMappers = {};
    }

    this.modelMappers = modelMappers;
    this.isXML = isXML;
  }

  Serializer.prototype.validateConstraints = function (mapper, value, objectName) {
    var failValidation = function (constraintName, constraintValue) {
      throw new Error("\"" + objectName + "\" with value \"" + value + "\" should satisfy the constraint \"" + constraintName + "\": " + constraintValue + ".");
    };

    if (mapper.constraints && value != undefined) {
      var valueAsNumber = value;
      var _a = mapper.constraints,
          ExclusiveMaximum = _a.ExclusiveMaximum,
          ExclusiveMinimum = _a.ExclusiveMinimum,
          InclusiveMaximum = _a.InclusiveMaximum,
          InclusiveMinimum = _a.InclusiveMinimum,
          MaxItems = _a.MaxItems,
          MaxLength = _a.MaxLength,
          MinItems = _a.MinItems,
          MinLength = _a.MinLength,
          MultipleOf = _a.MultipleOf,
          Pattern = _a.Pattern,
          UniqueItems = _a.UniqueItems;

      if (ExclusiveMaximum != undefined && valueAsNumber >= ExclusiveMaximum) {
        failValidation("ExclusiveMaximum", ExclusiveMaximum);
      }

      if (ExclusiveMinimum != undefined && valueAsNumber <= ExclusiveMinimum) {
        failValidation("ExclusiveMinimum", ExclusiveMinimum);
      }

      if (InclusiveMaximum != undefined && valueAsNumber > InclusiveMaximum) {
        failValidation("InclusiveMaximum", InclusiveMaximum);
      }

      if (InclusiveMinimum != undefined && valueAsNumber < InclusiveMinimum) {
        failValidation("InclusiveMinimum", InclusiveMinimum);
      }

      var valueAsArray = value;

      if (MaxItems != undefined && valueAsArray.length > MaxItems) {
        failValidation("MaxItems", MaxItems);
      }

      if (MaxLength != undefined && valueAsArray.length > MaxLength) {
        failValidation("MaxLength", MaxLength);
      }

      if (MinItems != undefined && valueAsArray.length < MinItems) {
        failValidation("MinItems", MinItems);
      }

      if (MinLength != undefined && valueAsArray.length < MinLength) {
        failValidation("MinLength", MinLength);
      }

      if (MultipleOf != undefined && valueAsNumber % MultipleOf !== 0) {
        failValidation("MultipleOf", MultipleOf);
      }

      if (Pattern) {
        var pattern = typeof Pattern === "string" ? new RegExp(Pattern) : Pattern;

        if (typeof value !== "string" || value.match(pattern) === null) {
          failValidation("Pattern", Pattern);
        }
      }

      if (UniqueItems && valueAsArray.some(function (item, i, ar) {
        return ar.indexOf(item) !== i;
      })) {
        failValidation("UniqueItems", UniqueItems);
      }
    }
  };
  /**
   * Serialize the given object based on its metadata defined in the mapper
   *
   * @param mapper - The mapper which defines the metadata of the serializable object
   * @param object - A valid Javascript object to be serialized
   * @param objectName - Name of the serialized object
   * @param options - additional options to deserialization
   * @returns A valid serialized Javascript object
   */


  Serializer.prototype.serialize = function (mapper, object, objectName, options) {
    var _a, _b, _c;

    if (options === void 0) {
      options = {};
    }

    var updatedOptions = {
      rootName: (_a = options.rootName) !== null && _a !== void 0 ? _a : "",
      includeRoot: (_b = options.includeRoot) !== null && _b !== void 0 ? _b : false,
      xmlCharKey: (_c = options.xmlCharKey) !== null && _c !== void 0 ? _c : _serializer.XML_CHARKEY
    };
    var payload = {};
    var mapperType = mapper.type.name;

    if (!objectName) {
      objectName = mapper.serializedName;
    }

    if (mapperType.match(/^Sequence$/i) !== null) {
      payload = [];
    }

    if (mapper.isConstant) {
      object = mapper.defaultValue;
    } // This table of allowed values should help explain
    // the mapper.required and mapper.nullable properties.
    // X means "neither undefined or null are allowed".
    //           || required
    //           || true      | false
    //  nullable || ==========================
    //      true || null      | undefined/null
    //     false || X         | undefined
    // undefined || X         | undefined/null


    var required = mapper.required,
        nullable = mapper.nullable;

    if (required && nullable && object === undefined) {
      throw new Error(objectName + " cannot be undefined.");
    }

    if (required && !nullable && object == undefined) {
      throw new Error(objectName + " cannot be null or undefined.");
    }

    if (!required && nullable === false && object === null) {
      throw new Error(objectName + " cannot be null.");
    }

    if (object == undefined) {
      payload = object;
    } else {
      // Validate Constraints if any
      this.validateConstraints(mapper, object, objectName);

      if (mapperType.match(/^any$/i) !== null) {
        payload = object;
      } else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {
        payload = serializeBasicTypes(mapperType, objectName, object);
      } else if (mapperType.match(/^Enum$/i) !== null) {
        var enumMapper = mapper;
        payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);
      } else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null) {
        payload = serializeDateTypes(mapperType, object, objectName);
      } else if (mapperType.match(/^ByteArray$/i) !== null) {
        payload = serializeByteArrayType(objectName, object);
      } else if (mapperType.match(/^Base64Url$/i) !== null) {
        payload = serializeBase64UrlType(objectName, object);
      } else if (mapperType.match(/^Sequence$/i) !== null) {
        payload = serializeSequenceType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
      } else if (mapperType.match(/^Dictionary$/i) !== null) {
        payload = serializeDictionaryType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
      } else if (mapperType.match(/^Composite$/i) !== null) {
        payload = serializeCompositeType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
      }
    }

    return payload;
  };
  /**
   * Deserialize the given object based on its metadata defined in the mapper
   *
   * @param mapper - The mapper which defines the metadata of the serializable object
   * @param responseBody - A valid Javascript entity to be deserialized
   * @param objectName - Name of the deserialized object
   * @param options - Controls behavior of XML parser and builder.
   * @returns A valid deserialized Javascript object
   */


  Serializer.prototype.deserialize = function (mapper, responseBody, objectName, options) {
    var _a, _b, _c;

    if (options === void 0) {
      options = {};
    }

    var updatedOptions = {
      rootName: (_a = options.rootName) !== null && _a !== void 0 ? _a : "",
      includeRoot: (_b = options.includeRoot) !== null && _b !== void 0 ? _b : false,
      xmlCharKey: (_c = options.xmlCharKey) !== null && _c !== void 0 ? _c : _serializer.XML_CHARKEY
    };

    if (responseBody == undefined) {
      if (this.isXML && mapper.type.name === "Sequence" && !mapper.xmlIsWrapped) {
        // Edge case for empty XML non-wrapped lists. xml2js can't distinguish
        // between the list being empty versus being missing,
        // so let's do the more user-friendly thing and return an empty list.
        responseBody = [];
      } // specifically check for undefined as default value can be a falsey value `0, "", false, null`


      if (mapper.defaultValue !== undefined) {
        responseBody = mapper.defaultValue;
      }

      return responseBody;
    }

    var payload;
    var mapperType = mapper.type.name;

    if (!objectName) {
      objectName = mapper.serializedName;
    }

    if (mapperType.match(/^Composite$/i) !== null) {
      payload = deserializeCompositeType(this, mapper, responseBody, objectName, updatedOptions);
    } else {
      if (this.isXML) {
        var xmlCharKey = updatedOptions.xmlCharKey;
        var castResponseBody = responseBody;
        /**
         * If the mapper specifies this as a non-composite type value but the responseBody contains
         * both header ("$" i.e., XML_ATTRKEY) and body ("#" i.e., XML_CHARKEY) properties,
         * then just reduce the responseBody value to the body ("#" i.e., XML_CHARKEY) property.
         */

        if (castResponseBody[_serializer.XML_ATTRKEY] != undefined && castResponseBody[xmlCharKey] != undefined) {
          responseBody = castResponseBody[xmlCharKey];
        }
      }

      if (mapperType.match(/^Number$/i) !== null) {
        payload = parseFloat(responseBody);

        if (isNaN(payload)) {
          payload = responseBody;
        }
      } else if (mapperType.match(/^Boolean$/i) !== null) {
        if (responseBody === "true") {
          payload = true;
        } else if (responseBody === "false") {
          payload = false;
        } else {
          payload = responseBody;
        }
      } else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {
        payload = responseBody;
      } else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {
        payload = new Date(responseBody);
      } else if (mapperType.match(/^UnixTime$/i) !== null) {
        payload = unixTimeToDate(responseBody);
      } else if (mapperType.match(/^ByteArray$/i) !== null) {
        payload = base64.decodeString(responseBody);
      } else if (mapperType.match(/^Base64Url$/i) !== null) {
        payload = base64UrlToByteArray(responseBody);
      } else if (mapperType.match(/^Sequence$/i) !== null) {
        payload = deserializeSequenceType(this, mapper, responseBody, objectName, updatedOptions);
      } else if (mapperType.match(/^Dictionary$/i) !== null) {
        payload = deserializeDictionaryType(this, mapper, responseBody, objectName, updatedOptions);
      }
    }

    if (mapper.isConstant) {
      payload = mapper.defaultValue;
    }

    return payload;
  };

  return Serializer;
}();

exports.Serializer = Serializer;

function trimEnd(str, ch) {
  var len = str.length;

  while (len - 1 >= 0 && str[len - 1] === ch) {
    --len;
  }

  return str.substr(0, len);
}

function bufferToBase64Url(buffer) {
  if (!buffer) {
    return undefined;
  }

  if (!(buffer instanceof Uint8Array)) {
    throw new Error("Please provide an input of type Uint8Array for converting to Base64Url.");
  } // Uint8Array to Base64.


  var str = base64.encodeByteArray(buffer); // Base64 to Base64Url.

  return trimEnd(str, "=").replace(/\+/g, "-").replace(/\//g, "_");
}

function base64UrlToByteArray(str) {
  if (!str) {
    return undefined;
  }

  if (str && typeof str.valueOf() !== "string") {
    throw new Error("Please provide an input of type string for converting to Uint8Array");
  } // Base64Url to Base64.


  str = str.replace(/-/g, "+").replace(/_/g, "/"); // Base64 to Uint8Array.

  return base64.decodeString(str);
}

function splitSerializeName(prop) {
  var classes = [];
  var partialclass = "";

  if (prop) {
    var subwords = prop.split(".");

    for (var _i = 0, subwords_1 = subwords; _i < subwords_1.length; _i++) {
      var item = subwords_1[_i];

      if (item.charAt(item.length - 1) === "\\") {
        partialclass += item.substr(0, item.length - 1) + ".";
      } else {
        partialclass += item;
        classes.push(partialclass);
        partialclass = "";
      }
    }
  }

  return classes;
}

function dateToUnixTime(d) {
  if (!d) {
    return undefined;
  }

  if (typeof d.valueOf() === "string") {
    d = new Date(d);
  }

  return Math.floor(d.getTime() / 1000);
}

function unixTimeToDate(n) {
  if (!n) {
    return undefined;
  }

  return new Date(n * 1000);
}

function serializeBasicTypes(typeName, objectName, value) {
  if (value !== null && value !== undefined) {
    if (typeName.match(/^Number$/i) !== null) {
      if (typeof value !== "number") {
        throw new Error(objectName + " with value " + value + " must be of type number.");
      }
    } else if (typeName.match(/^String$/i) !== null) {
      if (typeof value.valueOf() !== "string") {
        throw new Error(objectName + " with value \"" + value + "\" must be of type string.");
      }
    } else if (typeName.match(/^Uuid$/i) !== null) {
      if (!(typeof value.valueOf() === "string" && utils.isValidUuid(value))) {
        throw new Error(objectName + " with value \"" + value + "\" must be of type string and a valid uuid.");
      }
    } else if (typeName.match(/^Boolean$/i) !== null) {
      if (typeof value !== "boolean") {
        throw new Error(objectName + " with value " + value + " must be of type boolean.");
      }
    } else if (typeName.match(/^Stream$/i) !== null) {
      var objectType = typeof value;

      if (objectType !== "string" && objectType !== "function" && !(value instanceof ArrayBuffer) && !ArrayBuffer.isView(value) && !((typeof Blob === "function" || typeof Blob === "object") && value instanceof Blob)) {
        throw new Error(objectName + " must be a string, Blob, ArrayBuffer, ArrayBufferView, or a function returning NodeJS.ReadableStream.");
      }
    }
  }

  return value;
}

function serializeEnumType(objectName, allowedValues, value) {
  if (!allowedValues) {
    throw new Error("Please provide a set of allowedValues to validate " + objectName + " as an Enum Type.");
  }

  var isPresent = allowedValues.some(function (item) {
    if (typeof item.valueOf() === "string") {
      return item.toLowerCase() === value.toLowerCase();
    }

    return item === value;
  });

  if (!isPresent) {
    throw new Error(value + " is not a valid value for " + objectName + ". The valid values are: " + JSON.stringify(allowedValues) + ".");
  }

  return value;
}

function serializeByteArrayType(objectName, value) {
  var returnValue = "";

  if (value != undefined) {
    if (!(value instanceof Uint8Array)) {
      throw new Error(objectName + " must be of type Uint8Array.");
    }

    returnValue = base64.encodeByteArray(value);
  }

  return returnValue;
}

function serializeBase64UrlType(objectName, value) {
  var returnValue = "";

  if (value != undefined) {
    if (!(value instanceof Uint8Array)) {
      throw new Error(objectName + " must be of type Uint8Array.");
    }

    returnValue = bufferToBase64Url(value) || "";
  }

  return returnValue;
}

function serializeDateTypes(typeName, value, objectName) {
  if (value != undefined) {
    if (typeName.match(/^Date$/i) !== null) {
      if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
        throw new Error(objectName + " must be an instanceof Date or a string in ISO8601 format.");
      }

      value = value instanceof Date ? value.toISOString().substring(0, 10) : new Date(value).toISOString().substring(0, 10);
    } else if (typeName.match(/^DateTime$/i) !== null) {
      if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
        throw new Error(objectName + " must be an instanceof Date or a string in ISO8601 format.");
      }

      value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();
    } else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {
      if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
        throw new Error(objectName + " must be an instanceof Date or a string in RFC-1123 format.");
      }

      value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();
    } else if (typeName.match(/^UnixTime$/i) !== null) {
      if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
        throw new Error(objectName + " must be an instanceof Date or a string in RFC-1123/ISO8601 format " + "for it to be serialized in UnixTime/Epoch format.");
      }

      value = dateToUnixTime(value);
    } else if (typeName.match(/^TimeSpan$/i) !== null) {
      if (!utils.isDuration(value)) {
        throw new Error(objectName + " must be a string in ISO 8601 format. Instead was \"" + value + "\".");
      }
    }
  }

  return value;
}

function serializeSequenceType(serializer, mapper, object, objectName, isXml, options) {
  var _a, _b;

  if (!Array.isArray(object)) {
    throw new Error(objectName + " must be of type Array.");
  }

  var elementType = mapper.type.element;

  if (!elementType || typeof elementType !== "object") {
    throw new Error("element\" metadata for an Array must be defined in the " + ("mapper and it must of type \"object\" in " + objectName + "."));
  }

  var tempArray = [];

  for (var i = 0; i < object.length; i++) {
    var serializedValue = serializer.serialize(elementType, object[i], objectName, options);

    if (isXml && elementType.xmlNamespace) {
      var xmlnsKey = elementType.xmlNamespacePrefix ? "xmlns:" + elementType.xmlNamespacePrefix : "xmlns";

      if (elementType.type.name === "Composite") {
        tempArray[i] = (0, _tslib.__assign)({}, serializedValue);
        tempArray[i][_serializer.XML_ATTRKEY] = (_a = {}, _a[xmlnsKey] = elementType.xmlNamespace, _a);
      } else {
        tempArray[i] = {};
        tempArray[i][options.xmlCharKey] = serializedValue;
        tempArray[i][_serializer.XML_ATTRKEY] = (_b = {}, _b[xmlnsKey] = elementType.xmlNamespace, _b);
      }
    } else {
      tempArray[i] = serializedValue;
    }
  }

  return tempArray;
}

function serializeDictionaryType(serializer, mapper, object, objectName, isXml, options) {
  var _a;

  if (typeof object !== "object") {
    throw new Error(objectName + " must be of type object.");
  }

  var valueType = mapper.type.value;

  if (!valueType || typeof valueType !== "object") {
    throw new Error("\"value\" metadata for a Dictionary must be defined in the " + ("mapper and it must of type \"object\" in " + objectName + "."));
  }

  var tempDictionary = {};

  for (var _i = 0, _b = Object.keys(object); _i < _b.length; _i++) {
    var key = _b[_i];
    var serializedValue = serializer.serialize(valueType, object[key], objectName, options); // If the element needs an XML namespace we need to add it within the $ property

    tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);
  } // Add the namespace to the root element if needed


  if (isXml && mapper.xmlNamespace) {
    var xmlnsKey = mapper.xmlNamespacePrefix ? "xmlns:" + mapper.xmlNamespacePrefix : "xmlns";
    var result = tempDictionary;
    result[_serializer.XML_ATTRKEY] = (_a = {}, _a[xmlnsKey] = mapper.xmlNamespace, _a);
    return result;
  }

  return tempDictionary;
}
/**
 * Resolves the additionalProperties property from a referenced mapper
 * @param serializer - The serializer containing the entire set of mappers
 * @param mapper - The composite mapper to resolve
 * @param objectName - Name of the object being serialized
 */


function resolveAdditionalProperties(serializer, mapper, objectName) {
  var additionalProperties = mapper.type.additionalProperties;

  if (!additionalProperties && mapper.type.className) {
    var modelMapper = resolveReferencedMapper(serializer, mapper, objectName);
    return modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.additionalProperties;
  }

  return additionalProperties;
}
/**
 * Finds the mapper referenced by className
 * @param serializer - The serializer containing the entire set of mappers
 * @param mapper - The composite mapper to resolve
 * @param objectName - Name of the object being serialized
 */


function resolveReferencedMapper(serializer, mapper, objectName) {
  var className = mapper.type.className;

  if (!className) {
    throw new Error("Class name for model \"" + objectName + "\" is not provided in the mapper \"" + JSON.stringify(mapper, undefined, 2) + "\".");
  }

  return serializer.modelMappers[className];
}
/**
 * Resolves a composite mapper's modelProperties.
 * @param serializer - The serializer containing the entire set of mappers
 * @param mapper - The composite mapper to resolve
 */


function resolveModelProperties(serializer, mapper, objectName) {
  var modelProps = mapper.type.modelProperties;

  if (!modelProps) {
    var modelMapper = resolveReferencedMapper(serializer, mapper, objectName);

    if (!modelMapper) {
      throw new Error("mapper() cannot be null or undefined for model \"" + mapper.type.className + "\".");
    }

    modelProps = modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.modelProperties;

    if (!modelProps) {
      throw new Error("modelProperties cannot be null or undefined in the " + ("mapper \"" + JSON.stringify(modelMapper) + "\" of type \"" + mapper.type.className + "\" for object \"" + objectName + "\"."));
    }
  }

  return modelProps;
}

function serializeCompositeType(serializer, mapper, object, objectName, isXml, options) {
  var _a, _b;

  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {
    mapper = getPolymorphicMapper(serializer, mapper, object, "clientName");
  }

  if (object != undefined) {
    var payload = {};
    var modelProps = resolveModelProperties(serializer, mapper, objectName);

    for (var _i = 0, _c = Object.keys(modelProps); _i < _c.length; _i++) {
      var key = _c[_i];
      var propertyMapper = modelProps[key];

      if (propertyMapper.readOnly) {
        continue;
      }

      var propName = void 0;
      var parentObject = payload;

      if (serializer.isXML) {
        if (propertyMapper.xmlIsWrapped) {
          propName = propertyMapper.xmlName;
        } else {
          propName = propertyMapper.xmlElementName || propertyMapper.xmlName;
        }
      } else {
        var paths = splitSerializeName(propertyMapper.serializedName);
        propName = paths.pop();

        for (var _d = 0, paths_1 = paths; _d < paths_1.length; _d++) {
          var pathName = paths_1[_d];
          var childObject = parentObject[pathName];

          if (childObject == undefined && (object[key] != undefined || propertyMapper.defaultValue !== undefined)) {
            parentObject[pathName] = {};
          }

          parentObject = parentObject[pathName];
        }
      }

      if (parentObject != undefined) {
        if (isXml && mapper.xmlNamespace) {
          var xmlnsKey = mapper.xmlNamespacePrefix ? "xmlns:" + mapper.xmlNamespacePrefix : "xmlns";
          parentObject[_serializer.XML_ATTRKEY] = (0, _tslib.__assign)((0, _tslib.__assign)({}, parentObject[_serializer.XML_ATTRKEY]), (_a = {}, _a[xmlnsKey] = mapper.xmlNamespace, _a));
        }

        var propertyObjectName = propertyMapper.serializedName !== "" ? objectName + "." + propertyMapper.serializedName : objectName;
        var toSerialize = object[key];
        var polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);

        if (polymorphicDiscriminator && polymorphicDiscriminator.clientName === key && toSerialize == undefined) {
          toSerialize = mapper.serializedName;
        }

        var serializedValue = serializer.serialize(propertyMapper, toSerialize, propertyObjectName, options);

        if (serializedValue !== undefined && propName != undefined) {
          var value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);

          if (isXml && propertyMapper.xmlIsAttribute) {
            // XML_ATTRKEY, i.e., $ is the key attributes are kept under in xml2js.
            // This keeps things simple while preventing name collision
            // with names in user documents.
            parentObject[_serializer.XML_ATTRKEY] = parentObject[_serializer.XML_ATTRKEY] || {};
            parentObject[_serializer.XML_ATTRKEY][propName] = serializedValue;
          } else if (isXml && propertyMapper.xmlIsWrapped) {
            parentObject[propName] = (_b = {}, _b[propertyMapper.xmlElementName] = value, _b);
          } else {
            parentObject[propName] = value;
          }
        }
      }
    }

    var additionalPropertiesMapper = resolveAdditionalProperties(serializer, mapper, objectName);

    if (additionalPropertiesMapper) {
      var propNames = Object.keys(modelProps);

      var _loop_1 = function (clientPropName) {
        var isAdditionalProperty = propNames.every(function (pn) {
          return pn !== clientPropName;
        });

        if (isAdditionalProperty) {
          payload[clientPropName] = serializer.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '["' + clientPropName + '"]', options);
        }
      };

      for (var clientPropName in object) {
        _loop_1(clientPropName);
      }
    }

    return payload;
  }

  return object;
}

function getXmlObjectValue(propertyMapper, serializedValue, isXml, options) {
  var _a;

  if (!isXml || !propertyMapper.xmlNamespace) {
    return serializedValue;
  }

  var xmlnsKey = propertyMapper.xmlNamespacePrefix ? "xmlns:" + propertyMapper.xmlNamespacePrefix : "xmlns";
  var xmlNamespace = (_a = {}, _a[xmlnsKey] = propertyMapper.xmlNamespace, _a);

  if (["Composite"].includes(propertyMapper.type.name)) {
    if (serializedValue[_serializer.XML_ATTRKEY]) {
      return serializedValue;
    } else {
      var result_1 = (0, _tslib.__assign)({}, serializedValue);
      result_1[_serializer.XML_ATTRKEY] = xmlNamespace;
      return result_1;
    }
  }

  var result = {};
  result[options.xmlCharKey] = serializedValue;
  result[_serializer.XML_ATTRKEY] = xmlNamespace;
  return result;
}

function isSpecialXmlProperty(propertyName, options) {
  return [_serializer.XML_ATTRKEY, options.xmlCharKey].includes(propertyName);
}

function deserializeCompositeType(serializer, mapper, responseBody, objectName, options) {
  var _a;

  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {
    mapper = getPolymorphicMapper(serializer, mapper, responseBody, "serializedName");
  }

  var modelProps = resolveModelProperties(serializer, mapper, objectName);
  var instance = {};
  var handledPropertyNames = [];

  for (var _i = 0, _b = Object.keys(modelProps); _i < _b.length; _i++) {
    var key = _b[_i];
    var propertyMapper = modelProps[key];
    var paths = splitSerializeName(modelProps[key].serializedName);
    handledPropertyNames.push(paths[0]);
    var serializedName = propertyMapper.serializedName,
        xmlName = propertyMapper.xmlName,
        xmlElementName = propertyMapper.xmlElementName;
    var propertyObjectName = objectName;

    if (serializedName !== "" && serializedName !== undefined) {
      propertyObjectName = objectName + "." + serializedName;
    }

    var headerCollectionPrefix = propertyMapper.headerCollectionPrefix;

    if (headerCollectionPrefix) {
      var dictionary = {};

      for (var _c = 0, _d = Object.keys(responseBody); _c < _d.length; _c++) {
        var headerKey = _d[_c];

        if (headerKey.startsWith(headerCollectionPrefix)) {
          dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(propertyMapper.type.value, responseBody[headerKey], propertyObjectName, options);
        }

        handledPropertyNames.push(headerKey);
      }

      instance[key] = dictionary;
    } else if (serializer.isXML) {
      if (propertyMapper.xmlIsAttribute && responseBody[_serializer.XML_ATTRKEY]) {
        instance[key] = serializer.deserialize(propertyMapper, responseBody[_serializer.XML_ATTRKEY][xmlName], propertyObjectName, options);
      } else {
        var propertyName = xmlElementName || xmlName || serializedName;

        if (propertyMapper.xmlIsWrapped) {
          /* a list of <xmlElementName> wrapped by <xmlName>
            For the xml example below
              <Cors>
                <CorsRule>...</CorsRule>
                <CorsRule>...</CorsRule>
              </Cors>
            the responseBody has
              {
                Cors: {
                  CorsRule: [{...}, {...}]
                }
              }
            xmlName is "Cors" and xmlElementName is"CorsRule".
          */
          var wrapped = responseBody[xmlName];
          var elementList = (_a = wrapped === null || wrapped === void 0 ? void 0 : wrapped[xmlElementName]) !== null && _a !== void 0 ? _a : [];
          instance[key] = serializer.deserialize(propertyMapper, elementList, propertyObjectName, options);
        } else {
          var property = responseBody[propertyName];
          instance[key] = serializer.deserialize(propertyMapper, property, propertyObjectName, options);
        }
      }
    } else {
      // deserialize the property if it is present in the provided responseBody instance
      var propertyInstance = void 0;
      var res = responseBody; // traversing the object step by step.

      for (var _e = 0, paths_2 = paths; _e < paths_2.length; _e++) {
        var item = paths_2[_e];
        if (!res) break;
        res = res[item];
      }

      propertyInstance = res;
      var polymorphicDiscriminator = mapper.type.polymorphicDiscriminator; // checking that the model property name (key)(ex: "fishtype") and the
      // clientName of the polymorphicDiscriminator {metadata} (ex: "fishtype")
      // instead of the serializedName of the polymorphicDiscriminator (ex: "fish.type")
      // is a better approach. The generator is not consistent with escaping '\.' in the
      // serializedName of the property (ex: "fish\.type") that is marked as polymorphic discriminator
      // and the serializedName of the metadata polymorphicDiscriminator (ex: "fish.type"). However,
      // the clientName transformation of the polymorphicDiscriminator (ex: "fishtype") and
      // the transformation of model property name (ex: "fishtype") is done consistently.
      // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.

      if (polymorphicDiscriminator && key === polymorphicDiscriminator.clientName && propertyInstance == undefined) {
        propertyInstance = mapper.serializedName;
      }

      var serializedValue = void 0; // paging

      if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === "") {
        propertyInstance = responseBody[key];
        instance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);
      } else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {
        serializedValue = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);
        instance[key] = serializedValue;
      }
    }
  }

  var additionalPropertiesMapper = mapper.type.additionalProperties;

  if (additionalPropertiesMapper) {
    var isAdditionalProperty = function (responsePropName) {
      for (var clientPropName in modelProps) {
        var paths = splitSerializeName(modelProps[clientPropName].serializedName);

        if (paths[0] === responsePropName) {
          return false;
        }
      }

      return true;
    };

    for (var responsePropName in responseBody) {
      if (isAdditionalProperty(responsePropName)) {
        instance[responsePropName] = serializer.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '["' + responsePropName + '"]', options);
      }
    }
  } else if (responseBody) {
    for (var _f = 0, _g = Object.keys(responseBody); _f < _g.length; _f++) {
      var key = _g[_f];

      if (instance[key] === undefined && !handledPropertyNames.includes(key) && !isSpecialXmlProperty(key, options)) {
        instance[key] = responseBody[key];
      }
    }
  }

  return instance;
}

function deserializeDictionaryType(serializer, mapper, responseBody, objectName, options) {
  var value = mapper.type.value;

  if (!value || typeof value !== "object") {
    throw new Error("\"value\" metadata for a Dictionary must be defined in the " + ("mapper and it must of type \"object\" in " + objectName));
  }

  if (responseBody) {
    var tempDictionary = {};

    for (var _i = 0, _a = Object.keys(responseBody); _i < _a.length; _i++) {
      var key = _a[_i];
      tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName, options);
    }

    return tempDictionary;
  }

  return responseBody;
}

function deserializeSequenceType(serializer, mapper, responseBody, objectName, options) {
  var element = mapper.type.element;

  if (!element || typeof element !== "object") {
    throw new Error("element\" metadata for an Array must be defined in the " + ("mapper and it must of type \"object\" in " + objectName));
  }

  if (responseBody) {
    if (!Array.isArray(responseBody)) {
      // xml2js will interpret a single element array as just the element, so force it to be an array
      responseBody = [responseBody];
    }

    var tempArray = [];

    for (var i = 0; i < responseBody.length; i++) {
      tempArray[i] = serializer.deserialize(element, responseBody[i], objectName + "[" + i + "]", options);
    }

    return tempArray;
  }

  return responseBody;
}

function getPolymorphicMapper(serializer, mapper, object, polymorphicPropertyName) {
  var polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);

  if (polymorphicDiscriminator) {
    var discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];

    if (discriminatorName != undefined) {
      var discriminatorValue = object[discriminatorName];

      if (discriminatorValue != undefined) {
        var typeName = mapper.type.uberParent || mapper.type.className;
        var indexDiscriminator = discriminatorValue === typeName ? discriminatorValue : typeName + "." + discriminatorValue;
        var polymorphicMapper = serializer.modelMappers.discriminators[indexDiscriminator];

        if (polymorphicMapper) {
          mapper = polymorphicMapper;
        }
      }
    }
  }

  return mapper;
}

function getPolymorphicDiscriminatorRecursively(serializer, mapper) {
  return mapper.type.polymorphicDiscriminator || getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) || getPolymorphicDiscriminatorSafely(serializer, mapper.type.className);
}

function getPolymorphicDiscriminatorSafely(serializer, typeName) {
  return typeName && serializer.modelMappers[typeName] && serializer.modelMappers[typeName].type.polymorphicDiscriminator;
} // TODO: why is this here?


function serializeObject(toSerialize) {
  var castToSerialize = toSerialize;
  if (toSerialize == undefined) return undefined;

  if (toSerialize instanceof Uint8Array) {
    toSerialize = base64.encodeByteArray(toSerialize);
    return toSerialize;
  } else if (toSerialize instanceof Date) {
    return toSerialize.toISOString();
  } else if (Array.isArray(toSerialize)) {
    var array = [];

    for (var i = 0; i < toSerialize.length; i++) {
      array.push(serializeObject(toSerialize[i]));
    }

    return array;
  } else if (typeof toSerialize === "object") {
    var dictionary = {};

    for (var property in toSerialize) {
      dictionary[property] = serializeObject(castToSerialize[property]);
    }

    return dictionary;
  }

  return toSerialize;
}
/**
 * Utility function to create a K:V from a list of strings
 */


function strEnum(o) {
  var result = {};

  for (var _i = 0, o_1 = o; _i < o_1.length; _i++) {
    var key = o_1[_i];
    result[key] = key;
  }

  return result;
} // eslint-disable-next-line @typescript-eslint/no-redeclare


var MapperType = strEnum(["Base64Url", "Boolean", "ByteArray", "Composite", "Date", "DateTime", "DateTimeRfc1123", "Dictionary", "Enum", "Number", "Object", "Sequence", "String", "Stream", "TimeSpan", "UnixTime"]);
exports.MapperType = MapperType;
},{"tslib":"node_modules/tslib/tslib.es6.js","./util/base64":"node_modules/@azure/core-http/es/src/util/base64.browser.js","./util/utils":"node_modules/@azure/core-http/es/src/util/utils.js","./util/serializer.common":"node_modules/@azure/core-http/es/src/util/serializer.common.js"}],"node_modules/@azure/core-http/es/src/webResource.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isWebResourceLike = isWebResourceLike;
exports.WebResource = void 0;

var _httpHeaders = require("./httpHeaders");

var _serializer = require("./serializer");

var _utils = require("./util/utils");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
function isWebResourceLike(object) {
  if (object && typeof object === "object") {
    var castObject = object;

    if (typeof castObject.url === "string" && typeof castObject.method === "string" && typeof castObject.headers === "object" && (0, _httpHeaders.isHttpHeadersLike)(castObject.headers) && typeof castObject.validateRequestProperties === "function" && typeof castObject.prepare === "function" && typeof castObject.clone === "function") {
      return true;
    }
  }

  return false;
}
/**
 * Creates a new WebResource object.
 *
 * This class provides an abstraction over a REST call by being library / implementation agnostic and wrapping the necessary
 * properties to initiate a request.
 */


var WebResource =
/** @class */
function () {
  function WebResource(url, method, body, query, headers, streamResponseBody, withCredentials, abortSignal, timeout, onUploadProgress, onDownloadProgress, proxySettings, keepAlive, decompressResponse, streamResponseStatusCodes) {
    this.streamResponseBody = streamResponseBody;
    this.streamResponseStatusCodes = streamResponseStatusCodes;
    this.url = url || "";
    this.method = method || "GET";
    this.headers = (0, _httpHeaders.isHttpHeadersLike)(headers) ? headers : new _httpHeaders.HttpHeaders(headers);
    this.body = body;
    this.query = query;
    this.formData = undefined;
    this.withCredentials = withCredentials || false;
    this.abortSignal = abortSignal;
    this.timeout = timeout || 0;
    this.onUploadProgress = onUploadProgress;
    this.onDownloadProgress = onDownloadProgress;
    this.proxySettings = proxySettings;
    this.keepAlive = keepAlive;
    this.decompressResponse = decompressResponse;
    this.requestId = this.headers.get("x-ms-client-request-id") || (0, _utils.generateUuid)();
  }
  /**
   * Validates that the required properties such as method, url, headers["Content-Type"],
   * headers["accept-language"] are defined. It will throw an error if one of the above
   * mentioned properties are not defined.
   */


  WebResource.prototype.validateRequestProperties = function () {
    if (!this.method) {
      throw new Error("WebResource.method is required.");
    }

    if (!this.url) {
      throw new Error("WebResource.url is required.");
    }
  };
  /**
   * Prepares the request.
   * @param options - Options to provide for preparing the request.
   * @returns Returns the prepared WebResource (HTTP Request) object that needs to be given to the request pipeline.
   */


  WebResource.prototype.prepare = function (options) {
    if (!options) {
      throw new Error("options object is required");
    }

    if (options.method === undefined || options.method === null || typeof options.method.valueOf() !== "string") {
      throw new Error("options.method must be a string.");
    }

    if (options.url && options.pathTemplate) {
      throw new Error("options.url and options.pathTemplate are mutually exclusive. Please provide exactly one of them.");
    }

    if ((options.pathTemplate === undefined || options.pathTemplate === null || typeof options.pathTemplate.valueOf() !== "string") && (options.url === undefined || options.url === null || typeof options.url.valueOf() !== "string")) {
      throw new Error("Please provide exactly one of options.pathTemplate or options.url.");
    } // set the url if it is provided.


    if (options.url) {
      if (typeof options.url !== "string") {
        throw new Error('options.url must be of type "string".');
      }

      this.url = options.url;
    } // set the method


    if (options.method) {
      var validMethods = ["GET", "PUT", "HEAD", "DELETE", "OPTIONS", "POST", "PATCH", "TRACE"];

      if (validMethods.indexOf(options.method.toUpperCase()) === -1) {
        throw new Error('The provided method "' + options.method + '" is invalid. Supported HTTP methods are: ' + JSON.stringify(validMethods));
      }
    }

    this.method = options.method.toUpperCase(); // construct the url if path template is provided

    if (options.pathTemplate) {
      var pathTemplate_1 = options.pathTemplate,
          pathParameters_1 = options.pathParameters;

      if (typeof pathTemplate_1 !== "string") {
        throw new Error('options.pathTemplate must be of type "string".');
      }

      if (!options.baseUrl) {
        options.baseUrl = "https://management.azure.com";
      }

      var baseUrl = options.baseUrl;
      var url_1 = baseUrl + (baseUrl.endsWith("/") ? "" : "/") + (pathTemplate_1.startsWith("/") ? pathTemplate_1.slice(1) : pathTemplate_1);
      var segments = url_1.match(/({[\w-]*\s*[\w-]*})/gi);

      if (segments && segments.length) {
        if (!pathParameters_1) {
          throw new Error("pathTemplate: " + pathTemplate_1 + " has been provided. Hence, options.pathParameters must also be provided.");
        }

        segments.forEach(function (item) {
          var pathParamName = item.slice(1, -1);
          var pathParam = pathParameters_1[pathParamName];

          if (pathParam === null || pathParam === undefined || !(typeof pathParam === "string" || typeof pathParam === "object")) {
            var stringifiedPathParameters = JSON.stringify(pathParameters_1, undefined, 2);
            throw new Error("pathTemplate: " + pathTemplate_1 + " contains the path parameter " + pathParamName + (" however, it is not present in parameters: " + stringifiedPathParameters + ".") + ("The value of the path parameter can either be a \"string\" of the form { " + pathParamName + ": \"some sample value\" } or ") + ("it can be an \"object\" of the form { \"" + pathParamName + "\": { value: \"some sample value\", skipUrlEncoding: true } }."));
          }

          if (typeof pathParam.valueOf() === "string") {
            url_1 = url_1.replace(item, encodeURIComponent(pathParam));
          }

          if (typeof pathParam.valueOf() === "object") {
            if (!pathParam.value) {
              throw new Error("options.pathParameters[" + pathParamName + "] is of type \"object\" but it does not contain a \"value\" property.");
            }

            if (pathParam.skipUrlEncoding) {
              url_1 = url_1.replace(item, pathParam.value);
            } else {
              url_1 = url_1.replace(item, encodeURIComponent(pathParam.value));
            }
          }
        });
      }

      this.url = url_1;
    } // append query parameters to the url if they are provided. They can be provided with pathTemplate or url option.


    if (options.queryParameters) {
      var queryParameters = options.queryParameters;

      if (typeof queryParameters !== "object") {
        throw new Error("options.queryParameters must be of type object. It should be a JSON object " + "of \"query-parameter-name\" as the key and the \"query-parameter-value\" as the value. " + "The \"query-parameter-value\" may be fo type \"string\" or an \"object\" of the form { value: \"query-parameter-value\", skipUrlEncoding: true }.");
      } // append question mark if it is not present in the url


      if (this.url && this.url.indexOf("?") === -1) {
        this.url += "?";
      } // construct queryString


      var queryParams = []; // We need to populate this.query as a dictionary if the request is being used for Sway's validateRequest().

      this.query = {};

      for (var queryParamName in queryParameters) {
        var queryParam = queryParameters[queryParamName];

        if (queryParam) {
          if (typeof queryParam === "string") {
            queryParams.push(queryParamName + "=" + encodeURIComponent(queryParam));
            this.query[queryParamName] = encodeURIComponent(queryParam);
          } else if (typeof queryParam === "object") {
            if (!queryParam.value) {
              throw new Error("options.queryParameters[" + queryParamName + "] is of type \"object\" but it does not contain a \"value\" property.");
            }

            if (queryParam.skipUrlEncoding) {
              queryParams.push(queryParamName + "=" + queryParam.value);
              this.query[queryParamName] = queryParam.value;
            } else {
              queryParams.push(queryParamName + "=" + encodeURIComponent(queryParam.value));
              this.query[queryParamName] = encodeURIComponent(queryParam.value);
            }
          }
        }
      } // end-of-for
      // append the queryString


      this.url += queryParams.join("&");
    } // add headers to the request if they are provided


    if (options.headers) {
      var headers = options.headers;

      for (var _i = 0, _a = Object.keys(options.headers); _i < _a.length; _i++) {
        var headerName = _a[_i];
        this.headers.set(headerName, headers[headerName]);
      }
    } // ensure accept-language is set correctly


    if (!this.headers.get("accept-language")) {
      this.headers.set("accept-language", "en-US");
    } // ensure the request-id is set correctly


    if (!this.headers.get("x-ms-client-request-id") && !options.disableClientRequestId) {
      this.headers.set("x-ms-client-request-id", this.requestId);
    } // default


    if (!this.headers.get("Content-Type")) {
      this.headers.set("Content-Type", "application/json; charset=utf-8");
    } // set the request body. request.js automatically sets the Content-Length request header, so we need not set it explicitly


    this.body = options.body;

    if (options.body !== undefined && options.body !== null) {
      // body as a stream special case. set the body as-is and check for some special request headers specific to sending a stream.
      if (options.bodyIsStream) {
        if (!this.headers.get("Transfer-Encoding")) {
          this.headers.set("Transfer-Encoding", "chunked");
        }

        if (this.headers.get("Content-Type") !== "application/octet-stream") {
          this.headers.set("Content-Type", "application/octet-stream");
        }
      } else {
        if (options.serializationMapper) {
          this.body = new _serializer.Serializer(options.mappers).serialize(options.serializationMapper, options.body, "requestBody");
        }

        if (!options.disableJsonStringifyOnBody) {
          this.body = JSON.stringify(options.body);
        }
      }
    }

    if (options.spanOptions) {
      this.spanOptions = options.spanOptions;
    }

    if (options.tracingContext) {
      this.tracingContext = options.tracingContext;
    }

    this.abortSignal = options.abortSignal;
    this.onDownloadProgress = options.onDownloadProgress;
    this.onUploadProgress = options.onUploadProgress;
    return this;
  };
  /**
   * Clone this WebResource HTTP request object.
   * @returns The clone of this WebResource HTTP request object.
   */


  WebResource.prototype.clone = function () {
    var result = new WebResource(this.url, this.method, this.body, this.query, this.headers && this.headers.clone(), this.streamResponseBody, this.withCredentials, this.abortSignal, this.timeout, this.onUploadProgress, this.onDownloadProgress, this.proxySettings, this.keepAlive, this.decompressResponse, this.streamResponseStatusCodes);

    if (this.formData) {
      result.formData = this.formData;
    }

    if (this.operationSpec) {
      result.operationSpec = this.operationSpec;
    }

    if (this.shouldDeserialize) {
      result.shouldDeserialize = this.shouldDeserialize;
    }

    if (this.operationResponseGetter) {
      result.operationResponseGetter = this.operationResponseGetter;
    }

    return result;
  };

  return WebResource;
}();

exports.WebResource = WebResource;
},{"./httpHeaders":"node_modules/@azure/core-http/es/src/httpHeaders.js","./serializer":"node_modules/@azure/core-http/es/src/serializer.js","./util/utils":"node_modules/@azure/core-http/es/src/util/utils.js"}],"node_modules/@azure/abort-controller/dist-esm/src/AbortSignal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.abortSignal = abortSignal;
exports.AbortSignal = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var listenersMap = new WeakMap();
var abortedMap = new WeakMap();
/**
 * An aborter instance implements AbortSignal interface, can abort HTTP requests.
 *
 * - Call AbortSignal.none to create a new AbortSignal instance that cannot be cancelled.
 * Use `AbortSignal.none` when you are required to pass a cancellation token but the operation
 * cannot or will not ever be cancelled.
 *
 * @example
 * Abort without timeout
 * ```ts
 * await doAsyncWork(AbortSignal.none);
 * ```
 */

var AbortSignal =
/** @class */
function () {
  function AbortSignal() {
    /**
     * onabort event listener.
     */
    this.onabort = null;
    listenersMap.set(this, []);
    abortedMap.set(this, false);
  }

  Object.defineProperty(AbortSignal.prototype, "aborted", {
    /**
     * Status of whether aborted or not.
     *
     * @readonly
     */
    get: function () {
      if (!abortedMap.has(this)) {
        throw new TypeError("Expected `this` to be an instance of AbortSignal.");
      }

      return abortedMap.get(this);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(AbortSignal, "none", {
    /**
     * Creates a new AbortSignal instance that will never be aborted.
     *
     * @readonly
     */
    get: function () {
      return new AbortSignal();
    },
    enumerable: false,
    configurable: true
  });
  /**
   * Added new "abort" event listener, only support "abort" event.
   *
   * @param _type - Only support "abort" event
   * @param listener - The listener to be added
   */

  AbortSignal.prototype.addEventListener = function ( // tslint:disable-next-line:variable-name
  _type, listener) {
    if (!listenersMap.has(this)) {
      throw new TypeError("Expected `this` to be an instance of AbortSignal.");
    }

    var listeners = listenersMap.get(this);
    listeners.push(listener);
  };
  /**
   * Remove "abort" event listener, only support "abort" event.
   *
   * @param _type - Only support "abort" event
   * @param listener - The listener to be removed
   */


  AbortSignal.prototype.removeEventListener = function ( // tslint:disable-next-line:variable-name
  _type, listener) {
    if (!listenersMap.has(this)) {
      throw new TypeError("Expected `this` to be an instance of AbortSignal.");
    }

    var listeners = listenersMap.get(this);
    var index = listeners.indexOf(listener);

    if (index > -1) {
      listeners.splice(index, 1);
    }
  };
  /**
   * Dispatches a synthetic event to the AbortSignal.
   */


  AbortSignal.prototype.dispatchEvent = function (_event) {
    throw new Error("This is a stub dispatchEvent implementation that should not be used.  It only exists for type-checking purposes.");
  };

  return AbortSignal;
}();

exports.AbortSignal = AbortSignal;

/**
 * Helper to trigger an abort event immediately, the onabort and all abort event listeners will be triggered.
 * Will try to trigger abort event for all linked AbortSignal nodes.
 *
 * - If there is a timeout, the timer will be cancelled.
 * - If aborted is true, nothing will happen.
 *
 * @internal
 */
// eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters
function abortSignal(signal) {
  if (signal.aborted) {
    return;
  }

  if (signal.onabort) {
    signal.onabort.call(signal);
  }

  var listeners = listenersMap.get(signal);

  if (listeners) {
    // Create a copy of listeners so mutations to the array
    // (e.g. via removeListener calls) don't affect the listeners
    // we invoke.
    listeners.slice().forEach(function (listener) {
      listener.call(signal, {
        type: "abort"
      });
    });
  }

  abortedMap.set(signal, true);
}
},{}],"node_modules/@azure/abort-controller/dist-esm/src/AbortController.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AbortController = exports.AbortError = void 0;

var _tslib = require("tslib");

var _AbortSignal = require("./AbortSignal");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * This error is thrown when an asynchronous operation has been aborted.
 * Check for this error by testing the `name` that the name property of the
 * error matches `"AbortError"`.
 *
 * @example
 * ```ts
 * const controller = new AbortController();
 * controller.abort();
 * try {
 *   doAsyncWork(controller.signal)
 * } catch (e) {
 *   if (e.name === 'AbortError') {
 *     // handle abort error here.
 *   }
 * }
 * ```
 */
var AbortError =
/** @class */
function (_super) {
  (0, _tslib.__extends)(AbortError, _super);

  function AbortError(message) {
    var _this = _super.call(this, message) || this;

    _this.name = "AbortError";
    return _this;
  }

  return AbortError;
}(Error);

exports.AbortError = AbortError;

/**
 * An AbortController provides an AbortSignal and the associated controls to signal
 * that an asynchronous operation should be aborted.
 *
 * @example
 * Abort an operation when another event fires
 * ```ts
 * const controller = new AbortController();
 * const signal = controller.signal;
 * doAsyncWork(signal);
 * button.addEventListener('click', () => controller.abort());
 * ```
 *
 * @example
 * Share aborter cross multiple operations in 30s
 * ```ts
 * // Upload the same data to 2 different data centers at the same time,
 * // abort another when any of them is finished
 * const controller = AbortController.withTimeout(30 * 1000);
 * doAsyncWork(controller.signal).then(controller.abort);
 * doAsyncWork(controller.signal).then(controller.abort);
 *```
 *
 * @example
 * Cascaded aborting
 * ```ts
 * // All operations can't take more than 30 seconds
 * const aborter = Aborter.timeout(30 * 1000);
 *
 * // Following 2 operations can't take more than 25 seconds
 * await doAsyncWork(aborter.withTimeout(25 * 1000));
 * await doAsyncWork(aborter.withTimeout(25 * 1000));
 * ```
 */
var AbortController =
/** @class */
function () {
  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
  function AbortController(parentSignals) {
    var _this = this;

    this._signal = new _AbortSignal.AbortSignal();

    if (!parentSignals) {
      return;
    } // coerce parentSignals into an array


    if (!Array.isArray(parentSignals)) {
      // eslint-disable-next-line prefer-rest-params
      parentSignals = arguments;
    }

    for (var _i = 0, parentSignals_1 = parentSignals; _i < parentSignals_1.length; _i++) {
      var parentSignal = parentSignals_1[_i]; // if the parent signal has already had abort() called,
      // then call abort on this signal as well.

      if (parentSignal.aborted) {
        this.abort();
      } else {
        // when the parent signal aborts, this signal should as well.
        parentSignal.addEventListener("abort", function () {
          _this.abort();
        });
      }
    }
  }

  Object.defineProperty(AbortController.prototype, "signal", {
    /**
     * The AbortSignal associated with this controller that will signal aborted
     * when the abort method is called on this controller.
     *
     * @readonly
     */
    get: function () {
      return this._signal;
    },
    enumerable: false,
    configurable: true
  });
  /**
   * Signal that any operations passed this controller's associated abort signal
   * to cancel any remaining work and throw an `AbortError`.
   */

  AbortController.prototype.abort = function () {
    (0, _AbortSignal.abortSignal)(this._signal);
  };
  /**
   * Creates a new AbortSignal instance that will abort after the provided ms.
   * @param ms - Elapsed time in milliseconds to trigger an abort.
   */


  AbortController.timeout = function (ms) {
    var signal = new _AbortSignal.AbortSignal();
    var timer = setTimeout(_AbortSignal.abortSignal, ms, signal); // Prevent the active Timer from keeping the Node.js event loop active.

    if (typeof timer.unref === "function") {
      timer.unref();
    }

    return signal;
  };

  return AbortController;
}();

exports.AbortController = AbortController;
},{"tslib":"node_modules/tslib/tslib.es6.js","./AbortSignal":"node_modules/@azure/abort-controller/dist-esm/src/AbortSignal.js"}],"node_modules/@azure/abort-controller/dist-esm/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AbortController", {
  enumerable: true,
  get: function () {
    return _AbortController.AbortController;
  }
});
Object.defineProperty(exports, "AbortError", {
  enumerable: true,
  get: function () {
    return _AbortController.AbortError;
  }
});
Object.defineProperty(exports, "AbortSignal", {
  enumerable: true,
  get: function () {
    return _AbortSignal.AbortSignal;
  }
});

var _AbortController = require("./AbortController");

var _AbortSignal = require("./AbortSignal");
},{"./AbortController":"node_modules/@azure/abort-controller/dist-esm/src/AbortController.js","./AbortSignal":"node_modules/@azure/abort-controller/dist-esm/src/AbortSignal.js"}],"node_modules/@azure/core-http/es/src/util/inspect.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.custom = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var custom = {};
exports.custom = custom;
},{}],"node_modules/@azure/core-http/es/src/util/url.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.URL = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var url = URL;
exports.URL = url;
},{}],"node_modules/@azure/core-http/es/src/url.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isAlphaNumericCharacter = isAlphaNumericCharacter;
Object.defineProperty(exports, "URL", {
  enumerable: true,
  get: function () {
    return _url.URL;
  }
});
exports.URLTokenizer = exports.URLToken = exports.URLBuilder = exports.URLQuery = void 0;

var _utils = require("./util/utils");

var _url = require("./util/url");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * A class that handles the query portion of a URLBuilder.
 */
var URLQuery =
/** @class */
function () {
  function URLQuery() {
    this._rawQuery = {};
  }
  /**
   * Get whether or not there any query parameters in this URLQuery.
   */


  URLQuery.prototype.any = function () {
    return Object.keys(this._rawQuery).length > 0;
  };
  /**
   * Get the keys of the query string.
   */


  URLQuery.prototype.keys = function () {
    return Object.keys(this._rawQuery);
  };
  /**
   * Set a query parameter with the provided name and value. If the parameterValue is undefined or
   * empty, then this will attempt to remove an existing query parameter with the provided
   * parameterName.
   */


  URLQuery.prototype.set = function (parameterName, parameterValue) {
    var caseParameterValue = parameterValue;

    if (parameterName) {
      if (caseParameterValue !== undefined && caseParameterValue !== null) {
        var newValue = Array.isArray(caseParameterValue) ? caseParameterValue : caseParameterValue.toString();
        this._rawQuery[parameterName] = newValue;
      } else {
        delete this._rawQuery[parameterName];
      }
    }
  };
  /**
   * Get the value of the query parameter with the provided name. If no parameter exists with the
   * provided parameter name, then undefined will be returned.
   */


  URLQuery.prototype.get = function (parameterName) {
    return parameterName ? this._rawQuery[parameterName] : undefined;
  };
  /**
   * Get the string representation of this query. The return value will not start with a "?".
   */


  URLQuery.prototype.toString = function () {
    var result = "";

    for (var parameterName in this._rawQuery) {
      if (result) {
        result += "&";
      }

      var parameterValue = this._rawQuery[parameterName];

      if (Array.isArray(parameterValue)) {
        var parameterStrings = [];

        for (var _i = 0, parameterValue_1 = parameterValue; _i < parameterValue_1.length; _i++) {
          var parameterValueElement = parameterValue_1[_i];
          parameterStrings.push(parameterName + "=" + parameterValueElement);
        }

        result += parameterStrings.join("&");
      } else {
        result += parameterName + "=" + parameterValue;
      }
    }

    return result;
  };
  /**
   * Parse a URLQuery from the provided text.
   */


  URLQuery.parse = function (text) {
    var result = new URLQuery();

    if (text) {
      if (text.startsWith("?")) {
        text = text.substring(1);
      }

      var currentState = "ParameterName";
      var parameterName = "";
      var parameterValue = "";

      for (var i = 0; i < text.length; ++i) {
        var currentCharacter = text[i];

        switch (currentState) {
          case "ParameterName":
            switch (currentCharacter) {
              case "=":
                currentState = "ParameterValue";
                break;

              case "&":
                parameterName = "";
                parameterValue = "";
                break;

              default:
                parameterName += currentCharacter;
                break;
            }

            break;

          case "ParameterValue":
            switch (currentCharacter) {
              case "&":
                result.set(parameterName, parameterValue);
                parameterName = "";
                parameterValue = "";
                currentState = "ParameterName";
                break;

              default:
                parameterValue += currentCharacter;
                break;
            }

            break;

          default:
            throw new Error("Unrecognized URLQuery parse state: " + currentState);
        }
      }

      if (currentState === "ParameterValue") {
        result.set(parameterName, parameterValue);
      }
    }

    return result;
  };

  return URLQuery;
}();

exports.URLQuery = URLQuery;

/**
 * A class that handles creating, modifying, and parsing URLs.
 */
var URLBuilder =
/** @class */
function () {
  function URLBuilder() {}
  /**
   * Set the scheme/protocol for this URL. If the provided scheme contains other parts of a URL
   * (such as a host, port, path, or query), those parts will be added to this URL as well.
   */


  URLBuilder.prototype.setScheme = function (scheme) {
    if (!scheme) {
      this._scheme = undefined;
    } else {
      this.set(scheme, "SCHEME");
    }
  };
  /**
   * Get the scheme that has been set in this URL.
   */


  URLBuilder.prototype.getScheme = function () {
    return this._scheme;
  };
  /**
   * Set the host for this URL. If the provided host contains other parts of a URL (such as a
   * port, path, or query), those parts will be added to this URL as well.
   */


  URLBuilder.prototype.setHost = function (host) {
    if (!host) {
      this._host = undefined;
    } else {
      this.set(host, "SCHEME_OR_HOST");
    }
  };
  /**
   * Get the host that has been set in this URL.
   */


  URLBuilder.prototype.getHost = function () {
    return this._host;
  };
  /**
   * Set the port for this URL. If the provided port contains other parts of a URL (such as a
   * path or query), those parts will be added to this URL as well.
   */


  URLBuilder.prototype.setPort = function (port) {
    if (port === undefined || port === null || port === "") {
      this._port = undefined;
    } else {
      this.set(port.toString(), "PORT");
    }
  };
  /**
   * Get the port that has been set in this URL.
   */


  URLBuilder.prototype.getPort = function () {
    return this._port;
  };
  /**
   * Set the path for this URL. If the provided path contains a query, then it will be added to
   * this URL as well.
   */


  URLBuilder.prototype.setPath = function (path) {
    if (!path) {
      this._path = undefined;
    } else {
      var schemeIndex = path.indexOf("://");

      if (schemeIndex !== -1) {
        var schemeStart = path.lastIndexOf("/", schemeIndex); // Make sure to only grab the URL part of the path before setting the state back to SCHEME
        // this will handle cases such as "/a/b/c/https://microsoft.com" => "https://microsoft.com"

        this.set(schemeStart === -1 ? path : path.substr(schemeStart + 1), "SCHEME");
      } else {
        this.set(path, "PATH");
      }
    }
  };
  /**
   * Append the provided path to this URL's existing path. If the provided path contains a query,
   * then it will be added to this URL as well.
   */


  URLBuilder.prototype.appendPath = function (path) {
    if (path) {
      var currentPath = this.getPath();

      if (currentPath) {
        if (!currentPath.endsWith("/")) {
          currentPath += "/";
        }

        if (path.startsWith("/")) {
          path = path.substring(1);
        }

        path = currentPath + path;
      }

      this.set(path, "PATH");
    }
  };
  /**
   * Get the path that has been set in this URL.
   */


  URLBuilder.prototype.getPath = function () {
    return this._path;
  };
  /**
   * Set the query in this URL.
   */


  URLBuilder.prototype.setQuery = function (query) {
    if (!query) {
      this._query = undefined;
    } else {
      this._query = URLQuery.parse(query);
    }
  };
  /**
   * Set a query parameter with the provided name and value in this URL's query. If the provided
   * query parameter value is undefined or empty, then the query parameter will be removed if it
   * existed.
   */


  URLBuilder.prototype.setQueryParameter = function (queryParameterName, queryParameterValue) {
    if (queryParameterName) {
      if (!this._query) {
        this._query = new URLQuery();
      }

      this._query.set(queryParameterName, queryParameterValue);
    }
  };
  /**
   * Get the value of the query parameter with the provided query parameter name. If no query
   * parameter exists with the provided name, then undefined will be returned.
   */


  URLBuilder.prototype.getQueryParameterValue = function (queryParameterName) {
    return this._query ? this._query.get(queryParameterName) : undefined;
  };
  /**
   * Get the query in this URL.
   */


  URLBuilder.prototype.getQuery = function () {
    return this._query ? this._query.toString() : undefined;
  };
  /**
   * Set the parts of this URL by parsing the provided text using the provided startState.
   */


  URLBuilder.prototype.set = function (text, startState) {
    var tokenizer = new URLTokenizer(text, startState);

    while (tokenizer.next()) {
      var token = tokenizer.current();
      var tokenPath = void 0;

      if (token) {
        switch (token.type) {
          case "SCHEME":
            this._scheme = token.text || undefined;
            break;

          case "HOST":
            this._host = token.text || undefined;
            break;

          case "PORT":
            this._port = token.text || undefined;
            break;

          case "PATH":
            tokenPath = token.text || undefined;

            if (!this._path || this._path === "/" || tokenPath !== "/") {
              this._path = tokenPath;
            }

            break;

          case "QUERY":
            this._query = URLQuery.parse(token.text);
            break;

          default:
            throw new Error("Unrecognized URLTokenType: " + token.type);
        }
      }
    }
  };

  URLBuilder.prototype.toString = function () {
    var result = "";

    if (this._scheme) {
      result += this._scheme + "://";
    }

    if (this._host) {
      result += this._host;
    }

    if (this._port) {
      result += ":" + this._port;
    }

    if (this._path) {
      if (!this._path.startsWith("/")) {
        result += "/";
      }

      result += this._path;
    }

    if (this._query && this._query.any()) {
      result += "?" + this._query.toString();
    }

    return result;
  };
  /**
   * If the provided searchValue is found in this URLBuilder, then replace it with the provided
   * replaceValue.
   */


  URLBuilder.prototype.replaceAll = function (searchValue, replaceValue) {
    if (searchValue) {
      this.setScheme((0, _utils.replaceAll)(this.getScheme(), searchValue, replaceValue));
      this.setHost((0, _utils.replaceAll)(this.getHost(), searchValue, replaceValue));
      this.setPort((0, _utils.replaceAll)(this.getPort(), searchValue, replaceValue));
      this.setPath((0, _utils.replaceAll)(this.getPath(), searchValue, replaceValue));
      this.setQuery((0, _utils.replaceAll)(this.getQuery(), searchValue, replaceValue));
    }
  };

  URLBuilder.parse = function (text) {
    var result = new URLBuilder();
    result.set(text, "SCHEME_OR_HOST");
    return result;
  };

  return URLBuilder;
}();

exports.URLBuilder = URLBuilder;

var URLToken =
/** @class */
function () {
  function URLToken(text, type) {
    this.text = text;
    this.type = type;
  }

  URLToken.scheme = function (text) {
    return new URLToken(text, "SCHEME");
  };

  URLToken.host = function (text) {
    return new URLToken(text, "HOST");
  };

  URLToken.port = function (text) {
    return new URLToken(text, "PORT");
  };

  URLToken.path = function (text) {
    return new URLToken(text, "PATH");
  };

  URLToken.query = function (text) {
    return new URLToken(text, "QUERY");
  };

  return URLToken;
}();

exports.URLToken = URLToken;

/**
 * Get whether or not the provided character (single character string) is an alphanumeric (letter or
 * digit) character.
 */
function isAlphaNumericCharacter(character) {
  var characterCode = character.charCodeAt(0);
  return 48
  /* '0' */
  <= characterCode && characterCode <= 57 ||
  /* '9' */
  65
  /* 'A' */
  <= characterCode && characterCode <= 90
  /* 'Z' */
  || 97
  /* 'a' */
  <= characterCode && characterCode <= 122
  /* 'z' */
  ;
}
/**
 * A class that tokenizes URL strings.
 */


var URLTokenizer =
/** @class */
function () {
  function URLTokenizer(_text, state) {
    this._text = _text;
    this._textLength = _text ? _text.length : 0;
    this._currentState = state !== undefined && state !== null ? state : "SCHEME_OR_HOST";
    this._currentIndex = 0;
  }
  /**
   * Get the current URLToken this URLTokenizer is pointing at, or undefined if the URLTokenizer
   * hasn't started or has finished tokenizing.
   */


  URLTokenizer.prototype.current = function () {
    return this._currentToken;
  };
  /**
   * Advance to the next URLToken and return whether or not a URLToken was found.
   */


  URLTokenizer.prototype.next = function () {
    if (!hasCurrentCharacter(this)) {
      this._currentToken = undefined;
    } else {
      switch (this._currentState) {
        case "SCHEME":
          nextScheme(this);
          break;

        case "SCHEME_OR_HOST":
          nextSchemeOrHost(this);
          break;

        case "HOST":
          nextHost(this);
          break;

        case "PORT":
          nextPort(this);
          break;

        case "PATH":
          nextPath(this);
          break;

        case "QUERY":
          nextQuery(this);
          break;

        default:
          throw new Error("Unrecognized URLTokenizerState: " + this._currentState);
      }
    }

    return !!this._currentToken;
  };

  return URLTokenizer;
}();

exports.URLTokenizer = URLTokenizer;

/**
 * Read the remaining characters from this Tokenizer's character stream.
 */
function readRemaining(tokenizer) {
  var result = "";

  if (tokenizer._currentIndex < tokenizer._textLength) {
    result = tokenizer._text.substring(tokenizer._currentIndex);
    tokenizer._currentIndex = tokenizer._textLength;
  }

  return result;
}
/**
 * Whether or not this URLTokenizer has a current character.
 */


function hasCurrentCharacter(tokenizer) {
  return tokenizer._currentIndex < tokenizer._textLength;
}
/**
 * Get the character in the text string at the current index.
 */


function getCurrentCharacter(tokenizer) {
  return tokenizer._text[tokenizer._currentIndex];
}
/**
 * Advance to the character in text that is "step" characters ahead. If no step value is provided,
 * then step will default to 1.
 */


function nextCharacter(tokenizer, step) {
  if (hasCurrentCharacter(tokenizer)) {
    if (!step) {
      step = 1;
    }

    tokenizer._currentIndex += step;
  }
}
/**
 * Starting with the current character, peek "charactersToPeek" number of characters ahead in this
 * Tokenizer's stream of characters.
 */


function peekCharacters(tokenizer, charactersToPeek) {
  var endIndex = tokenizer._currentIndex + charactersToPeek;

  if (tokenizer._textLength < endIndex) {
    endIndex = tokenizer._textLength;
  }

  return tokenizer._text.substring(tokenizer._currentIndex, endIndex);
}
/**
 * Read characters from this Tokenizer until the end of the stream or until the provided condition
 * is false when provided the current character.
 */


function readWhile(tokenizer, condition) {
  var result = "";

  while (hasCurrentCharacter(tokenizer)) {
    var currentCharacter = getCurrentCharacter(tokenizer);

    if (!condition(currentCharacter)) {
      break;
    } else {
      result += currentCharacter;
      nextCharacter(tokenizer);
    }
  }

  return result;
}
/**
 * Read characters from this Tokenizer until a non-alphanumeric character or the end of the
 * character stream is reached.
 */


function readWhileLetterOrDigit(tokenizer) {
  return readWhile(tokenizer, function (character) {
    return isAlphaNumericCharacter(character);
  });
}
/**
 * Read characters from this Tokenizer until one of the provided terminating characters is read or
 * the end of the character stream is reached.
 */


function readUntilCharacter(tokenizer) {
  var terminatingCharacters = [];

  for (var _i = 1; _i < arguments.length; _i++) {
    terminatingCharacters[_i - 1] = arguments[_i];
  }

  return readWhile(tokenizer, function (character) {
    return terminatingCharacters.indexOf(character) === -1;
  });
}

function nextScheme(tokenizer) {
  var scheme = readWhileLetterOrDigit(tokenizer);
  tokenizer._currentToken = URLToken.scheme(scheme);

  if (!hasCurrentCharacter(tokenizer)) {
    tokenizer._currentState = "DONE";
  } else {
    tokenizer._currentState = "HOST";
  }
}

function nextSchemeOrHost(tokenizer) {
  var schemeOrHost = readUntilCharacter(tokenizer, ":", "/", "?");

  if (!hasCurrentCharacter(tokenizer)) {
    tokenizer._currentToken = URLToken.host(schemeOrHost);
    tokenizer._currentState = "DONE";
  } else if (getCurrentCharacter(tokenizer) === ":") {
    if (peekCharacters(tokenizer, 3) === "://") {
      tokenizer._currentToken = URLToken.scheme(schemeOrHost);
      tokenizer._currentState = "HOST";
    } else {
      tokenizer._currentToken = URLToken.host(schemeOrHost);
      tokenizer._currentState = "PORT";
    }
  } else {
    tokenizer._currentToken = URLToken.host(schemeOrHost);

    if (getCurrentCharacter(tokenizer) === "/") {
      tokenizer._currentState = "PATH";
    } else {
      tokenizer._currentState = "QUERY";
    }
  }
}

function nextHost(tokenizer) {
  if (peekCharacters(tokenizer, 3) === "://") {
    nextCharacter(tokenizer, 3);
  }

  var host = readUntilCharacter(tokenizer, ":", "/", "?");
  tokenizer._currentToken = URLToken.host(host);

  if (!hasCurrentCharacter(tokenizer)) {
    tokenizer._currentState = "DONE";
  } else if (getCurrentCharacter(tokenizer) === ":") {
    tokenizer._currentState = "PORT";
  } else if (getCurrentCharacter(tokenizer) === "/") {
    tokenizer._currentState = "PATH";
  } else {
    tokenizer._currentState = "QUERY";
  }
}

function nextPort(tokenizer) {
  if (getCurrentCharacter(tokenizer) === ":") {
    nextCharacter(tokenizer);
  }

  var port = readUntilCharacter(tokenizer, "/", "?");
  tokenizer._currentToken = URLToken.port(port);

  if (!hasCurrentCharacter(tokenizer)) {
    tokenizer._currentState = "DONE";
  } else if (getCurrentCharacter(tokenizer) === "/") {
    tokenizer._currentState = "PATH";
  } else {
    tokenizer._currentState = "QUERY";
  }
}

function nextPath(tokenizer) {
  var path = readUntilCharacter(tokenizer, "?");
  tokenizer._currentToken = URLToken.path(path);

  if (!hasCurrentCharacter(tokenizer)) {
    tokenizer._currentState = "DONE";
  } else {
    tokenizer._currentState = "QUERY";
  }
}

function nextQuery(tokenizer) {
  if (getCurrentCharacter(tokenizer) === "?") {
    nextCharacter(tokenizer);
  }

  var query = readRemaining(tokenizer);
  tokenizer._currentToken = URLToken.query(query);
  tokenizer._currentState = "DONE";
}
},{"./util/utils":"node_modules/@azure/core-http/es/src/util/utils.js","./util/url":"node_modules/@azure/core-http/es/src/util/url.browser.js"}],"node_modules/@azure/core-http/es/src/util/sanitizer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Sanitizer = void 0;

var _tslib = require("tslib");

var _url = require("../url");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var RedactedString = "REDACTED";
var defaultAllowedHeaderNames = ["x-ms-client-request-id", "x-ms-return-client-request-id", "x-ms-useragent", "x-ms-correlation-request-id", "x-ms-request-id", "client-request-id", "ms-cv", "return-client-request-id", "traceparent", "Access-Control-Allow-Credentials", "Access-Control-Allow-Headers", "Access-Control-Allow-Methods", "Access-Control-Allow-Origin", "Access-Control-Expose-Headers", "Access-Control-Max-Age", "Access-Control-Request-Headers", "Access-Control-Request-Method", "Origin", "Accept", "Cache-Control", "Connection", "Content-Length", "Content-Type", "Date", "ETag", "Expires", "If-Match", "If-Modified-Since", "If-None-Match", "If-Unmodified-Since", "Last-Modified", "Pragma", "Request-Id", "Retry-After", "Server", "Transfer-Encoding", "User-Agent"];
var defaultAllowedQueryParameters = ["api-version"];

var Sanitizer =
/** @class */
function () {
  function Sanitizer(_a) {
    var _b = _a === void 0 ? {} : _a,
        _c = _b.allowedHeaderNames,
        allowedHeaderNames = _c === void 0 ? [] : _c,
        _d = _b.allowedQueryParameters,
        allowedQueryParameters = _d === void 0 ? [] : _d;

    allowedHeaderNames = Array.isArray(allowedHeaderNames) ? defaultAllowedHeaderNames.concat(allowedHeaderNames) : defaultAllowedHeaderNames;
    allowedQueryParameters = Array.isArray(allowedQueryParameters) ? defaultAllowedQueryParameters.concat(allowedQueryParameters) : defaultAllowedQueryParameters;
    this.allowedHeaderNames = new Set(allowedHeaderNames.map(function (n) {
      return n.toLowerCase();
    }));
    this.allowedQueryParameters = new Set(allowedQueryParameters.map(function (p) {
      return p.toLowerCase();
    }));
  }

  Sanitizer.prototype.sanitize = function (obj) {
    return JSON.stringify(obj, this.replacer.bind(this), 2);
  };

  Sanitizer.prototype.replacer = function (key, value) {
    // Ensure Errors include their interesting non-enumerable members
    if (value instanceof Error) {
      return (0, _tslib.__assign)((0, _tslib.__assign)({}, value), {
        name: value.name,
        message: value.message
      });
    }

    if (key === "_headersMap") {
      return this.sanitizeHeaders(key, value);
    } else if (key === "url") {
      return this.sanitizeUrl(value);
    } else if (key === "query") {
      return this.sanitizeQuery(value);
    } else if (key === "body") {
      // Don't log the request body
      return undefined;
    } else if (key === "response") {
      // Don't log response again
      return undefined;
    } else if (key === "operationSpec") {
      // When using sendOperationRequest, the request carries a massive
      // field with the autorest spec. No need to log it.
      return undefined;
    }

    return value;
  };

  Sanitizer.prototype.sanitizeHeaders = function (_, value) {
    return this.sanitizeObject(value, this.allowedHeaderNames, function (v, k) {
      return v[k].value;
    });
  };

  Sanitizer.prototype.sanitizeQuery = function (value) {
    return this.sanitizeObject(value, this.allowedQueryParameters, function (v, k) {
      return v[k];
    });
  };

  Sanitizer.prototype.sanitizeObject = function (value, allowedKeys, accessor) {
    if (typeof value !== "object" || value === null) {
      return value;
    }

    var sanitized = {};

    for (var _i = 0, _a = Object.keys(value); _i < _a.length; _i++) {
      var k = _a[_i];

      if (allowedKeys.has(k.toLowerCase())) {
        sanitized[k] = accessor(value, k);
      } else {
        sanitized[k] = RedactedString;
      }
    }

    return sanitized;
  };

  Sanitizer.prototype.sanitizeUrl = function (value) {
    if (typeof value !== "string" || value === null) {
      return value;
    }

    var urlBuilder = _url.URLBuilder.parse(value);

    var queryString = urlBuilder.getQuery();

    if (!queryString) {
      return value;
    }

    var query = _url.URLQuery.parse(queryString);

    for (var _i = 0, _a = query.keys(); _i < _a.length; _i++) {
      var k = _a[_i];

      if (!this.allowedQueryParameters.has(k.toLowerCase())) {
        query.set(k, RedactedString);
      }
    }

    urlBuilder.setQuery(query.toString());
    return urlBuilder.toString();
  };

  return Sanitizer;
}();

exports.Sanitizer = Sanitizer;
},{"tslib":"node_modules/tslib/tslib.es6.js","../url":"node_modules/@azure/core-http/es/src/url.js"}],"node_modules/@azure/core-http/es/src/restError.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RestError = void 0;

var _tslib = require("tslib");

var _inspect = require("./util/inspect");

var _sanitizer = require("./util/sanitizer");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var errorSanitizer = new _sanitizer.Sanitizer();

var RestError =
/** @class */
function (_super) {
  (0, _tslib.__extends)(RestError, _super);

  function RestError(message, code, statusCode, request, response) {
    var _this = _super.call(this, message) || this;

    _this.name = "RestError";
    _this.code = code;
    _this.statusCode = statusCode;
    _this.request = request;
    _this.response = response;
    Object.setPrototypeOf(_this, RestError.prototype);
    return _this;
  }
  /**
   * Logging method for util.inspect in Node
   */


  RestError.prototype[_inspect.custom] = function () {
    return "RestError: " + this.message + " \n " + errorSanitizer.sanitize(this);
  };

  RestError.REQUEST_SEND_ERROR = "REQUEST_SEND_ERROR";
  RestError.PARSE_ERROR = "PARSE_ERROR";
  return RestError;
}(Error);

exports.RestError = RestError;
},{"tslib":"node_modules/tslib/tslib.es6.js","./util/inspect":"node_modules/@azure/core-http/es/src/util/inspect.browser.js","./util/sanitizer":"node_modules/@azure/core-http/es/src/util/sanitizer.js"}],"node_modules/@azure/core-http/es/src/xhrHttpClient.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseHeaders = parseHeaders;
exports.XhrHttpClient = void 0;

var _abortController = require("@azure/abort-controller");

var _httpHeaders = require("./httpHeaders");

var _restError = require("./restError");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * A HttpClient implementation that uses XMLHttpRequest to send HTTP requests.
 */
var XhrHttpClient =
/** @class */
function () {
  function XhrHttpClient() {}

  XhrHttpClient.prototype.sendRequest = function (request) {
    var _a;

    var xhr = new XMLHttpRequest();

    if (request.proxySettings) {
      throw new Error("HTTP proxy is not supported in browser environment");
    }

    var abortSignal = request.abortSignal;

    if (abortSignal) {
      if (abortSignal.aborted) {
        return Promise.reject(new _abortController.AbortError("The operation was aborted."));
      }

      var listener_1 = function () {
        xhr.abort();
      };

      abortSignal.addEventListener("abort", listener_1);
      xhr.addEventListener("readystatechange", function () {
        if (xhr.readyState === XMLHttpRequest.DONE) {
          abortSignal.removeEventListener("abort", listener_1);
        }
      });
    }

    addProgressListener(xhr.upload, request.onUploadProgress);
    addProgressListener(xhr, request.onDownloadProgress);

    if (request.formData) {
      var formData = request.formData;
      var requestForm_1 = new FormData();

      var appendFormValue = function (key, value) {
        if (value && Object.prototype.hasOwnProperty.call(value, "value") && Object.prototype.hasOwnProperty.call(value, "options")) {
          requestForm_1.append(key, value.value, value.options);
        } else {
          requestForm_1.append(key, value);
        }
      };

      for (var _i = 0, _b = Object.keys(formData); _i < _b.length; _i++) {
        var formKey = _b[_i];
        var formValue = formData[formKey];

        if (Array.isArray(formValue)) {
          for (var j = 0; j < formValue.length; j++) {
            appendFormValue(formKey, formValue[j]);
          }
        } else {
          appendFormValue(formKey, formValue);
        }
      }

      request.body = requestForm_1;
      request.formData = undefined;
      var contentType = request.headers.get("Content-Type");

      if (contentType && contentType.indexOf("multipart/form-data") !== -1) {
        // browser will automatically apply a suitable content-type header
        request.headers.remove("Content-Type");
      }
    }

    xhr.open(request.method, request.url);
    xhr.timeout = request.timeout;
    xhr.withCredentials = request.withCredentials;

    for (var _c = 0, _d = request.headers.headersArray(); _c < _d.length; _c++) {
      var header = _d[_c];
      xhr.setRequestHeader(header.name, header.value);
    }

    xhr.responseType = ((_a = request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.size) || request.streamResponseBody ? "blob" : "text"; // tslint:disable-next-line:no-null-keyword

    xhr.send(request.body === undefined ? null : request.body);

    if (xhr.responseType === "blob") {
      return new Promise(function (resolve, reject) {
        handleBlobResponse(xhr, request, resolve, reject);
        rejectOnTerminalEvent(request, xhr, reject);
      });
    } else {
      return new Promise(function (resolve, reject) {
        xhr.addEventListener("load", function () {
          return resolve({
            request: request,
            status: xhr.status,
            headers: parseHeaders(xhr),
            bodyAsText: xhr.responseText
          });
        });
        rejectOnTerminalEvent(request, xhr, reject);
      });
    }
  };

  return XhrHttpClient;
}();

exports.XhrHttpClient = XhrHttpClient;

function handleBlobResponse(xhr, request, res, rej) {
  xhr.addEventListener("readystatechange", function () {
    var _a; // Resolve as soon as headers are loaded


    if (xhr.readyState === XMLHttpRequest.HEADERS_RECEIVED) {
      if (request.streamResponseBody || ((_a = request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(xhr.status))) {
        var blobBody = new Promise(function (resolve, reject) {
          xhr.addEventListener("load", function () {
            resolve(xhr.response);
          });
          rejectOnTerminalEvent(request, xhr, reject);
        });
        res({
          request: request,
          status: xhr.status,
          headers: parseHeaders(xhr),
          blobBody: blobBody
        });
      } else {
        xhr.addEventListener("load", function () {
          // xhr.response is of Blob type if the request is sent with xhr.responseType === "blob"
          // but the status code is not one of the stream response status codes,
          // so treat it as text and convert from Blob to text
          if (xhr.response) {
            // Blob.text() is not supported in IE so using FileReader instead
            var reader_1 = new FileReader();

            reader_1.onload = function (e) {
              var _a;

              var text = (_a = e.target) === null || _a === void 0 ? void 0 : _a.result;
              res({
                request: request,
                status: xhr.status,
                headers: parseHeaders(xhr),
                bodyAsText: text
              });
            };

            reader_1.onerror = function (_e) {
              rej(reader_1.error);
            };

            reader_1.readAsText(xhr.response, "UTF-8");
          } else {
            res({
              request: request,
              status: xhr.status,
              headers: parseHeaders(xhr)
            });
          }
        });
      }
    }
  });
}

function addProgressListener(xhr, listener) {
  if (listener) {
    xhr.addEventListener("progress", function (rawEvent) {
      return listener({
        loadedBytes: rawEvent.loaded
      });
    });
  }
} // exported locally for testing


function parseHeaders(xhr) {
  var responseHeaders = new _httpHeaders.HttpHeaders();
  var headerLines = xhr.getAllResponseHeaders().trim().split(/[\r\n]+/);

  for (var _i = 0, headerLines_1 = headerLines; _i < headerLines_1.length; _i++) {
    var line = headerLines_1[_i];
    var index = line.indexOf(":");
    var headerName = line.slice(0, index);
    var headerValue = line.slice(index + 2);
    responseHeaders.set(headerName, headerValue);
  }

  return responseHeaders;
}

function rejectOnTerminalEvent(request, xhr, reject) {
  xhr.addEventListener("error", function () {
    return reject(new _restError.RestError("Failed to send request to " + request.url, _restError.RestError.REQUEST_SEND_ERROR, undefined, request));
  });
  var abortError = new _abortController.AbortError("The operation was aborted.");
  xhr.addEventListener("abort", function () {
    return reject(abortError);
  });
  xhr.addEventListener("timeout", function () {
    return reject(abortError);
  });
}
},{"@azure/abort-controller":"node_modules/@azure/abort-controller/dist-esm/src/index.js","./httpHeaders":"node_modules/@azure/core-http/es/src/httpHeaders.js","./restError":"node_modules/@azure/core-http/es/src/restError.js"}],"node_modules/@azure/core-http/es/src/defaultHttpClient.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "DefaultHttpClient", {
  enumerable: true,
  get: function () {
    return _xhrHttpClient.XhrHttpClient;
  }
});

var _xhrHttpClient = require("./xhrHttpClient");
},{"./xhrHttpClient":"node_modules/@azure/core-http/es/src/xhrHttpClient.js"}],"node_modules/@azure/core-http/es/src/httpPipelineLogLevel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HttpPipelineLogLevel = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * The different levels of logs that can be used with the HttpPipelineLogger.
 */
var HttpPipelineLogLevel;
exports.HttpPipelineLogLevel = HttpPipelineLogLevel;

(function (HttpPipelineLogLevel) {
  /**
   * A log level that indicates that no logs will be logged.
   */
  HttpPipelineLogLevel[HttpPipelineLogLevel["OFF"] = 0] = "OFF";
  /**
   * An error log.
   */

  HttpPipelineLogLevel[HttpPipelineLogLevel["ERROR"] = 1] = "ERROR";
  /**
   * A warning log.
   */

  HttpPipelineLogLevel[HttpPipelineLogLevel["WARNING"] = 2] = "WARNING";
  /**
   * An information log.
   */

  HttpPipelineLogLevel[HttpPipelineLogLevel["INFO"] = 3] = "INFO";
})(HttpPipelineLogLevel || (exports.HttpPipelineLogLevel = HttpPipelineLogLevel = {}));
},{}],"node_modules/@azure/core-http/es/src/operationOptions.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.operationOptionsToRequestOptionsBase = operationOptionsToRequestOptionsBase;

var _tslib = require("tslib");

/**
 * Converts an OperationOptions to a RequestOptionsBase
 *
 * @param opts - OperationOptions object to convert to RequestOptionsBase
 */
function operationOptionsToRequestOptionsBase(opts) {
  var requestOptions = opts.requestOptions,
      tracingOptions = opts.tracingOptions,
      additionalOptions = (0, _tslib.__rest)(opts, ["requestOptions", "tracingOptions"]);
  var result = additionalOptions;

  if (requestOptions) {
    result = (0, _tslib.__assign)((0, _tslib.__assign)({}, result), requestOptions);
  }

  if (tracingOptions) {
    result.spanOptions = tracingOptions.spanOptions;
    result.tracingContext = tracingOptions.tracingContext;
  }

  return result;
}
},{"tslib":"node_modules/tslib/tslib.es6.js"}],"node_modules/@azure/core-auth/dist-esm/src/azureKeyCredential.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AzureKeyCredential = void 0;

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * A static-key-based credential that supports updating
 * the underlying key value.
 */
var AzureKeyCredential =
/** @class */
function () {
  /**
   * Create an instance of an AzureKeyCredential for use
   * with a service client.
   *
   * @param key - The initial value of the key to use in authentication
   */
  function AzureKeyCredential(key) {
    if (!key) {
      throw new Error("key must be a non-empty string");
    }

    this._key = key;
  }

  Object.defineProperty(AzureKeyCredential.prototype, "key", {
    /**
     * The value of the key to be used in authentication
     */
    get: function () {
      return this._key;
    },
    enumerable: false,
    configurable: true
  });
  /**
   * Change the value of the key.
   *
   * Updates will take effect upon the next request after
   * updating the key value.
   *
   * @param newKey - The new key value to be used
   */

  AzureKeyCredential.prototype.update = function (newKey) {
    this._key = newKey;
  };

  return AzureKeyCredential;
}();

exports.AzureKeyCredential = AzureKeyCredential;
},{}],"node_modules/@azure/core-auth/dist-esm/src/typeguards.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isObjectWithProperties = isObjectWithProperties;

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Helper TypeGuard that checks if something is defined or not.
 * @param thing - Anything
 * @internal
 */
function isDefined(thing) {
  return typeof thing !== "undefined" && thing !== null;
}
/**
 * Helper TypeGuard that checks if the input is an object with the specified properties.
 * Note: The properties may be inherited.
 * @param thing - Anything.
 * @param properties - The name of the properties that should appear in the object.
 * @internal
 */


function isObjectWithProperties(thing, properties) {
  if (!isDefined(thing) || typeof thing !== "object") {
    return false;
  }

  for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {
    var property = properties_1[_i];

    if (!objectHasProperty(thing, property)) {
      return false;
    }
  }

  return true;
}
/**
 * Helper TypeGuard that checks if the input is an object with the specified property.
 * Note: The property may be inherited.
 * @param thing - Any object.
 * @param property - The name of the property that should appear in the object.
 * @internal
 */


function objectHasProperty(thing, property) {
  return typeof thing === "object" && property in thing;
}
},{}],"node_modules/@azure/core-auth/dist-esm/src/azureNamedKeyCredential.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNamedKeyCredential = isNamedKeyCredential;
exports.AzureNamedKeyCredential = void 0;

var _typeguards = require("./typeguards");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * A static name/key-based credential that supports updating
 * the underlying name and key values.
 */
var AzureNamedKeyCredential =
/** @class */
function () {
  /**
   * Create an instance of an AzureNamedKeyCredential for use
   * with a service client.
   *
   * @param name - The initial value of the name to use in authentication.
   * @param key - The initial value of the key to use in authentication.
   */
  function AzureNamedKeyCredential(name, key) {
    if (!name || !key) {
      throw new TypeError("name and key must be non-empty strings");
    }

    this._name = name;
    this._key = key;
  }

  Object.defineProperty(AzureNamedKeyCredential.prototype, "key", {
    /**
     * The value of the key to be used in authentication.
     */
    get: function () {
      return this._key;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(AzureNamedKeyCredential.prototype, "name", {
    /**
     * The value of the name to be used in authentication.
     */
    get: function () {
      return this._name;
    },
    enumerable: false,
    configurable: true
  });
  /**
   * Change the value of the key.
   *
   * Updates will take effect upon the next request after
   * updating the key value.
   *
   * @param newName - The new name value to be used.
   * @param newKey - The new key value to be used.
   */

  AzureNamedKeyCredential.prototype.update = function (newName, newKey) {
    if (!newName || !newKey) {
      throw new TypeError("newName and newKey must be non-empty strings");
    }

    this._name = newName;
    this._key = newKey;
  };

  return AzureNamedKeyCredential;
}();

exports.AzureNamedKeyCredential = AzureNamedKeyCredential;

/**
 * Tests an object to determine whether it implements NamedKeyCredential.
 *
 * @param credential - The assumed NamedKeyCredential to be tested.
 */
function isNamedKeyCredential(credential) {
  return (0, _typeguards.isObjectWithProperties)(credential, ["name", "key"]) && typeof credential.key === "string" && typeof credential.name === "string";
}
},{"./typeguards":"node_modules/@azure/core-auth/dist-esm/src/typeguards.js"}],"node_modules/@azure/core-auth/dist-esm/src/azureSASCredential.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSASCredential = isSASCredential;
exports.AzureSASCredential = void 0;

var _typeguards = require("./typeguards");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * A static-signature-based credential that supports updating
 * the underlying signature value.
 */
var AzureSASCredential =
/** @class */
function () {
  /**
   * Create an instance of an AzureSASCredential for use
   * with a service client.
   *
   * @param signature - The initial value of the shared access signature to use in authentication
   */
  function AzureSASCredential(signature) {
    if (!signature) {
      throw new Error("shared access signature must be a non-empty string");
    }

    this._signature = signature;
  }

  Object.defineProperty(AzureSASCredential.prototype, "signature", {
    /**
     * The value of the shared access signature to be used in authentication
     */
    get: function () {
      return this._signature;
    },
    enumerable: false,
    configurable: true
  });
  /**
   * Change the value of the signature.
   *
   * Updates will take effect upon the next request after
   * updating the signature value.
   *
   * @param newSignature - The new shared access signature value to be used
   */

  AzureSASCredential.prototype.update = function (newSignature) {
    if (!newSignature) {
      throw new Error("shared access signature must be a non-empty string");
    }

    this._signature = newSignature;
  };

  return AzureSASCredential;
}();

exports.AzureSASCredential = AzureSASCredential;

/**
 * Tests an object to determine whether it implements SASCredential.
 *
 * @param credential - The assumed SASCredential to be tested.
 */
function isSASCredential(credential) {
  return (0, _typeguards.isObjectWithProperties)(credential, ["signature"]) && typeof credential.signature === "string";
}
},{"./typeguards":"node_modules/@azure/core-auth/dist-esm/src/typeguards.js"}],"node_modules/@azure/core-auth/dist-esm/src/tokenCredential.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isTokenCredential = isTokenCredential;

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Tests an object to determine whether it implements TokenCredential.
 *
 * @param credential - The assumed TokenCredential to be tested.
 */
function isTokenCredential(credential) {
  // Check for an object with a 'getToken' function and possibly with
  // a 'signRequest' function.  We do this check to make sure that
  // a ServiceClientCredentials implementor (like TokenClientCredentials
  // in ms-rest-nodeauth) doesn't get mistaken for a TokenCredential if
  // it doesn't actually implement TokenCredential also.
  var castCredential = credential;
  return castCredential && typeof castCredential.getToken === "function" && (castCredential.signRequest === undefined || castCredential.getToken.length > 0);
}
},{}],"node_modules/@azure/core-auth/dist-esm/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AzureKeyCredential", {
  enumerable: true,
  get: function () {
    return _azureKeyCredential.AzureKeyCredential;
  }
});
Object.defineProperty(exports, "AzureNamedKeyCredential", {
  enumerable: true,
  get: function () {
    return _azureNamedKeyCredential.AzureNamedKeyCredential;
  }
});
Object.defineProperty(exports, "isNamedKeyCredential", {
  enumerable: true,
  get: function () {
    return _azureNamedKeyCredential.isNamedKeyCredential;
  }
});
Object.defineProperty(exports, "AzureSASCredential", {
  enumerable: true,
  get: function () {
    return _azureSASCredential.AzureSASCredential;
  }
});
Object.defineProperty(exports, "isSASCredential", {
  enumerable: true,
  get: function () {
    return _azureSASCredential.isSASCredential;
  }
});
Object.defineProperty(exports, "isTokenCredential", {
  enumerable: true,
  get: function () {
    return _tokenCredential.isTokenCredential;
  }
});

var _azureKeyCredential = require("./azureKeyCredential");

var _azureNamedKeyCredential = require("./azureNamedKeyCredential");

var _azureSASCredential = require("./azureSASCredential");

var _tokenCredential = require("./tokenCredential");
},{"./azureKeyCredential":"node_modules/@azure/core-auth/dist-esm/src/azureKeyCredential.js","./azureNamedKeyCredential":"node_modules/@azure/core-auth/dist-esm/src/azureNamedKeyCredential.js","./azureSASCredential":"node_modules/@azure/core-auth/dist-esm/src/azureSASCredential.js","./tokenCredential":"node_modules/@azure/core-auth/dist-esm/src/tokenCredential.js"}],"node_modules/@azure/core-http/es/src/policies/requestPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RequestPolicyOptions = exports.BaseRequestPolicy = void 0;

var _httpPipelineLogLevel = require("../httpPipelineLogLevel");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var BaseRequestPolicy =
/** @class */
function () {
  function BaseRequestPolicy(_nextPolicy, _options) {
    this._nextPolicy = _nextPolicy;
    this._options = _options;
  }
  /**
   * Get whether or not a log with the provided log level should be logged.
   * @param logLevel - The log level of the log that will be logged.
   * @returns Whether or not a log with the provided log level should be logged.
   */


  BaseRequestPolicy.prototype.shouldLog = function (logLevel) {
    return this._options.shouldLog(logLevel);
  };
  /**
   * Attempt to log the provided message to the provided logger. If no logger was provided or if
   * the log level does not meat the logger's threshold, then nothing will be logged.
   * @param logLevel - The log level of this log.
   * @param message - The message of this log.
   */


  BaseRequestPolicy.prototype.log = function (logLevel, message) {
    this._options.log(logLevel, message);
  };

  return BaseRequestPolicy;
}();

exports.BaseRequestPolicy = BaseRequestPolicy;

/**
 * Optional properties that can be used when creating a RequestPolicy.
 */
var RequestPolicyOptions =
/** @class */
function () {
  function RequestPolicyOptions(_logger) {
    this._logger = _logger;
  }
  /**
   * Get whether or not a log with the provided log level should be logged.
   * @param logLevel - The log level of the log that will be logged.
   * @returns Whether or not a log with the provided log level should be logged.
   */


  RequestPolicyOptions.prototype.shouldLog = function (logLevel) {
    return !!this._logger && logLevel !== _httpPipelineLogLevel.HttpPipelineLogLevel.OFF && logLevel <= this._logger.minimumLogLevel;
  };
  /**
   * Attempt to log the provided message to the provided logger. If no logger was provided or if
   * the log level does not meet the logger's threshold, then nothing will be logged.
   * @param logLevel - The log level of this log.
   * @param message - The message of this log.
   */


  RequestPolicyOptions.prototype.log = function (logLevel, message) {
    if (this._logger && this.shouldLog(logLevel)) {
      this._logger.log(logLevel, message);
    }
  };

  return RequestPolicyOptions;
}();

exports.RequestPolicyOptions = RequestPolicyOptions;
},{"../httpPipelineLogLevel":"node_modules/@azure/core-http/es/src/httpPipelineLogLevel.js"}],"node_modules/@azure/logger/dist-esm/src/log.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.log = log;

var _tslib = require("tslib");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
function log() {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }

  if (args.length > 0) {
    var firstArg = String(args[0]);

    if (firstArg.includes(":error")) {
      console.error.apply(console, (0, _tslib.__spread)(args));
    } else if (firstArg.includes(":warning")) {
      console.warn.apply(console, (0, _tslib.__spread)(args));
    } else if (firstArg.includes(":info")) {
      console.info.apply(console, (0, _tslib.__spread)(args));
    } else if (firstArg.includes(":verbose")) {
      console.debug.apply(console, (0, _tslib.__spread)(args));
    } else {
      console.debug.apply(console, (0, _tslib.__spread)(args));
    }
  }
}
},{"tslib":"node_modules/tslib/tslib.es6.js"}],"../../../AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/_empty.js":[function(require,module,exports) {

},{}],"node_modules/@azure/logger/dist-esm/src/debug.js":[function(require,module,exports) {
var process = require("process");
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _tslib = require("tslib");

var _log = require("./log");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/* eslint-disable no-invalid-this */
var debugEnvVariable = typeof process !== "undefined" && process.env && undefined || undefined;
var enabledString;
var enabledNamespaces = [];
var skippedNamespaces = [];
var debuggers = [];

if (debugEnvVariable) {
  enable(debugEnvVariable);
}

var debugObj = Object.assign(function (namespace) {
  return createDebugger(namespace);
}, {
  enable: enable,
  enabled: enabled,
  disable: disable,
  log: _log.log
});

function enable(namespaces) {
  var e_1, _a, e_2, _b;

  enabledString = namespaces;
  enabledNamespaces = [];
  skippedNamespaces = [];
  var wildcard = /\*/g;
  var namespaceList = namespaces.split(",").map(function (ns) {
    return ns.trim().replace(wildcard, ".*?");
  });

  try {
    for (var namespaceList_1 = (0, _tslib.__values)(namespaceList), namespaceList_1_1 = namespaceList_1.next(); !namespaceList_1_1.done; namespaceList_1_1 = namespaceList_1.next()) {
      var ns = namespaceList_1_1.value;

      if (ns.startsWith("-")) {
        skippedNamespaces.push(new RegExp("^" + ns.substr(1) + "$"));
      } else {
        enabledNamespaces.push(new RegExp("^" + ns + "$"));
      }
    }
  } catch (e_1_1) {
    e_1 = {
      error: e_1_1
    };
  } finally {
    try {
      if (namespaceList_1_1 && !namespaceList_1_1.done && (_a = namespaceList_1.return)) _a.call(namespaceList_1);
    } finally {
      if (e_1) throw e_1.error;
    }
  }

  try {
    for (var debuggers_1 = (0, _tslib.__values)(debuggers), debuggers_1_1 = debuggers_1.next(); !debuggers_1_1.done; debuggers_1_1 = debuggers_1.next()) {
      var instance = debuggers_1_1.value;
      instance.enabled = enabled(instance.namespace);
    }
  } catch (e_2_1) {
    e_2 = {
      error: e_2_1
    };
  } finally {
    try {
      if (debuggers_1_1 && !debuggers_1_1.done && (_b = debuggers_1.return)) _b.call(debuggers_1);
    } finally {
      if (e_2) throw e_2.error;
    }
  }
}

function enabled(namespace) {
  var e_3, _a, e_4, _b;

  if (namespace.endsWith("*")) {
    return true;
  }

  try {
    for (var skippedNamespaces_1 = (0, _tslib.__values)(skippedNamespaces), skippedNamespaces_1_1 = skippedNamespaces_1.next(); !skippedNamespaces_1_1.done; skippedNamespaces_1_1 = skippedNamespaces_1.next()) {
      var skipped = skippedNamespaces_1_1.value;

      if (skipped.test(namespace)) {
        return false;
      }
    }
  } catch (e_3_1) {
    e_3 = {
      error: e_3_1
    };
  } finally {
    try {
      if (skippedNamespaces_1_1 && !skippedNamespaces_1_1.done && (_a = skippedNamespaces_1.return)) _a.call(skippedNamespaces_1);
    } finally {
      if (e_3) throw e_3.error;
    }
  }

  try {
    for (var enabledNamespaces_1 = (0, _tslib.__values)(enabledNamespaces), enabledNamespaces_1_1 = enabledNamespaces_1.next(); !enabledNamespaces_1_1.done; enabledNamespaces_1_1 = enabledNamespaces_1.next()) {
      var enabledNamespace = enabledNamespaces_1_1.value;

      if (enabledNamespace.test(namespace)) {
        return true;
      }
    }
  } catch (e_4_1) {
    e_4 = {
      error: e_4_1
    };
  } finally {
    try {
      if (enabledNamespaces_1_1 && !enabledNamespaces_1_1.done && (_b = enabledNamespaces_1.return)) _b.call(enabledNamespaces_1);
    } finally {
      if (e_4) throw e_4.error;
    }
  }

  return false;
}

function disable() {
  var result = enabledString || "";
  enable("");
  return result;
}

function createDebugger(namespace) {
  var newDebugger = Object.assign(debug, {
    enabled: enabled(namespace),
    destroy: destroy,
    log: debugObj.log,
    namespace: namespace,
    extend: extend
  });

  function debug() {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    if (!newDebugger.enabled) {
      return;
    }

    if (args.length > 0) {
      args[0] = namespace + " " + args[0];
    }

    newDebugger.log.apply(newDebugger, (0, _tslib.__spread)(args));
  }

  debuggers.push(newDebugger);
  return newDebugger;
}

function destroy() {
  var index = debuggers.indexOf(this);

  if (index >= 0) {
    debuggers.splice(index, 1);
    return true;
  }

  return false;
}

function extend(namespace) {
  var newDebugger = createDebugger(this.namespace + ":" + namespace);
  newDebugger.log = this.log;
  return newDebugger;
}

var _default = debugObj;
exports.default = _default;
},{"tslib":"node_modules/tslib/tslib.es6.js","./log":"node_modules/@azure/logger/dist-esm/src/log.browser.js","process":"../../../AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/_empty.js"}],"node_modules/@azure/logger/dist-esm/src/index.js":[function(require,module,exports) {
var process = require("process");
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setLogLevel = setLogLevel;
exports.getLogLevel = getLogLevel;
exports.createClientLogger = createClientLogger;
exports.AzureLogger = void 0;

var _tslib = require("tslib");

var _debug = _interopRequireDefault(require("./debug"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var registeredLoggers = new Set();
var logLevelFromEnv = typeof process !== "undefined" && process.env && undefined || undefined;
var azureLogLevel;
/**
 * The AzureLogger provides a mechanism for overriding where logs are output to.
 * By default, logs are sent to stderr.
 * Override the `log` method to redirect logs to another location.
 */

var AzureLogger = (0, _debug.default)("azure");
exports.AzureLogger = AzureLogger;

AzureLogger.log = function () {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }

  _debug.default.log.apply(_debug.default, (0, _tslib.__spread)(args));
};

var AZURE_LOG_LEVELS = ["verbose", "info", "warning", "error"];

if (logLevelFromEnv) {
  // avoid calling setLogLevel because we don't want a mis-set environment variable to crash
  if (isAzureLogLevel(logLevelFromEnv)) {
    setLogLevel(logLevelFromEnv);
  } else {
    console.error("AZURE_LOG_LEVEL set to unknown log level '" + logLevelFromEnv + "'; logging is not enabled. Acceptable values: " + AZURE_LOG_LEVELS.join(", ") + ".");
  }
}
/**
 * Immediately enables logging at the specified log level.
 * @param level - The log level to enable for logging.
 * Options from most verbose to least verbose are:
 * - verbose
 * - info
 * - warning
 * - error
 */


function setLogLevel(level) {
  var e_1, _a;

  if (level && !isAzureLogLevel(level)) {
    throw new Error("Unknown log level '" + level + "'. Acceptable values: " + AZURE_LOG_LEVELS.join(","));
  }

  azureLogLevel = level;
  var enabledNamespaces = [];

  try {
    for (var registeredLoggers_1 = (0, _tslib.__values)(registeredLoggers), registeredLoggers_1_1 = registeredLoggers_1.next(); !registeredLoggers_1_1.done; registeredLoggers_1_1 = registeredLoggers_1.next()) {
      var logger = registeredLoggers_1_1.value;

      if (shouldEnable(logger)) {
        enabledNamespaces.push(logger.namespace);
      }
    }
  } catch (e_1_1) {
    e_1 = {
      error: e_1_1
    };
  } finally {
    try {
      if (registeredLoggers_1_1 && !registeredLoggers_1_1.done && (_a = registeredLoggers_1.return)) _a.call(registeredLoggers_1);
    } finally {
      if (e_1) throw e_1.error;
    }
  }

  _debug.default.enable(enabledNamespaces.join(","));
}
/**
 * Retrieves the currently specified log level.
 */


function getLogLevel() {
  return azureLogLevel;
}

var levelMap = {
  verbose: 400,
  info: 300,
  warning: 200,
  error: 100
};
/**
 * Creates a logger for use by the Azure SDKs that inherits from `AzureLogger`.
 * @param namespace - The name of the SDK package.
 * @hidden
 */

function createClientLogger(namespace) {
  var clientRootLogger = AzureLogger.extend(namespace);
  patchLogMethod(AzureLogger, clientRootLogger);
  return {
    error: createLogger(clientRootLogger, "error"),
    warning: createLogger(clientRootLogger, "warning"),
    info: createLogger(clientRootLogger, "info"),
    verbose: createLogger(clientRootLogger, "verbose")
  };
}

function patchLogMethod(parent, child) {
  child.log = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    parent.log.apply(parent, (0, _tslib.__spread)(args));
  };
}

function createLogger(parent, level) {
  var logger = Object.assign(parent.extend(level), {
    level: level
  });
  patchLogMethod(parent, logger);

  if (shouldEnable(logger)) {
    var enabledNamespaces = _debug.default.disable();

    _debug.default.enable(enabledNamespaces + "," + logger.namespace);
  }

  registeredLoggers.add(logger);
  return logger;
}

function shouldEnable(logger) {
  if (azureLogLevel && levelMap[logger.level] <= levelMap[azureLogLevel]) {
    return true;
  } else {
    return false;
  }
}

function isAzureLogLevel(logLevel) {
  return AZURE_LOG_LEVELS.includes(logLevel);
}
},{"tslib":"node_modules/tslib/tslib.es6.js","./debug":"node_modules/@azure/logger/dist-esm/src/debug.js","process":"../../../AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/_empty.js"}],"node_modules/@azure/core-http/es/src/log.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logger = void 0;

var _logger = require("@azure/logger");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var logger = (0, _logger.createClientLogger)("core-http");
exports.logger = logger;
},{"@azure/logger":"node_modules/@azure/logger/dist-esm/src/index.js"}],"node_modules/@azure/core-http/es/src/policies/logPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logPolicy = logPolicy;
exports.LogPolicy = void 0;

var _tslib = require("tslib");

var _requestPolicy = require("./requestPolicy");

var _log = require("../log");

var _sanitizer = require("../util/sanitizer");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
function logPolicy(loggingOptions) {
  if (loggingOptions === void 0) {
    loggingOptions = {};
  }

  return {
    create: function (nextPolicy, options) {
      return new LogPolicy(nextPolicy, options, loggingOptions);
    }
  };
}

var LogPolicy =
/** @class */
function (_super) {
  (0, _tslib.__extends)(LogPolicy, _super);

  function LogPolicy(nextPolicy, options, _a) {
    var _b = _a === void 0 ? {} : _a,
        _c = _b.logger,
        logger = _c === void 0 ? _log.logger.info : _c,
        _d = _b.allowedHeaderNames,
        allowedHeaderNames = _d === void 0 ? [] : _d,
        _e = _b.allowedQueryParameters,
        allowedQueryParameters = _e === void 0 ? [] : _e;

    var _this = _super.call(this, nextPolicy, options) || this;

    _this.logger = logger;
    _this.sanitizer = new _sanitizer.Sanitizer({
      allowedHeaderNames: allowedHeaderNames,
      allowedQueryParameters: allowedQueryParameters
    });
    return _this;
  }

  Object.defineProperty(LogPolicy.prototype, "allowedHeaderNames", {
    /**
     * Header names whose values will be logged when logging is enabled. Defaults to
     * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers
     * specified in this field will be added to that list.  Any other values will
     * be written to logs as "REDACTED".
     * @deprecated Pass these into the constructor instead.
     */
    get: function () {
      return this.sanitizer.allowedHeaderNames;
    },

    /**
     * Header names whose values will be logged when logging is enabled. Defaults to
     * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers
     * specified in this field will be added to that list.  Any other values will
     * be written to logs as "REDACTED".
     * @deprecated Pass these into the constructor instead.
     */
    set: function (allowedHeaderNames) {
      this.sanitizer.allowedHeaderNames = allowedHeaderNames;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(LogPolicy.prototype, "allowedQueryParameters", {
    /**
     * Query string names whose values will be logged when logging is enabled. By default no
     * query string values are logged.
     * @deprecated Pass these into the constructor instead.
     */
    get: function () {
      return this.sanitizer.allowedQueryParameters;
    },

    /**
     * Query string names whose values will be logged when logging is enabled. By default no
     * query string values are logged.
     * @deprecated Pass these into the constructor instead.
     */
    set: function (allowedQueryParameters) {
      this.sanitizer.allowedQueryParameters = allowedQueryParameters;
    },
    enumerable: false,
    configurable: true
  });

  LogPolicy.prototype.sendRequest = function (request) {
    var _this = this;

    if (!this.logger.enabled) return this._nextPolicy.sendRequest(request);
    this.logRequest(request);
    return this._nextPolicy.sendRequest(request).then(function (response) {
      return _this.logResponse(response);
    });
  };

  LogPolicy.prototype.logRequest = function (request) {
    this.logger("Request: " + this.sanitizer.sanitize(request));
  };

  LogPolicy.prototype.logResponse = function (response) {
    this.logger("Response status code: " + response.status);
    this.logger("Headers: " + this.sanitizer.sanitize(response.headers));
    return response;
  };

  return LogPolicy;
}(_requestPolicy.BaseRequestPolicy);

exports.LogPolicy = LogPolicy;
},{"tslib":"node_modules/tslib/tslib.es6.js","./requestPolicy":"node_modules/@azure/core-http/es/src/policies/requestPolicy.js","../log":"node_modules/@azure/core-http/es/src/log.js","../util/sanitizer":"node_modules/@azure/core-http/es/src/util/sanitizer.js"}],"node_modules/@azure/core-http/es/src/operationParameter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPathStringFromParameter = getPathStringFromParameter;
exports.getPathStringFromParameterPath = getPathStringFromParameterPath;

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Get the path to this parameter's value as a dotted string (a.b.c).
 * @param parameter - The parameter to get the path string for.
 * @returns The path to this parameter's value as a dotted string.
 */
function getPathStringFromParameter(parameter) {
  return getPathStringFromParameterPath(parameter.parameterPath, parameter.mapper);
}

function getPathStringFromParameterPath(parameterPath, mapper) {
  var result;

  if (typeof parameterPath === "string") {
    result = parameterPath;
  } else if (Array.isArray(parameterPath)) {
    result = parameterPath.join(".");
  } else {
    result = mapper.serializedName;
  }

  return result;
}
},{}],"node_modules/@azure/core-http/es/src/operationSpec.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getStreamResponseStatusCodes = getStreamResponseStatusCodes;

var _serializer = require("./serializer");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Gets the list of status codes for streaming responses.
 * @internal
 */
function getStreamResponseStatusCodes(operationSpec) {
  var result = new Set();

  for (var statusCode in operationSpec.responses) {
    var operationResponse = operationSpec.responses[statusCode];

    if (operationResponse.bodyMapper && operationResponse.bodyMapper.type.name === _serializer.MapperType.Stream) {
      result.add(Number(statusCode));
    }
  }

  return result;
}
},{"./serializer":"node_modules/@azure/core-http/es/src/serializer.js"}],"node_modules/@azure/core-http/es/src/util/xml.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseXML = parseXML;
exports.stringifyXML = stringifyXML;

var _serializer = require("./serializer.common");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// tslint:disable-next-line:no-null-keyword
var doc = document.implementation.createDocument(null, null, null);
var parser = new DOMParser();

function parseXML(str, opts) {
  var _a, _b, _c;

  if (opts === void 0) {
    opts = {};
  }

  try {
    var updatedOptions = {
      rootName: (_a = opts.rootName) !== null && _a !== void 0 ? _a : "",
      includeRoot: (_b = opts.includeRoot) !== null && _b !== void 0 ? _b : false,
      xmlCharKey: (_c = opts.xmlCharKey) !== null && _c !== void 0 ? _c : _serializer.XML_CHARKEY
    };
    var dom = parser.parseFromString(str, "application/xml");
    throwIfError(dom);
    var obj = void 0;

    if (updatedOptions.includeRoot) {
      obj = domToObject(dom, updatedOptions);
    } else {
      obj = domToObject(dom.childNodes[0], updatedOptions);
    }

    return Promise.resolve(obj);
  } catch (err) {
    return Promise.reject(err);
  }
}

var errorNS;

function getErrorNamespace() {
  var _a;

  if (errorNS === undefined) {
    try {
      errorNS = (_a = parser.parseFromString("INVALID", "text/xml").getElementsByTagName("parsererror")[0].namespaceURI) !== null && _a !== void 0 ? _a : "";
    } catch (ignored) {
      // Most browsers will return a document containing <parsererror>, but IE will throw.
      errorNS = "";
    }
  }

  return errorNS;
}

function throwIfError(dom) {
  var parserErrors = dom.getElementsByTagName("parsererror");

  if (parserErrors.length > 0 && getErrorNamespace()) {
    for (var i = 0; i < parserErrors.length; i++) {
      if (parserErrors[i].namespaceURI === errorNS) {
        throw new Error(parserErrors[i].innerHTML);
      }
    }
  }
}

function isElement(node) {
  return !!node.attributes;
}
/**
 * Get the Element-typed version of the provided Node if the provided node is an element with
 * attributes. If it isn't, then undefined is returned.
 */


function asElementWithAttributes(node) {
  return isElement(node) && node.hasAttributes() ? node : undefined;
}

function domToObject(node, options) {
  var result = {};
  var childNodeCount = node.childNodes.length;
  var firstChildNode = node.childNodes[0];
  var onlyChildTextValue = firstChildNode && childNodeCount === 1 && firstChildNode.nodeType === Node.TEXT_NODE && firstChildNode.nodeValue || undefined;
  var elementWithAttributes = asElementWithAttributes(node);

  if (elementWithAttributes) {
    result[_serializer.XML_ATTRKEY] = {};

    for (var i = 0; i < elementWithAttributes.attributes.length; i++) {
      var attr = elementWithAttributes.attributes[i];
      result[_serializer.XML_ATTRKEY][attr.nodeName] = attr.nodeValue;
    }

    if (onlyChildTextValue) {
      result[options.xmlCharKey] = onlyChildTextValue;
    }
  } else if (childNodeCount === 0) {
    result = "";
  } else if (onlyChildTextValue) {
    result = onlyChildTextValue;
  }

  if (!onlyChildTextValue) {
    for (var i = 0; i < childNodeCount; i++) {
      var child = node.childNodes[i]; // Ignore leading/trailing whitespace nodes

      if (child.nodeType !== Node.TEXT_NODE) {
        var childObject = domToObject(child, options);

        if (!result[child.nodeName]) {
          result[child.nodeName] = childObject;
        } else if (Array.isArray(result[child.nodeName])) {
          result[child.nodeName].push(childObject);
        } else {
          result[child.nodeName] = [result[child.nodeName], childObject];
        }
      }
    }
  }

  return result;
}

var serializer = new XMLSerializer();

function stringifyXML(content, opts) {
  var _a, _b, _c;

  if (opts === void 0) {
    opts = {};
  }

  var updatedOptions = {
    rootName: (_a = opts.rootName) !== null && _a !== void 0 ? _a : "root",
    includeRoot: (_b = opts.includeRoot) !== null && _b !== void 0 ? _b : false,
    xmlCharKey: (_c = opts.xmlCharKey) !== null && _c !== void 0 ? _c : _serializer.XML_CHARKEY
  };
  var dom = buildNode(content, updatedOptions.rootName, updatedOptions)[0];
  return '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' + serializer.serializeToString(dom);
}

function buildAttributes(attrs) {
  var result = [];

  for (var _i = 0, _a = Object.keys(attrs); _i < _a.length; _i++) {
    var key = _a[_i];
    var attr = doc.createAttribute(key);
    attr.value = attrs[key].toString();
    result.push(attr);
  }

  return result;
}

function buildNode(obj, elementName, options) {
  if (obj === undefined || obj === null || typeof obj === "string" || typeof obj === "number" || typeof obj === "boolean") {
    var elem = doc.createElement(elementName);
    elem.textContent = obj === undefined || obj === null ? "" : obj.toString();
    return [elem];
  } else if (Array.isArray(obj)) {
    var result = [];

    for (var _i = 0, obj_1 = obj; _i < obj_1.length; _i++) {
      var arrayElem = obj_1[_i];

      for (var _a = 0, _b = buildNode(arrayElem, elementName, options); _a < _b.length; _a++) {
        var child = _b[_a];
        result.push(child);
      }
    }

    return result;
  } else if (typeof obj === "object") {
    var elem = doc.createElement(elementName);

    for (var _c = 0, _d = Object.keys(obj); _c < _d.length; _c++) {
      var key = _d[_c];

      if (key === _serializer.XML_ATTRKEY) {
        for (var _e = 0, _f = buildAttributes(obj[key]); _e < _f.length; _e++) {
          var attr = _f[_e];
          elem.attributes.setNamedItem(attr);
        }
      } else if (key === options.xmlCharKey) {
        elem.textContent = obj[key].toString();
      } else {
        for (var _g = 0, _h = buildNode(obj[key], key, options); _g < _h.length; _g++) {
          var child = _h[_g];
          elem.appendChild(child);
        }
      }
    }

    return [elem];
  } else {
    throw new Error("Illegal value passed to buildObject: " + obj);
  }
}
},{"./serializer.common":"node_modules/@azure/core-http/es/src/util/serializer.common.js"}],"node_modules/@azure/core-http/es/src/policies/deserializationPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deserializationPolicy = deserializationPolicy;
exports.deserializeResponseBody = deserializeResponseBody;
exports.DeserializationPolicy = exports.DefaultDeserializationOptions = exports.defaultXmlContentTypes = exports.defaultJsonContentTypes = void 0;

var _tslib = require("tslib");

var _restError = require("../restError");

var _serializer = require("../serializer");

var _xml = require("../util/xml");

var _requestPolicy = require("./requestPolicy");

var _serializer2 = require("../util/serializer.common");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Create a new serialization RequestPolicyCreator that will serialized HTTP request bodies as they
 * pass through the HTTP pipeline.
 */
function deserializationPolicy(deserializationContentTypes, parsingOptions) {
  return {
    create: function (nextPolicy, options) {
      return new DeserializationPolicy(nextPolicy, options, deserializationContentTypes, parsingOptions);
    }
  };
}

var defaultJsonContentTypes = ["application/json", "text/json"];
exports.defaultJsonContentTypes = defaultJsonContentTypes;
var defaultXmlContentTypes = ["application/xml", "application/atom+xml"];
exports.defaultXmlContentTypes = defaultXmlContentTypes;
var DefaultDeserializationOptions = {
  expectedContentTypes: {
    json: defaultJsonContentTypes,
    xml: defaultXmlContentTypes
  }
};
/**
 * A RequestPolicy that will deserialize HTTP response bodies and headers as they pass through the
 * HTTP pipeline.
 */

exports.DefaultDeserializationOptions = DefaultDeserializationOptions;

var DeserializationPolicy =
/** @class */
function (_super) {
  (0, _tslib.__extends)(DeserializationPolicy, _super);

  function DeserializationPolicy(nextPolicy, requestPolicyOptions, deserializationContentTypes, parsingOptions) {
    if (parsingOptions === void 0) {
      parsingOptions = {};
    }

    var _a;

    var _this = _super.call(this, nextPolicy, requestPolicyOptions) || this;

    _this.jsonContentTypes = deserializationContentTypes && deserializationContentTypes.json || defaultJsonContentTypes;
    _this.xmlContentTypes = deserializationContentTypes && deserializationContentTypes.xml || defaultXmlContentTypes;
    _this.xmlCharKey = (_a = parsingOptions.xmlCharKey) !== null && _a !== void 0 ? _a : _serializer2.XML_CHARKEY;
    return _this;
  }

  DeserializationPolicy.prototype.sendRequest = function (request) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _this = this;

      return (0, _tslib.__generator)(this, function (_a) {
        return [2
        /*return*/
        , this._nextPolicy.sendRequest(request).then(function (response) {
          return deserializeResponseBody(_this.jsonContentTypes, _this.xmlContentTypes, response, {
            xmlCharKey: _this.xmlCharKey
          });
        })];
      });
    });
  };

  return DeserializationPolicy;
}(_requestPolicy.BaseRequestPolicy);

exports.DeserializationPolicy = DeserializationPolicy;

function getOperationResponse(parsedResponse) {
  var result;
  var request = parsedResponse.request;
  var operationSpec = request.operationSpec;

  if (operationSpec) {
    var operationResponseGetter = request.operationResponseGetter;

    if (!operationResponseGetter) {
      result = operationSpec.responses[parsedResponse.status];
    } else {
      result = operationResponseGetter(operationSpec, parsedResponse);
    }
  }

  return result;
}

function shouldDeserializeResponse(parsedResponse) {
  var shouldDeserialize = parsedResponse.request.shouldDeserialize;
  var result;

  if (shouldDeserialize === undefined) {
    result = true;
  } else if (typeof shouldDeserialize === "boolean") {
    result = shouldDeserialize;
  } else {
    result = shouldDeserialize(parsedResponse);
  }

  return result;
}

function deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, options) {
  var _a, _b, _c;

  if (options === void 0) {
    options = {};
  }

  var updatedOptions = {
    rootName: (_a = options.rootName) !== null && _a !== void 0 ? _a : "",
    includeRoot: (_b = options.includeRoot) !== null && _b !== void 0 ? _b : false,
    xmlCharKey: (_c = options.xmlCharKey) !== null && _c !== void 0 ? _c : _serializer2.XML_CHARKEY
  };
  return parse(jsonContentTypes, xmlContentTypes, response, updatedOptions).then(function (parsedResponse) {
    if (!shouldDeserializeResponse(parsedResponse)) {
      return parsedResponse;
    }

    var operationSpec = parsedResponse.request.operationSpec;

    if (!operationSpec || !operationSpec.responses) {
      return parsedResponse;
    }

    var responseSpec = getOperationResponse(parsedResponse);

    var _a = handleErrorResponse(parsedResponse, operationSpec, responseSpec),
        error = _a.error,
        shouldReturnResponse = _a.shouldReturnResponse;

    if (error) {
      throw error;
    } else if (shouldReturnResponse) {
      return parsedResponse;
    } // An operation response spec does exist for current status code, so
    // use it to deserialize the response.


    if (responseSpec) {
      if (responseSpec.bodyMapper) {
        var valueToDeserialize = parsedResponse.parsedBody;

        if (operationSpec.isXML && responseSpec.bodyMapper.type.name === _serializer.MapperType.Sequence) {
          valueToDeserialize = typeof valueToDeserialize === "object" ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName] : [];
        }

        try {
          parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, "operationRes.parsedBody", options);
        } catch (innerError) {
          var restError = new _restError.RestError("Error " + innerError + " occurred in deserializing the responseBody - " + parsedResponse.bodyAsText, undefined, parsedResponse.status, parsedResponse.request, parsedResponse);
          throw restError;
        }
      } else if (operationSpec.httpMethod === "HEAD") {
        // head methods never have a body, but we return a boolean to indicate presence/absence of the resource
        parsedResponse.parsedBody = response.status >= 200 && response.status < 300;
      }

      if (responseSpec.headersMapper) {
        parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.rawHeaders(), "operationRes.parsedHeaders", options);
      }
    }

    return parsedResponse;
  });
}

function isOperationSpecEmpty(operationSpec) {
  var expectedStatusCodes = Object.keys(operationSpec.responses);
  return expectedStatusCodes.length === 0 || expectedStatusCodes.length === 1 && expectedStatusCodes[0] === "default";
}

function handleErrorResponse(parsedResponse, operationSpec, responseSpec) {
  var _a;

  var isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;
  var isExpectedStatusCode = isOperationSpecEmpty(operationSpec) ? isSuccessByStatus : !!responseSpec;

  if (isExpectedStatusCode) {
    if (responseSpec) {
      if (!responseSpec.isError) {
        return {
          error: null,
          shouldReturnResponse: false
        };
      }
    } else {
      return {
        error: null,
        shouldReturnResponse: false
      };
    }
  }

  var errorResponseSpec = responseSpec !== null && responseSpec !== void 0 ? responseSpec : operationSpec.responses.default;
  var streaming = ((_a = parsedResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(parsedResponse.status)) || parsedResponse.request.streamResponseBody;
  var initialErrorMessage = streaming ? "Unexpected status code: " + parsedResponse.status : parsedResponse.bodyAsText;
  var error = new _restError.RestError(initialErrorMessage, undefined, parsedResponse.status, parsedResponse.request, parsedResponse); // If the item failed but there's no error spec or default spec to deserialize the error,
  // we should fail so we just throw the parsed response

  if (!errorResponseSpec) {
    throw error;
  }

  var defaultBodyMapper = errorResponseSpec.bodyMapper;
  var defaultHeadersMapper = errorResponseSpec.headersMapper;

  try {
    // If error response has a body, try to deserialize it using default body mapper.
    // Then try to extract error code & message from it
    if (parsedResponse.parsedBody) {
      var parsedBody = parsedResponse.parsedBody;
      var parsedError = void 0;

      if (defaultBodyMapper) {
        var valueToDeserialize = parsedBody;

        if (operationSpec.isXML && defaultBodyMapper.type.name === _serializer.MapperType.Sequence) {
          valueToDeserialize = typeof parsedBody === "object" ? parsedBody[defaultBodyMapper.xmlElementName] : [];
        }

        parsedError = operationSpec.serializer.deserialize(defaultBodyMapper, valueToDeserialize, "error.response.parsedBody");
      }

      var internalError = parsedBody.error || parsedError || parsedBody;
      error.code = internalError.code;

      if (internalError.message) {
        error.message = internalError.message;
      }

      if (defaultBodyMapper) {
        error.response.parsedBody = parsedError;
      }
    } // If error response has headers, try to deserialize it using default header mapper


    if (parsedResponse.headers && defaultHeadersMapper) {
      error.response.parsedHeaders = operationSpec.serializer.deserialize(defaultHeadersMapper, parsedResponse.headers.rawHeaders(), "operationRes.parsedHeaders");
    }
  } catch (defaultError) {
    error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody - \"" + parsedResponse.bodyAsText + "\" for the default response.";
  }

  return {
    error: error,
    shouldReturnResponse: false
  };
}

function parse(jsonContentTypes, xmlContentTypes, operationResponse, opts) {
  var _a;

  var errorHandler = function (err) {
    var msg = "Error \"" + err + "\" occurred while parsing the response body - " + operationResponse.bodyAsText + ".";
    var errCode = err.code || _restError.RestError.PARSE_ERROR;
    var e = new _restError.RestError(msg, errCode, operationResponse.status, operationResponse.request, operationResponse);
    return Promise.reject(e);
  };

  var streaming = ((_a = operationResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(operationResponse.status)) || operationResponse.request.streamResponseBody;

  if (!streaming && operationResponse.bodyAsText) {
    var text_1 = operationResponse.bodyAsText;
    var contentType = operationResponse.headers.get("Content-Type") || "";
    var contentComponents = !contentType ? [] : contentType.split(";").map(function (component) {
      return component.toLowerCase();
    });

    if (contentComponents.length === 0 || contentComponents.some(function (component) {
      return jsonContentTypes.indexOf(component) !== -1;
    })) {
      return new Promise(function (resolve) {
        operationResponse.parsedBody = JSON.parse(text_1);
        resolve(operationResponse);
      }).catch(errorHandler);
    } else if (contentComponents.some(function (component) {
      return xmlContentTypes.indexOf(component) !== -1;
    })) {
      return (0, _xml.parseXML)(text_1, opts).then(function (body) {
        operationResponse.parsedBody = body;
        return operationResponse;
      }).catch(errorHandler);
    }
  }

  return Promise.resolve(operationResponse);
}
},{"tslib":"node_modules/tslib/tslib.es6.js","../restError":"node_modules/@azure/core-http/es/src/restError.js","../serializer":"node_modules/@azure/core-http/es/src/serializer.js","../util/xml":"node_modules/@azure/core-http/es/src/util/xml.browser.js","./requestPolicy":"node_modules/@azure/core-http/es/src/policies/requestPolicy.js","../util/serializer.common":"node_modules/@azure/core-http/es/src/util/serializer.common.js"}],"node_modules/@azure/core-http/es/src/util/exponentialBackoffStrategy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNumber = isNumber;
exports.shouldRetry = shouldRetry;
exports.updateRetryData = updateRetryData;
exports.DEFAULT_CLIENT_MIN_RETRY_INTERVAL = exports.DEFAULT_CLIENT_MAX_RETRY_INTERVAL = exports.DEFAULT_CLIENT_RETRY_INTERVAL = exports.DEFAULT_CLIENT_RETRY_COUNT = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var DEFAULT_CLIENT_RETRY_COUNT = 3; // intervals are in ms

exports.DEFAULT_CLIENT_RETRY_COUNT = DEFAULT_CLIENT_RETRY_COUNT;
var DEFAULT_CLIENT_RETRY_INTERVAL = 1000 * 30;
exports.DEFAULT_CLIENT_RETRY_INTERVAL = DEFAULT_CLIENT_RETRY_INTERVAL;
var DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 90;
exports.DEFAULT_CLIENT_MAX_RETRY_INTERVAL = DEFAULT_CLIENT_MAX_RETRY_INTERVAL;
var DEFAULT_CLIENT_MIN_RETRY_INTERVAL = 1000 * 3;
exports.DEFAULT_CLIENT_MIN_RETRY_INTERVAL = DEFAULT_CLIENT_MIN_RETRY_INTERVAL;

function isNumber(n) {
  return typeof n === "number";
}
/**
 * @internal
 * Determines if the operation should be retried.
 *
 * @param retryLimit - Specifies the max number of retries.
 * @param predicate - Initial chekck on whether to retry based on given responses or errors
 * @param retryData -  The retry data.
 * @returns True if the operation qualifies for a retry; false otherwise.
 */


function shouldRetry(retryLimit, predicate, retryData, response, error) {
  if (!predicate(response, error)) {
    return false;
  }

  return retryData.retryCount < retryLimit;
}
/**
 * @internal
 * Updates the retry data for the next attempt.
 *
 * @param retryOptions - specifies retry interval, and its lower bound and upper bound.
 * @param retryData -  The retry data.
 * @param err - The operation"s error, if any.
 */


function updateRetryData(retryOptions, retryData, err) {
  if (retryData === void 0) {
    retryData = {
      retryCount: 0,
      retryInterval: 0
    };
  }

  if (err) {
    if (retryData.error) {
      err.innerError = retryData.error;
    }

    retryData.error = err;
  } // Adjust retry count


  retryData.retryCount++; // Adjust retry interval

  var incrementDelta = Math.pow(2, retryData.retryCount - 1) - 1;
  var boundedRandDelta = retryOptions.retryInterval * 0.8 + Math.floor(Math.random() * (retryOptions.retryInterval * 0.4));
  incrementDelta *= boundedRandDelta;
  retryData.retryInterval = Math.min(retryOptions.minRetryInterval + incrementDelta, retryOptions.maxRetryInterval);
  return retryData;
}
},{}],"node_modules/@azure/core-http/es/src/policies/exponentialRetryPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.exponentialRetryPolicy = exponentialRetryPolicy;
exports.ExponentialRetryPolicy = exports.DefaultRetryOptions = exports.RetryMode = void 0;

var _tslib = require("tslib");

var utils = _interopRequireWildcard(require("../util/utils"));

var _requestPolicy = require("./requestPolicy");

var _exponentialBackoffStrategy = require("../util/exponentialBackoffStrategy");

var _restError = require("../restError");

var _log = require("../log");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
function exponentialRetryPolicy(retryCount, retryInterval, maxRetryInterval) {
  return {
    create: function (nextPolicy, options) {
      return new ExponentialRetryPolicy(nextPolicy, options, retryCount, retryInterval, maxRetryInterval);
    }
  };
}
/**
 * Describes the Retry Mode type. Currently supporting only Exponential.
 */


var RetryMode;
exports.RetryMode = RetryMode;

(function (RetryMode) {
  RetryMode[RetryMode["Exponential"] = 0] = "Exponential";
})(RetryMode || (exports.RetryMode = RetryMode = {}));

var DefaultRetryOptions = {
  maxRetries: _exponentialBackoffStrategy.DEFAULT_CLIENT_RETRY_COUNT,
  retryDelayInMs: _exponentialBackoffStrategy.DEFAULT_CLIENT_RETRY_INTERVAL,
  maxRetryDelayInMs: _exponentialBackoffStrategy.DEFAULT_CLIENT_MAX_RETRY_INTERVAL
};
/**
 * Instantiates a new "ExponentialRetryPolicyFilter" instance.
 */

exports.DefaultRetryOptions = DefaultRetryOptions;

var ExponentialRetryPolicy =
/** @class */
function (_super) {
  (0, _tslib.__extends)(ExponentialRetryPolicy, _super);
  /**
   * @param nextPolicy - The next RequestPolicy in the pipeline chain.
   * @param options - The options for this RequestPolicy.
   * @param retryCount - The client retry count.
   * @param retryInterval - The client retry interval, in milliseconds.
   * @param minRetryInterval - The minimum retry interval, in milliseconds.
   * @param maxRetryInterval - The maximum retry interval, in milliseconds.
   */

  function ExponentialRetryPolicy(nextPolicy, options, retryCount, retryInterval, maxRetryInterval) {
    var _this = _super.call(this, nextPolicy, options) || this;

    _this.retryCount = (0, _exponentialBackoffStrategy.isNumber)(retryCount) ? retryCount : _exponentialBackoffStrategy.DEFAULT_CLIENT_RETRY_COUNT;
    _this.retryInterval = (0, _exponentialBackoffStrategy.isNumber)(retryInterval) ? retryInterval : _exponentialBackoffStrategy.DEFAULT_CLIENT_RETRY_INTERVAL;
    _this.maxRetryInterval = (0, _exponentialBackoffStrategy.isNumber)(maxRetryInterval) ? maxRetryInterval : _exponentialBackoffStrategy.DEFAULT_CLIENT_MAX_RETRY_INTERVAL;
    return _this;
  }

  ExponentialRetryPolicy.prototype.sendRequest = function (request) {
    var _this = this;

    return this._nextPolicy.sendRequest(request.clone()).then(function (response) {
      return retry(_this, request, response);
    }).catch(function (error) {
      return retry(_this, request, error.response, undefined, error);
    });
  };

  return ExponentialRetryPolicy;
}(_requestPolicy.BaseRequestPolicy);

exports.ExponentialRetryPolicy = ExponentialRetryPolicy;

function retry(policy, request, response, retryData, requestError) {
  return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
    function shouldPolicyRetry(responseParam) {
      var statusCode = responseParam === null || responseParam === void 0 ? void 0 : responseParam.status;

      if (statusCode === undefined || statusCode < 500 && statusCode !== 408 || statusCode === 501 || statusCode === 505) {
        return false;
      }

      return true;
    }

    var isAborted, res, err_1, err;
    return (0, _tslib.__generator)(this, function (_a) {
      switch (_a.label) {
        case 0:
          retryData = (0, _exponentialBackoffStrategy.updateRetryData)({
            retryInterval: policy.retryInterval,
            minRetryInterval: 0,
            maxRetryInterval: policy.maxRetryInterval
          }, retryData, requestError);
          isAborted = request.abortSignal && request.abortSignal.aborted;
          if (!(!isAborted && (0, _exponentialBackoffStrategy.shouldRetry)(policy.retryCount, shouldPolicyRetry, retryData, response))) return [3
          /*break*/
          , 6];

          _log.logger.info("Retrying request in " + retryData.retryInterval);

          _a.label = 1;

        case 1:
          _a.trys.push([1, 4,, 5]);

          return [4
          /*yield*/
          , utils.delay(retryData.retryInterval)];

        case 2:
          _a.sent();

          return [4
          /*yield*/
          , policy._nextPolicy.sendRequest(request.clone())];

        case 3:
          res = _a.sent();
          return [2
          /*return*/
          , retry(policy, request, res, retryData)];

        case 4:
          err_1 = _a.sent();
          return [2
          /*return*/
          , retry(policy, request, response, retryData, err_1)];

        case 5:
          return [3
          /*break*/
          , 7];

        case 6:
          if (isAborted || requestError || !response) {
            err = retryData.error || new _restError.RestError("Failed to send the request.", _restError.RestError.REQUEST_SEND_ERROR, response && response.status, response && response.request, response);
            throw err;
          } else {
            return [2
            /*return*/
            , response];
          }

          _a.label = 7;

        case 7:
          return [2
          /*return*/
          ];
      }
    });
  });
}
},{"tslib":"node_modules/tslib/tslib.es6.js","../util/utils":"node_modules/@azure/core-http/es/src/util/utils.js","./requestPolicy":"node_modules/@azure/core-http/es/src/policies/requestPolicy.js","../util/exponentialBackoffStrategy":"node_modules/@azure/core-http/es/src/util/exponentialBackoffStrategy.js","../restError":"node_modules/@azure/core-http/es/src/restError.js","../log":"node_modules/@azure/core-http/es/src/log.js"}],"node_modules/@azure/core-http/es/src/policies/generateClientRequestIdPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateClientRequestIdPolicy = generateClientRequestIdPolicy;
exports.GenerateClientRequestIdPolicy = void 0;

var _tslib = require("tslib");

var _requestPolicy = require("./requestPolicy");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
function generateClientRequestIdPolicy(requestIdHeaderName) {
  if (requestIdHeaderName === void 0) {
    requestIdHeaderName = "x-ms-client-request-id";
  }

  return {
    create: function (nextPolicy, options) {
      return new GenerateClientRequestIdPolicy(nextPolicy, options, requestIdHeaderName);
    }
  };
}

var GenerateClientRequestIdPolicy =
/** @class */
function (_super) {
  (0, _tslib.__extends)(GenerateClientRequestIdPolicy, _super);

  function GenerateClientRequestIdPolicy(nextPolicy, options, _requestIdHeaderName) {
    var _this = _super.call(this, nextPolicy, options) || this;

    _this._requestIdHeaderName = _requestIdHeaderName;
    return _this;
  }

  GenerateClientRequestIdPolicy.prototype.sendRequest = function (request) {
    if (!request.headers.contains(this._requestIdHeaderName)) {
      request.headers.set(this._requestIdHeaderName, request.requestId);
    }

    return this._nextPolicy.sendRequest(request);
  };

  return GenerateClientRequestIdPolicy;
}(_requestPolicy.BaseRequestPolicy);

exports.GenerateClientRequestIdPolicy = GenerateClientRequestIdPolicy;
},{"tslib":"node_modules/tslib/tslib.es6.js","./requestPolicy":"node_modules/@azure/core-http/es/src/policies/requestPolicy.js"}],"node_modules/@azure/core-http/es/src/policies/msRestUserAgentPolicy.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDefaultUserAgentKey = getDefaultUserAgentKey;
exports.getPlatformSpecificData = getPlatformSpecificData;

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
function getDefaultUserAgentKey() {
  return "x-ms-useragent";
}

function getPlatformSpecificData() {
  var navigator = self.navigator;
  var osInfo = {
    key: "OS",
    value: (navigator.oscpu || navigator.platform).replace(" ", "")
  };
  return [osInfo];
}
},{}],"node_modules/@azure/core-http/es/src/policies/userAgentPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDefaultUserAgentValue = getDefaultUserAgentValue;
exports.userAgentPolicy = userAgentPolicy;
exports.UserAgentPolicy = exports.getDefaultUserAgentHeaderName = void 0;

var _tslib = require("tslib");

var _httpHeaders = require("../httpHeaders");

var _constants = require("../util/constants");

var _msRestUserAgentPolicy = require("./msRestUserAgentPolicy");

var _requestPolicy = require("./requestPolicy");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
function getRuntimeInfo() {
  var msRestRuntime = {
    key: "core-http",
    value: _constants.Constants.coreHttpVersion
  };
  return [msRestRuntime];
}

function getUserAgentString(telemetryInfo, keySeparator, valueSeparator) {
  if (keySeparator === void 0) {
    keySeparator = " ";
  }

  if (valueSeparator === void 0) {
    valueSeparator = "/";
  }

  return telemetryInfo.map(function (info) {
    var value = info.value ? "" + valueSeparator + info.value : "";
    return "" + info.key + value;
  }).join(keySeparator);
}

var getDefaultUserAgentHeaderName = _msRestUserAgentPolicy.getDefaultUserAgentKey;
exports.getDefaultUserAgentHeaderName = getDefaultUserAgentHeaderName;

function getDefaultUserAgentValue() {
  var runtimeInfo = getRuntimeInfo();
  var platformSpecificData = (0, _msRestUserAgentPolicy.getPlatformSpecificData)();
  var userAgent = getUserAgentString(runtimeInfo.concat(platformSpecificData));
  return userAgent;
}

function userAgentPolicy(userAgentData) {
  var key = !userAgentData || userAgentData.key === undefined || userAgentData.key === null ? (0, _msRestUserAgentPolicy.getDefaultUserAgentKey)() : userAgentData.key;
  var value = !userAgentData || userAgentData.value === undefined || userAgentData.value === null ? getDefaultUserAgentValue() : userAgentData.value;
  return {
    create: function (nextPolicy, options) {
      return new UserAgentPolicy(nextPolicy, options, key, value);
    }
  };
}

var UserAgentPolicy =
/** @class */
function (_super) {
  (0, _tslib.__extends)(UserAgentPolicy, _super);

  function UserAgentPolicy(_nextPolicy, _options, headerKey, headerValue) {
    var _this = _super.call(this, _nextPolicy, _options) || this;

    _this._nextPolicy = _nextPolicy;
    _this._options = _options;
    _this.headerKey = headerKey;
    _this.headerValue = headerValue;
    return _this;
  }

  UserAgentPolicy.prototype.sendRequest = function (request) {
    this.addUserAgentHeader(request);
    return this._nextPolicy.sendRequest(request);
  };

  UserAgentPolicy.prototype.addUserAgentHeader = function (request) {
    if (!request.headers) {
      request.headers = new _httpHeaders.HttpHeaders();
    }

    if (!request.headers.get(this.headerKey) && this.headerValue) {
      request.headers.set(this.headerKey, this.headerValue);
    }
  };

  return UserAgentPolicy;
}(_requestPolicy.BaseRequestPolicy);

exports.UserAgentPolicy = UserAgentPolicy;
},{"tslib":"node_modules/tslib/tslib.es6.js","../httpHeaders":"node_modules/@azure/core-http/es/src/httpHeaders.js","../util/constants":"node_modules/@azure/core-http/es/src/util/constants.js","./msRestUserAgentPolicy":"node_modules/@azure/core-http/es/src/policies/msRestUserAgentPolicy.browser.js","./requestPolicy":"node_modules/@azure/core-http/es/src/policies/requestPolicy.js"}],"node_modules/@azure/core-http/es/src/policies/redirectPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.redirectPolicy = redirectPolicy;
exports.RedirectPolicy = exports.DefaultRedirectOptions = void 0;

var _tslib = require("tslib");

var _url = require("../url");

var _requestPolicy = require("./requestPolicy");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Methods that are allowed to follow redirects 301 and 302
 */
var allowedRedirect = ["GET", "HEAD"];
var DefaultRedirectOptions = {
  handleRedirects: true,
  maxRetries: 20
};
exports.DefaultRedirectOptions = DefaultRedirectOptions;

function redirectPolicy(maximumRetries) {
  if (maximumRetries === void 0) {
    maximumRetries = 20;
  }

  return {
    create: function (nextPolicy, options) {
      return new RedirectPolicy(nextPolicy, options, maximumRetries);
    }
  };
}

var RedirectPolicy =
/** @class */
function (_super) {
  (0, _tslib.__extends)(RedirectPolicy, _super);

  function RedirectPolicy(nextPolicy, options, maxRetries) {
    if (maxRetries === void 0) {
      maxRetries = 20;
    }

    var _this = _super.call(this, nextPolicy, options) || this;

    _this.maxRetries = maxRetries;
    return _this;
  }

  RedirectPolicy.prototype.sendRequest = function (request) {
    var _this = this;

    return this._nextPolicy.sendRequest(request).then(function (response) {
      return handleRedirect(_this, response, 0);
    });
  };

  return RedirectPolicy;
}(_requestPolicy.BaseRequestPolicy);

exports.RedirectPolicy = RedirectPolicy;

function handleRedirect(policy, response, currentRetries) {
  var request = response.request,
      status = response.status;
  var locationHeader = response.headers.get("location");

  if (locationHeader && (status === 300 || status === 301 && allowedRedirect.includes(request.method) || status === 302 && allowedRedirect.includes(request.method) || status === 303 && request.method === "POST" || status === 307) && (!policy.maxRetries || currentRetries < policy.maxRetries)) {
    var builder = _url.URLBuilder.parse(request.url);

    builder.setPath(locationHeader);
    request.url = builder.toString(); // POST request with Status code 303 should be converted into a
    // redirected GET request if the redirect url is present in the location header

    if (status === 303) {
      request.method = "GET";
      delete request.body;
    }

    return policy._nextPolicy.sendRequest(request).then(function (res) {
      return handleRedirect(policy, res, currentRetries + 1);
    });
  }

  return Promise.resolve(response);
}
},{"tslib":"node_modules/tslib/tslib.es6.js","../url":"node_modules/@azure/core-http/es/src/url.js","./requestPolicy":"node_modules/@azure/core-http/es/src/policies/requestPolicy.js"}],"node_modules/@azure/core-http/es/src/policies/rpRegistrationPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rpRegistrationPolicy = rpRegistrationPolicy;
exports.RPRegistrationPolicy = void 0;

var _tslib = require("tslib");

var utils = _interopRequireWildcard(require("../util/utils"));

var _requestPolicy = require("./requestPolicy");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
function rpRegistrationPolicy(retryTimeout) {
  if (retryTimeout === void 0) {
    retryTimeout = 30;
  }

  return {
    create: function (nextPolicy, options) {
      return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);
    }
  };
}

var RPRegistrationPolicy =
/** @class */
function (_super) {
  (0, _tslib.__extends)(RPRegistrationPolicy, _super);

  function RPRegistrationPolicy(nextPolicy, options, _retryTimeout) {
    if (_retryTimeout === void 0) {
      _retryTimeout = 30;
    }

    var _this = _super.call(this, nextPolicy, options) || this;

    _this._retryTimeout = _retryTimeout;
    return _this;
  }

  RPRegistrationPolicy.prototype.sendRequest = function (request) {
    var _this = this;

    return this._nextPolicy.sendRequest(request.clone()).then(function (response) {
      return registerIfNeeded(_this, request, response);
    });
  };

  return RPRegistrationPolicy;
}(_requestPolicy.BaseRequestPolicy);

exports.RPRegistrationPolicy = RPRegistrationPolicy;

function registerIfNeeded(policy, request, response) {
  if (response.status === 409) {
    var rpName = checkRPNotRegisteredError(response.bodyAsText);

    if (rpName) {
      var urlPrefix = extractSubscriptionUrl(request.url);
      return registerRP(policy, urlPrefix, rpName, request) // Autoregistration of ${provider} failed for some reason. We will not return this error
      // instead will return the initial response with 409 status code back to the user.
      // do nothing here as we are returning the original response at the end of this method.
      .catch(function () {
        return false;
      }).then(function (registrationStatus) {
        if (registrationStatus) {
          // Retry the original request. We have to change the x-ms-client-request-id
          // otherwise Azure endpoint will return the initial 409 (cached) response.
          request.headers.set("x-ms-client-request-id", utils.generateUuid());
          return policy._nextPolicy.sendRequest(request.clone());
        }

        return response;
      });
    }
  }

  return Promise.resolve(response);
}
/**
 * Reuses the headers of the original request and url (if specified).
 * @param originalRequest - The original request
 * @param reuseUrlToo - Should the url from the original request be reused as well. Default false.
 * @returns A new request object with desired headers.
 */


function getRequestEssentials(originalRequest, reuseUrlToo) {
  if (reuseUrlToo === void 0) {
    reuseUrlToo = false;
  }

  var reqOptions = originalRequest.clone();

  if (reuseUrlToo) {
    reqOptions.url = originalRequest.url;
  } // We have to change the x-ms-client-request-id otherwise Azure endpoint
  // will return the initial 409 (cached) response.


  reqOptions.headers.set("x-ms-client-request-id", utils.generateUuid()); // Set content-type to application/json

  reqOptions.headers.set("Content-Type", "application/json; charset=utf-8");
  return reqOptions;
}
/**
 * Validates the error code and message associated with 409 response status code. If it matches to that of
 * RP not registered then it returns the name of the RP else returns undefined.
 * @param body - The response body received after making the original request.
 * @returns The name of the RP if condition is satisfied else undefined.
 */


function checkRPNotRegisteredError(body) {
  var result, responseBody;

  if (body) {
    try {
      responseBody = JSON.parse(body);
    } catch (err) {// do nothing;
    }

    if (responseBody && responseBody.error && responseBody.error.message && responseBody.error.code && responseBody.error.code === "MissingSubscriptionRegistration") {
      var matchRes = responseBody.error.message.match(/.*'(.*)'/i);

      if (matchRes) {
        result = matchRes.pop();
      }
    }
  }

  return result;
}
/**
 * Extracts the first part of the URL, just after subscription:
 * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/
 * @param url - The original request url
 * @returns The url prefix as explained above.
 */


function extractSubscriptionUrl(url) {
  var result;
  var matchRes = url.match(/.*\/subscriptions\/[a-f0-9-]+\//gi);

  if (matchRes && matchRes[0]) {
    result = matchRes[0];
  } else {
    throw new Error("Unable to extract subscriptionId from the given url - " + url + ".");
  }

  return result;
}
/**
 * Registers the given provider.
 * @param policy - The RPRegistrationPolicy this function is being called against.
 * @param urlPrefix - https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/
 * @param provider - The provider name to be registered.
 * @param originalRequest - The original request sent by the user that returned a 409 response
 * with a message that the provider is not registered.
 * @param callback - The callback that handles the RP registration
 */


function registerRP(policy, urlPrefix, provider, originalRequest) {
  var postUrl = urlPrefix + "providers/" + provider + "/register?api-version=2016-02-01";
  var getUrl = urlPrefix + "providers/" + provider + "?api-version=2016-02-01";
  var reqOptions = getRequestEssentials(originalRequest);
  reqOptions.method = "POST";
  reqOptions.url = postUrl;
  return policy._nextPolicy.sendRequest(reqOptions).then(function (response) {
    if (response.status !== 200) {
      throw new Error("Autoregistration of " + provider + " failed. Please try registering manually.");
    }

    return getRegistrationStatus(policy, getUrl, originalRequest);
  });
}
/**
 * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.
 * Polling will happen till the registrationState property of the response body is "Registered".
 * @param policy - The RPRegistrationPolicy this function is being called against.
 * @param url - The request url for polling
 * @param originalRequest - The original request sent by the user that returned a 409 response
 * with a message that the provider is not registered.
 * @returns True if RP Registration is successful.
 */


function getRegistrationStatus(policy, url, originalRequest) {
  var reqOptions = getRequestEssentials(originalRequest);
  reqOptions.url = url;
  reqOptions.method = "GET";
  return policy._nextPolicy.sendRequest(reqOptions).then(function (res) {
    var obj = res.parsedBody;

    if (res.parsedBody && obj.registrationState && obj.registrationState === "Registered") {
      return true;
    } else {
      return utils.delay(policy._retryTimeout * 1000).then(function () {
        return getRegistrationStatus(policy, url, originalRequest);
      });
    }
  });
}
},{"tslib":"node_modules/tslib/tslib.es6.js","../util/utils":"node_modules/@azure/core-http/es/src/util/utils.js","./requestPolicy":"node_modules/@azure/core-http/es/src/policies/requestPolicy.js"}],"node_modules/@azure/core-http/es/src/policies/bearerTokenAuthenticationPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bearerTokenAuthenticationPolicy = bearerTokenAuthenticationPolicy;
exports.DEFAULT_CYCLER_OPTIONS = void 0;

var _tslib = require("tslib");

var _requestPolicy = require("../policies/requestPolicy");

var _constants = require("../util/constants");

var _utils = require("../util/utils");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// Default options for the cycler if none are provided
var DEFAULT_CYCLER_OPTIONS = {
  forcedRefreshWindowInMs: 1000,
  retryIntervalInMs: 3000,
  refreshWindowInMs: 1000 * 60 * 2 // Start refreshing 2m before expiry

};
/**
 * Converts an an unreliable access token getter (which may resolve with null)
 * into an AccessTokenGetter by retrying the unreliable getter in a regular
 * interval.
 *
 * @param getAccessToken - a function that produces a promise of an access
 * token that may fail by returning null
 * @param retryIntervalInMs - the time (in milliseconds) to wait between retry
 * attempts
 * @param timeoutInMs - the timestamp after which the refresh attempt will fail,
 * throwing an exception
 * @returns - a promise that, if it resolves, will resolve with an access token
 */

exports.DEFAULT_CYCLER_OPTIONS = DEFAULT_CYCLER_OPTIONS;

function beginRefresh(getAccessToken, retryIntervalInMs, timeoutInMs) {
  return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
    // This wrapper handles exceptions gracefully as long as we haven't exceeded
    // the timeout.
    function tryGetAccessToken() {
      return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
        var _a, finalToken;

        return (0, _tslib.__generator)(this, function (_b) {
          switch (_b.label) {
            case 0:
              if (!(Date.now() < timeoutInMs)) return [3
              /*break*/
              , 5];
              _b.label = 1;

            case 1:
              _b.trys.push([1, 3,, 4]);

              return [4
              /*yield*/
              , getAccessToken()];

            case 2:
              return [2
              /*return*/
              , _b.sent()];

            case 3:
              _a = _b.sent();
              return [2
              /*return*/
              , null];

            case 4:
              return [3
              /*break*/
              , 7];

            case 5:
              return [4
              /*yield*/
              , getAccessToken()];

            case 6:
              finalToken = _b.sent(); // Timeout is up, so throw if it's still null

              if (finalToken === null) {
                throw new Error("Failed to refresh access token.");
              }

              return [2
              /*return*/
              , finalToken];

            case 7:
              return [2
              /*return*/
              ];
          }
        });
      });
    }

    var token;
    return (0, _tslib.__generator)(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4
          /*yield*/
          , tryGetAccessToken()];

        case 1:
          token = _a.sent();
          _a.label = 2;

        case 2:
          if (!(token === null)) return [3
          /*break*/
          , 5];
          return [4
          /*yield*/
          , (0, _utils.delay)(retryIntervalInMs)];

        case 3:
          _a.sent();

          return [4
          /*yield*/
          , tryGetAccessToken()];

        case 4:
          token = _a.sent();
          return [3
          /*break*/
          , 2];

        case 5:
          return [2
          /*return*/
          , token];
      }
    });
  });
}
/**
 * Creates a token cycler from a credential, scopes, and optional settings.
 *
 * A token cycler represents a way to reliably retrieve a valid access token
 * from a TokenCredential. It will handle initializing the token, refreshing it
 * when it nears expiration, and synchronizes refresh attempts to avoid
 * concurrency hazards.
 *
 * @param credential - the underlying TokenCredential that provides the access
 * token
 * @param scopes - the scopes to request authorization for
 * @param tokenCyclerOptions - optionally override default settings for the cycler
 *
 * @returns - a function that reliably produces a valid access token
 */


function createTokenCycler(credential, scopes, tokenCyclerOptions) {
  var _this = this;

  var refreshWorker = null;
  var token = null;
  var options = (0, _tslib.__assign)((0, _tslib.__assign)({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);
  /**
   * This little holder defines several predicates that we use to construct
   * the rules of refreshing the token.
   */

  var cycler = {
    /**
     * Produces true if a refresh job is currently in progress.
     */
    get isRefreshing() {
      return refreshWorker !== null;
    },

    /**
     * Produces true if the cycler SHOULD refresh (we are within the refresh
     * window and not already refreshing)
     */
    get shouldRefresh() {
      var _a;

      return !cycler.isRefreshing && ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now();
    },

    /**
     * Produces true if the cycler MUST refresh (null or nearly-expired
     * token).
     */
    get mustRefresh() {
      return token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now();
    }

  };
  /**
   * Starts a refresh job or returns the existing job if one is already
   * running.
   */

  function refresh(getTokenOptions) {
    var _a;

    if (!cycler.isRefreshing) {
      // We bind `scopes` here to avoid passing it around a lot
      var tryGetAccessToken = function () {
        return credential.getToken(scopes, getTokenOptions);
      }; // Take advantage of promise chaining to insert an assignment to `token`
      // before the refresh can be considered done.


      refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs, // If we don't have a token, then we should timeout immediately
      (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now()).then(function (_token) {
        refreshWorker = null;
        token = _token;
        return token;
      }).catch(function (reason) {
        // We also should reset the refresher if we enter a failed state.  All
        // existing awaiters will throw, but subsequent requests will start a
        // new retry chain.
        refreshWorker = null;
        token = null;
        throw reason;
      });
    }

    return refreshWorker;
  }

  return function (tokenOptions) {
    return (0, _tslib.__awaiter)(_this, void 0, void 0, function () {
      return (0, _tslib.__generator)(this, function (_a) {
        //
        // Simple rules:
        // - If we MUST refresh, then return the refresh task, blocking
        //   the pipeline until a token is available.
        // - If we SHOULD refresh, then run refresh but don't return it
        //   (we can still use the cached token).
        // - Return the token, since it's fine if we didn't return in
        //   step 1.
        //
        if (cycler.mustRefresh) return [2
        /*return*/
        , refresh(tokenOptions)];

        if (cycler.shouldRefresh) {
          refresh(tokenOptions);
        }

        return [2
        /*return*/
        , token];
      });
    });
  };
} // #endregion

/**
 * Creates a new factory for a RequestPolicy that applies a bearer token to
 * the requests' `Authorization` headers.
 *
 * @param credential - The TokenCredential implementation that can supply the bearer token.
 * @param scopes - The scopes for which the bearer token applies.
 */


function bearerTokenAuthenticationPolicy(credential, scopes) {
  // This simple function encapsulates the entire process of reliably retrieving the token
  var getToken = createTokenCycler(credential, scopes
  /* , options */
  );

  var BearerTokenAuthenticationPolicy =
  /** @class */
  function (_super) {
    (0, _tslib.__extends)(BearerTokenAuthenticationPolicy, _super);

    function BearerTokenAuthenticationPolicy(nextPolicy, options) {
      return _super.call(this, nextPolicy, options) || this;
    }

    BearerTokenAuthenticationPolicy.prototype.sendRequest = function (webResource) {
      return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
        var token;
        return (0, _tslib.__generator)(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4
              /*yield*/
              , getToken({
                abortSignal: webResource.abortSignal,
                tracingOptions: {
                  spanOptions: webResource.spanOptions,
                  tracingContext: webResource.tracingContext
                }
              })];

            case 1:
              token = _a.sent().token;
              webResource.headers.set(_constants.Constants.HeaderConstants.AUTHORIZATION, "Bearer " + token);
              return [2
              /*return*/
              , this._nextPolicy.sendRequest(webResource)];
          }
        });
      });
    };

    return BearerTokenAuthenticationPolicy;
  }(_requestPolicy.BaseRequestPolicy);

  return {
    create: function (nextPolicy, options) {
      return new BearerTokenAuthenticationPolicy(nextPolicy, options);
    }
  };
}
},{"tslib":"node_modules/tslib/tslib.es6.js","../policies/requestPolicy":"node_modules/@azure/core-http/es/src/policies/requestPolicy.js","../util/constants":"node_modules/@azure/core-http/es/src/util/constants.js","../util/utils":"node_modules/@azure/core-http/es/src/util/utils.js"}],"node_modules/@azure/core-http/es/src/policies/systemErrorRetryPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.systemErrorRetryPolicy = systemErrorRetryPolicy;
exports.SystemErrorRetryPolicy = void 0;

var _tslib = require("tslib");

var utils = _interopRequireWildcard(require("../util/utils"));

var _requestPolicy = require("./requestPolicy");

var _exponentialBackoffStrategy = require("../util/exponentialBackoffStrategy");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
function systemErrorRetryPolicy(retryCount, retryInterval, minRetryInterval, maxRetryInterval) {
  return {
    create: function (nextPolicy, options) {
      return new SystemErrorRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval);
    }
  };
}
/**
 * @param retryCount - The client retry count.
 * @param retryInterval - The client retry interval, in milliseconds.
 * @param minRetryInterval - The minimum retry interval, in milliseconds.
 * @param maxRetryInterval - The maximum retry interval, in milliseconds.
 */


var SystemErrorRetryPolicy =
/** @class */
function (_super) {
  (0, _tslib.__extends)(SystemErrorRetryPolicy, _super);

  function SystemErrorRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval) {
    var _this = _super.call(this, nextPolicy, options) || this;

    _this.retryCount = (0, _exponentialBackoffStrategy.isNumber)(retryCount) ? retryCount : _exponentialBackoffStrategy.DEFAULT_CLIENT_RETRY_COUNT;
    _this.retryInterval = (0, _exponentialBackoffStrategy.isNumber)(retryInterval) ? retryInterval : _exponentialBackoffStrategy.DEFAULT_CLIENT_RETRY_INTERVAL;
    _this.minRetryInterval = (0, _exponentialBackoffStrategy.isNumber)(minRetryInterval) ? minRetryInterval : _exponentialBackoffStrategy.DEFAULT_CLIENT_MIN_RETRY_INTERVAL;
    _this.maxRetryInterval = (0, _exponentialBackoffStrategy.isNumber)(maxRetryInterval) ? maxRetryInterval : _exponentialBackoffStrategy.DEFAULT_CLIENT_MAX_RETRY_INTERVAL;
    return _this;
  }

  SystemErrorRetryPolicy.prototype.sendRequest = function (request) {
    var _this = this;

    return this._nextPolicy.sendRequest(request.clone()).catch(function (error) {
      return retry(_this, request, error.response, error);
    });
  };

  return SystemErrorRetryPolicy;
}(_requestPolicy.BaseRequestPolicy);

exports.SystemErrorRetryPolicy = SystemErrorRetryPolicy;

function retry(policy, request, operationResponse, err, retryData) {
  return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
    function shouldPolicyRetry(_response, error) {
      if (error && error.code && (error.code === "ETIMEDOUT" || error.code === "ESOCKETTIMEDOUT" || error.code === "ECONNREFUSED" || error.code === "ECONNRESET" || error.code === "ENOENT")) {
        return true;
      }

      return false;
    }

    var nestedErr_1;
    return (0, _tslib.__generator)(this, function (_a) {
      switch (_a.label) {
        case 0:
          retryData = (0, _exponentialBackoffStrategy.updateRetryData)(policy, retryData, err);
          if (!(0, _exponentialBackoffStrategy.shouldRetry)(policy.retryCount, shouldPolicyRetry, retryData, operationResponse, err)) return [3
          /*break*/
          , 5];
          _a.label = 1;

        case 1:
          _a.trys.push([1, 3,, 4]);

          return [4
          /*yield*/
          , utils.delay(retryData.retryInterval)];

        case 2:
          _a.sent();

          return [2
          /*return*/
          , policy._nextPolicy.sendRequest(request.clone())];

        case 3:
          nestedErr_1 = _a.sent();
          return [2
          /*return*/
          , retry(policy, request, operationResponse, nestedErr_1, retryData)];

        case 4:
          return [3
          /*break*/
          , 6];

        case 5:
          if (err) {
            // If the operation failed in the end, return all errors instead of just the last one
            return [2
            /*return*/
            , Promise.reject(retryData.error)];
          }

          return [2
          /*return*/
          , operationResponse];

        case 6:
          return [2
          /*return*/
          ];
      }
    });
  });
}
},{"tslib":"node_modules/tslib/tslib.es6.js","../util/utils":"node_modules/@azure/core-http/es/src/util/utils.js","./requestPolicy":"node_modules/@azure/core-http/es/src/policies/requestPolicy.js","../util/exponentialBackoffStrategy":"node_modules/@azure/core-http/es/src/util/exponentialBackoffStrategy.js"}],"node_modules/@azure/core-http/es/src/queryCollectionFormat.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QueryCollectionFormat = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * The format that will be used to join an array of values together for a query parameter value.
 */
var QueryCollectionFormat;
exports.QueryCollectionFormat = QueryCollectionFormat;

(function (QueryCollectionFormat) {
  QueryCollectionFormat["Csv"] = ",";
  QueryCollectionFormat["Ssv"] = " ";
  QueryCollectionFormat["Tsv"] = "\t";
  QueryCollectionFormat["Pipes"] = "|";
  QueryCollectionFormat["Multi"] = "Multi";
})(QueryCollectionFormat || (exports.QueryCollectionFormat = QueryCollectionFormat = {}));
},{}],"node_modules/@azure/core-http/es/src/policies/proxyPolicy.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDefaultProxySettings = getDefaultProxySettings;
exports.proxyPolicy = proxyPolicy;
exports.ProxyPolicy = void 0;

var _tslib = require("tslib");

var _requestPolicy = require("./requestPolicy");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var proxyNotSupportedInBrowser = new Error("ProxyPolicy is not supported in browser environment");

function getDefaultProxySettings(_proxyUrl) {
  return undefined;
}

function proxyPolicy(_proxySettings) {
  return {
    create: function (_nextPolicy, _options) {
      throw proxyNotSupportedInBrowser;
    }
  };
}

var ProxyPolicy =
/** @class */
function (_super) {
  (0, _tslib.__extends)(ProxyPolicy, _super);

  function ProxyPolicy(nextPolicy, options) {
    var _this = _super.call(this, nextPolicy, options) || this;

    throw proxyNotSupportedInBrowser;
    return _this;
  }

  ProxyPolicy.prototype.sendRequest = function (_request) {
    throw proxyNotSupportedInBrowser;
  };

  return ProxyPolicy;
}(_requestPolicy.BaseRequestPolicy);

exports.ProxyPolicy = ProxyPolicy;
},{"tslib":"node_modules/tslib/tslib.es6.js","./requestPolicy":"node_modules/@azure/core-http/es/src/policies/requestPolicy.js"}],"node_modules/@azure/core-http/es/src/policies/throttlingRetryPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.throttlingRetryPolicy = throttlingRetryPolicy;
exports.ThrottlingRetryPolicy = void 0;

var _tslib = require("tslib");

var _requestPolicy = require("./requestPolicy");

var _constants = require("../util/constants");

var _utils = require("../util/utils");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var StatusCodes = _constants.Constants.HttpConstants.StatusCodes;

function throttlingRetryPolicy() {
  return {
    create: function (nextPolicy, options) {
      return new ThrottlingRetryPolicy(nextPolicy, options);
    }
  };
}
/**
 * To learn more, please refer to
 * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,
 * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and
 * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors
 */


var ThrottlingRetryPolicy =
/** @class */
function (_super) {
  (0, _tslib.__extends)(ThrottlingRetryPolicy, _super);

  function ThrottlingRetryPolicy(nextPolicy, options, _handleResponse) {
    var _this = _super.call(this, nextPolicy, options) || this;

    _this._handleResponse = _handleResponse || _this._defaultResponseHandler;
    return _this;
  }

  ThrottlingRetryPolicy.prototype.sendRequest = function (httpRequest) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _this = this;

      return (0, _tslib.__generator)(this, function (_a) {
        return [2
        /*return*/
        , this._nextPolicy.sendRequest(httpRequest.clone()).then(function (response) {
          if (response.status !== StatusCodes.TooManyRequests) {
            return response;
          } else {
            return _this._handleResponse(httpRequest, response);
          }
        })];
      });
    });
  };

  ThrottlingRetryPolicy.prototype._defaultResponseHandler = function (httpRequest, httpResponse) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var retryAfterHeader, delayInMs;

      var _this = this;

      return (0, _tslib.__generator)(this, function (_a) {
        retryAfterHeader = httpResponse.headers.get(_constants.Constants.HeaderConstants.RETRY_AFTER);

        if (retryAfterHeader) {
          delayInMs = ThrottlingRetryPolicy.parseRetryAfterHeader(retryAfterHeader);

          if (delayInMs) {
            return [2
            /*return*/
            , (0, _utils.delay)(delayInMs).then(function (_) {
              return _this._nextPolicy.sendRequest(httpRequest);
            })];
          }
        }

        return [2
        /*return*/
        , httpResponse];
      });
    });
  };

  ThrottlingRetryPolicy.parseRetryAfterHeader = function (headerValue) {
    var retryAfterInSeconds = Number(headerValue);

    if (Number.isNaN(retryAfterInSeconds)) {
      return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);
    } else {
      return retryAfterInSeconds * 1000;
    }
  };

  ThrottlingRetryPolicy.parseDateRetryAfterHeader = function (headerValue) {
    try {
      var now = Date.now();
      var date = Date.parse(headerValue);
      var diff = date - now;
      return Number.isNaN(diff) ? undefined : diff;
    } catch (error) {
      return undefined;
    }
  };

  return ThrottlingRetryPolicy;
}(_requestPolicy.BaseRequestPolicy);

exports.ThrottlingRetryPolicy = ThrottlingRetryPolicy;
},{"tslib":"node_modules/tslib/tslib.es6.js","./requestPolicy":"node_modules/@azure/core-http/es/src/policies/requestPolicy.js","../util/constants":"node_modules/@azure/core-http/es/src/util/constants.js","../util/utils":"node_modules/@azure/core-http/es/src/util/utils.js"}],"node_modules/@azure/core-http/es/src/policies/signingPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.signingPolicy = signingPolicy;
exports.SigningPolicy = void 0;

var _tslib = require("tslib");

var _requestPolicy = require("./requestPolicy");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
function signingPolicy(authenticationProvider) {
  return {
    create: function (nextPolicy, options) {
      return new SigningPolicy(nextPolicy, options, authenticationProvider);
    }
  };
}

var SigningPolicy =
/** @class */
function (_super) {
  (0, _tslib.__extends)(SigningPolicy, _super);

  function SigningPolicy(nextPolicy, options, authenticationProvider) {
    var _this = _super.call(this, nextPolicy, options) || this;

    _this.authenticationProvider = authenticationProvider;
    return _this;
  }

  SigningPolicy.prototype.signRequest = function (request) {
    return this.authenticationProvider.signRequest(request);
  };

  SigningPolicy.prototype.sendRequest = function (request) {
    var _this = this;

    return this.signRequest(request).then(function (nextRequest) {
      return _this._nextPolicy.sendRequest(nextRequest);
    });
  };

  return SigningPolicy;
}(_requestPolicy.BaseRequestPolicy);

exports.SigningPolicy = SigningPolicy;
},{"tslib":"node_modules/tslib/tslib.es6.js","./requestPolicy":"node_modules/@azure/core-http/es/src/policies/requestPolicy.js"}],"node_modules/@azure/core-http/es/src/policies/keepAlivePolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.keepAlivePolicy = keepAlivePolicy;
exports.KeepAlivePolicy = exports.DefaultKeepAliveOptions = void 0;

var _tslib = require("tslib");

var _requestPolicy = require("./requestPolicy");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var DefaultKeepAliveOptions = {
  enable: true
};
exports.DefaultKeepAliveOptions = DefaultKeepAliveOptions;

function keepAlivePolicy(keepAliveOptions) {
  return {
    create: function (nextPolicy, options) {
      return new KeepAlivePolicy(nextPolicy, options, keepAliveOptions || DefaultKeepAliveOptions);
    }
  };
}
/**
 * KeepAlivePolicy is a policy used to control keep alive settings for every request.
 */


var KeepAlivePolicy =
/** @class */
function (_super) {
  (0, _tslib.__extends)(KeepAlivePolicy, _super);
  /**
   * Creates an instance of KeepAlivePolicy.
   *
   * @param nextPolicy -
   * @param options -
   * @param keepAliveOptions -
   */

  function KeepAlivePolicy(nextPolicy, options, keepAliveOptions) {
    var _this = _super.call(this, nextPolicy, options) || this;

    _this.keepAliveOptions = keepAliveOptions;
    return _this;
  }
  /**
   * Sends out request.
   *
   * @param request -
   * @returns
   */


  KeepAlivePolicy.prototype.sendRequest = function (request) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      return (0, _tslib.__generator)(this, function (_a) {
        request.keepAlive = this.keepAliveOptions.enable;
        return [2
        /*return*/
        , this._nextPolicy.sendRequest(request)];
      });
    });
  };

  return KeepAlivePolicy;
}(_requestPolicy.BaseRequestPolicy);

exports.KeepAlivePolicy = KeepAlivePolicy;
},{"tslib":"node_modules/tslib/tslib.es6.js","./requestPolicy":"node_modules/@azure/core-http/es/src/policies/requestPolicy.js"}],"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/tracers/noop/noOpSpan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoOpSpan = void 0;

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * A no-op implementation of Span that can safely be used without side-effects.
 */
var NoOpSpan =
/** @class */
function () {
  function NoOpSpan() {}
  /**
   * Returns the SpanContext associated with this Span.
   */


  NoOpSpan.prototype.context = function () {
    return {
      spanId: "",
      traceId: "",
      traceFlags: 0
      /* NONE */

    };
  };
  /**
   * Marks the end of Span execution.
   * @param _endTime - The time to use as the Span's end time. Defaults to
   * the current time.
   */


  NoOpSpan.prototype.end = function (_endTime) {
    /* Noop */
  };
  /**
   * Sets an attribute on the Span
   * @param _key - The attribute key
   * @param _value - The attribute value
   */


  NoOpSpan.prototype.setAttribute = function (_key, _value) {
    return this;
  };
  /**
   * Sets attributes on the Span
   * @param _attributes - The attributes to add
   */


  NoOpSpan.prototype.setAttributes = function (_attributes) {
    return this;
  };
  /**
   * Adds an event to the Span
   * @param _name - The name of the event
   * @param _attributes - The associated attributes to add for this event
   */


  NoOpSpan.prototype.addEvent = function (_name, _attributes) {
    return this;
  };
  /**
   * Sets a status on the span. Overrides the default of SpanStatusCode.OK.
   * @param _status - The status to set.
   */


  NoOpSpan.prototype.setStatus = function (_status) {
    return this;
  };
  /**
   * Updates the name of the Span
   * @param _name - the new Span name
   */


  NoOpSpan.prototype.updateName = function (_name) {
    return this;
  };
  /**
   * Returns whether this span will be recorded
   */


  NoOpSpan.prototype.isRecording = function () {
    return false;
  };
  /**
   * Sets exception as a span event
   * @param exception - the exception the only accepted values are string or Error
   * @param time - the time to set as Span's event time. If not provided,
   *     use the current time.
   */


  NoOpSpan.prototype.recordException = function (_exception, _time) {
    /* do nothing */
  };

  return NoOpSpan;
}();

exports.NoOpSpan = NoOpSpan;
},{}],"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/tracers/noop/noOpTracer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoOpTracer = void 0;

var _noOpSpan = require("./noOpSpan");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * A no-op implementation of Tracer that can be used when tracing
 * is disabled.
 */
var NoOpTracer =
/** @class */
function () {
  function NoOpTracer() {}
  /**
   * Starts a new Span.
   * @param _name - The name of the span.
   * @param _options - The SpanOptions used during Span creation.
   */


  NoOpTracer.prototype.startSpan = function (_name, _options) {
    return new _noOpSpan.NoOpSpan();
  };
  /**
   * Returns the current Span from the current context, if available.
   */


  NoOpTracer.prototype.getCurrentSpan = function () {
    return new _noOpSpan.NoOpSpan();
  };
  /**
   * Executes the given function within the context provided by a Span.
   * @param _span - The span that provides the context.
   * @param fn - The function to be executed.
   */


  NoOpTracer.prototype.withSpan = function (_span, fn) {
    return fn();
  };
  /**
   * Bind a Span as the target's scope
   * @param target - An object to bind the scope.
   * @param _span - A specific Span to use. Otherwise, use the current one.
   */


  NoOpTracer.prototype.bind = function (target, _span) {
    return target;
  };

  return NoOpTracer;
}();

exports.NoOpTracer = NoOpTracer;
},{"./noOpSpan":"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/tracers/noop/noOpSpan.js"}],"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/utils/global.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getGlobalObject = getGlobalObject;

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
function getGlobalObject() {
  return self;
}
},{}],"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/utils/cache.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCache = getCache;

var _global = require("./global");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// V1 = OpenTelemetry 0.1
// V2 = OpenTelemetry 0.2
// V3 = OpenTelemetry 0.6.1
// V4 = OpenTelemetry 1.0.0-rc.0
var GLOBAL_TRACER_VERSION = 4; // preview5 shipped with @azure/core-tracing.tracerCache
// and didn't have smart detection for collisions

var GLOBAL_TRACER_SYMBOL = Symbol.for("@azure/core-tracing.tracerCache3");
var cache;

function loadTracerCache() {
  var globalObj = (0, _global.getGlobalObject)();
  var existingCache = globalObj[GLOBAL_TRACER_SYMBOL];
  var setGlobalCache = true;

  if (existingCache) {
    if (existingCache.version === GLOBAL_TRACER_VERSION) {
      cache = existingCache;
    } else {
      setGlobalCache = false;

      if (existingCache.tracer) {
        throw new Error("Two incompatible versions of @azure/core-tracing have been loaded.\n          This library is " + GLOBAL_TRACER_VERSION + ", existing is " + existingCache.version + ".");
      }
    }
  }

  if (!cache) {
    cache = {
      tracer: undefined,
      version: GLOBAL_TRACER_VERSION
    };
  }

  if (setGlobalCache) {
    globalObj[GLOBAL_TRACER_SYMBOL] = cache;
  }
}

function getCache() {
  if (!cache) {
    loadTracerCache();
  }

  return cache;
}
},{"./global":"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/utils/global.browser.js"}],"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/tracerProxy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setTracer = setTracer;
exports.getTracer = getTracer;

var _noOpTracer = require("./tracers/noop/noOpTracer");

var _cache = require("./utils/cache");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var defaultTracer;

function getDefaultTracer() {
  if (!defaultTracer) {
    defaultTracer = new _noOpTracer.NoOpTracer();
  }

  return defaultTracer;
}
/**
 * Sets the global tracer, enabling tracing for the Azure SDK.
 * @param tracer - An OpenTelemetry Tracer instance.
 */


function setTracer(tracer) {
  var cache = (0, _cache.getCache)();
  cache.tracer = tracer;
}
/**
 * Retrieves the active tracer, or returns a
 * no-op implementation if one is not set.
 */


function getTracer() {
  var cache = (0, _cache.getCache)();

  if (!cache.tracer) {
    return getDefaultTracer();
  }

  return cache.tracer;
}
},{"./tracers/noop/noOpTracer":"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/tracers/noop/noOpTracer.js","./utils/cache":"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/utils/cache.js"}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/baggage/internal/baggage.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaggageImpl = void 0;

var BaggageImpl =
/** @class */
function () {
  function BaggageImpl(entries) {
    this._entries = entries ? new Map(entries) : new Map();
  }

  BaggageImpl.prototype.getEntry = function (key) {
    var entry = this._entries.get(key);

    if (!entry) {
      return undefined;
    }

    return Object.assign({}, entry);
  };

  BaggageImpl.prototype.getAllEntries = function () {
    return Array.from(this._entries.entries()).map(function (_a) {
      var k = _a[0],
          v = _a[1];
      return [k, v];
    });
  };

  BaggageImpl.prototype.setEntry = function (key, entry) {
    var newBaggage = new BaggageImpl(this._entries);

    newBaggage._entries.set(key, entry);

    return newBaggage;
  };

  BaggageImpl.prototype.removeEntry = function (key) {
    var newBaggage = new BaggageImpl(this._entries);

    newBaggage._entries.delete(key);

    return newBaggage;
  };

  BaggageImpl.prototype.removeEntries = function () {
    var keys = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      keys[_i] = arguments[_i];
    }

    var newBaggage = new BaggageImpl(this._entries);

    for (var _a = 0, keys_1 = keys; _a < keys_1.length; _a++) {
      var key = keys_1[_a];

      newBaggage._entries.delete(key);
    }

    return newBaggage;
  };

  BaggageImpl.prototype.clear = function () {
    return new BaggageImpl();
  };

  return BaggageImpl;
}();

exports.BaggageImpl = BaggageImpl;
},{}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/baggage/internal/symbol.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.baggageEntryMetadataSymbol = void 0;
/**
 * Symbol used to make BaggageEntryMetadata an opaque type
 */

exports.baggageEntryMetadataSymbol = Symbol('BaggageEntryMetadata');
},{}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/baggage/Baggage.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/baggage/Entry.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/baggage/index.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function () {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __exportStar = this && this.__exportStar || function (m, exports) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.baggageEntryMetadataFromString = exports.createBaggage = void 0;

var baggage_1 = require("./internal/baggage");

var symbol_1 = require("./internal/symbol");

__exportStar(require("./Baggage"), exports);

__exportStar(require("./Entry"), exports);
/**
 * Create a new Baggage with optional entries
 *
 * @param entries An array of baggage entries the new baggage should contain
 */


function createBaggage(entries) {
  if (entries === void 0) {
    entries = {};
  }

  return new baggage_1.BaggageImpl(new Map(Object.entries(entries)));
}

exports.createBaggage = createBaggage;
/**
 * Create a serializable BaggageEntryMetadata object from a string.
 *
 * @param str string metadata. Format is currently not defined by the spec and has no special meaning.
 *
 */

function baggageEntryMetadataFromString(str) {
  if (typeof str !== 'string') {
    // @TODO log diagnostic
    str = '';
  }

  return {
    __TYPE__: symbol_1.baggageEntryMetadataSymbol,
    toString: function () {
      return str;
    }
  };
}

exports.baggageEntryMetadataFromString = baggageEntryMetadataFromString;
},{"./internal/baggage":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/baggage/internal/baggage.js","./internal/symbol":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/baggage/internal/symbol.js","./Baggage":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/baggage/Baggage.js","./Entry":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/baggage/Entry.js"}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/common/Exception.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/common/Time.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/diag/consoleLogger.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DiagConsoleLogger = void 0;
var consoleMap = [{
  n: 'error',
  c: 'error'
}, {
  n: 'warn',
  c: 'warn'
}, {
  n: 'info',
  c: 'info'
}, {
  n: 'debug',
  c: 'debug'
}, {
  n: 'verbose',
  c: 'trace'
}];
/**
 * A simple Immutable Console based diagnostic logger which will output any messages to the Console.
 * If you want to limit the amount of logging to a specific level or lower use the
 * {@link createLogLevelDiagLogger}
 */

var DiagConsoleLogger =
/** @class */
function () {
  function DiagConsoleLogger() {
    function _consoleFunc(funcName) {
      return function () {
        var orgArguments = arguments;

        if (console) {
          // Some environments only expose the console when the F12 developer console is open
          var theFunc = console[funcName];

          if (typeof theFunc !== 'function') {
            // Not all environments support all functions
            theFunc = console.log;
          } // One last final check


          if (typeof theFunc === 'function') {
            return theFunc.apply(console, orgArguments);
          }
        }
      };
    }

    for (var i = 0; i < consoleMap.length; i++) {
      this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);
    }
  }

  return DiagConsoleLogger;
}();

exports.DiagConsoleLogger = DiagConsoleLogger;
},{}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/diag/types.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DiagLogLevel = void 0;
/**
 * Defines the available internal logging levels for the diagnostic logger, the numeric values
 * of the levels are defined to match the original values from the initial LogLevel to avoid
 * compatibility/migration issues for any implementation that assume the numeric ordering.
 */

var DiagLogLevel;

(function (DiagLogLevel) {
  /** Diagnostic Logging level setting to disable all logging (except and forced logs) */
  DiagLogLevel[DiagLogLevel["NONE"] = 0] = "NONE";
  /** Identifies an error scenario */

  DiagLogLevel[DiagLogLevel["ERROR"] = 30] = "ERROR";
  /** Identifies a warning scenario */

  DiagLogLevel[DiagLogLevel["WARN"] = 50] = "WARN";
  /** General informational log message */

  DiagLogLevel[DiagLogLevel["INFO"] = 60] = "INFO";
  /** General debug log message */

  DiagLogLevel[DiagLogLevel["DEBUG"] = 70] = "DEBUG";
  /**
   * Detailed trace level logging should only be used for development, should only be set
   * in a development environment.
   */

  DiagLogLevel[DiagLogLevel["VERBOSE"] = 80] = "VERBOSE";
  /** Used to set the logging level to include all logging */

  DiagLogLevel[DiagLogLevel["ALL"] = 9999] = "ALL";
})(DiagLogLevel = exports.DiagLogLevel || (exports.DiagLogLevel = {}));
},{}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/diag/index.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function () {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __exportStar = this && this.__exportStar || function (m, exports) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

__exportStar(require("./consoleLogger"), exports);

__exportStar(require("./types"), exports);
},{"./consoleLogger":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/diag/consoleLogger.js","./types":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/diag/types.js"}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/propagation/NoopTextMapPropagator.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NOOP_TEXT_MAP_PROPAGATOR = exports.NoopTextMapPropagator = void 0;
/**
 * No-op implementations of {@link TextMapPropagator}.
 */

var NoopTextMapPropagator =
/** @class */
function () {
  function NoopTextMapPropagator() {}
  /** Noop inject function does nothing */


  NoopTextMapPropagator.prototype.inject = function (_context, _carrier) {};
  /** Noop extract function does nothing and returns the input context */


  NoopTextMapPropagator.prototype.extract = function (context, _carrier) {
    return context;
  };

  NoopTextMapPropagator.prototype.fields = function () {
    return [];
  };

  return NoopTextMapPropagator;
}();

exports.NoopTextMapPropagator = NoopTextMapPropagator;
exports.NOOP_TEXT_MAP_PROPAGATOR = new NoopTextMapPropagator();
},{}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/propagation/TextMapPropagator.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultTextMapSetter = exports.defaultTextMapGetter = void 0;
exports.defaultTextMapGetter = {
  get: function (carrier, key) {
    if (carrier == null) {
      return undefined;
    }

    return carrier[key];
  },
  keys: function (carrier) {
    if (carrier == null) {
      return [];
    }

    return Object.keys(carrier);
  }
};
exports.defaultTextMapSetter = {
  set: function (carrier, key, value) {
    if (carrier == null) {
      return;
    }

    carrier[key] = value;
  }
};
},{}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/attributes.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/Event.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/link_context.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/link.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/trace_flags.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TraceFlags = void 0;
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var TraceFlags;

(function (TraceFlags) {
  /** Represents no flag set. */
  TraceFlags[TraceFlags["NONE"] = 0] = "NONE";
  /** Bit to represent whether trace is sampled in trace flags. */

  TraceFlags[TraceFlags["SAMPLED"] = 1] = "SAMPLED";
})(TraceFlags = exports.TraceFlags || (exports.TraceFlags = {}));
},{}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/spancontext-utils.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSpanContextValid = exports.isValidSpanId = exports.isValidTraceId = exports.INVALID_SPAN_CONTEXT = exports.INVALID_TRACEID = exports.INVALID_SPANID = void 0;

var trace_flags_1 = require("./trace_flags");

var VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;
var VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;
exports.INVALID_SPANID = '0000000000000000';
exports.INVALID_TRACEID = '00000000000000000000000000000000';
exports.INVALID_SPAN_CONTEXT = {
  traceId: exports.INVALID_TRACEID,
  spanId: exports.INVALID_SPANID,
  traceFlags: trace_flags_1.TraceFlags.NONE
};

function isValidTraceId(traceId) {
  return VALID_TRACEID_REGEX.test(traceId) && traceId !== exports.INVALID_TRACEID;
}

exports.isValidTraceId = isValidTraceId;

function isValidSpanId(spanId) {
  return VALID_SPANID_REGEX.test(spanId) && spanId !== exports.INVALID_SPANID;
}

exports.isValidSpanId = isValidSpanId;
/**
 * Returns true if this {@link SpanContext} is valid.
 * @return true if this {@link SpanContext} is valid.
 */

function isSpanContextValid(spanContext) {
  return isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId);
}

exports.isSpanContextValid = isSpanContextValid;
},{"./trace_flags":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/trace_flags.js"}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/NoopSpan.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoopSpan = void 0;

var spancontext_utils_1 = require("./spancontext-utils");
/**
 * The NoopSpan is the default {@link Span} that is used when no Span
 * implementation is available. All operations are no-op including context
 * propagation.
 */


var NoopSpan =
/** @class */
function () {
  function NoopSpan(_spanContext) {
    if (_spanContext === void 0) {
      _spanContext = spancontext_utils_1.INVALID_SPAN_CONTEXT;
    }

    this._spanContext = _spanContext;
  } // Returns a SpanContext.


  NoopSpan.prototype.context = function () {
    return this._spanContext;
  }; // By default does nothing


  NoopSpan.prototype.setAttribute = function (_key, _value) {
    return this;
  }; // By default does nothing


  NoopSpan.prototype.setAttributes = function (_attributes) {
    return this;
  }; // By default does nothing


  NoopSpan.prototype.addEvent = function (_name, _attributes) {
    return this;
  }; // By default does nothing


  NoopSpan.prototype.setStatus = function (_status) {
    return this;
  }; // By default does nothing


  NoopSpan.prototype.updateName = function (_name) {
    return this;
  }; // By default does nothing


  NoopSpan.prototype.end = function (_endTime) {}; // isRecording always returns false for noopSpan.


  NoopSpan.prototype.isRecording = function () {
    return false;
  }; // By default does nothing


  NoopSpan.prototype.recordException = function (_exception, _time) {};

  return NoopSpan;
}();

exports.NoopSpan = NoopSpan;
},{"./spancontext-utils":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/spancontext-utils.js"}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/context/context.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ROOT_CONTEXT = exports.createContextKey = exports.setBaggage = exports.getBaggage = exports.isInstrumentationSuppressed = exports.unsuppressInstrumentation = exports.suppressInstrumentation = exports.getSpanContext = exports.setSpanContext = exports.setSpan = exports.getSpan = void 0;

var NoopSpan_1 = require("../trace/NoopSpan");
/**
 * span key
 */


var SPAN_KEY = createContextKey('OpenTelemetry Context Key SPAN');
/**
 * Shared key for indicating if instrumentation should be suppressed beyond
 * this current scope.
 */

var SUPPRESS_INSTRUMENTATION_KEY = createContextKey('OpenTelemetry Context Key SUPPRESS_INSTRUMENTATION');
/**
 * Baggage key
 */

var BAGGAGE_KEY = createContextKey('OpenTelemetry Baggage Key');
/**
 * Return the span if one exists
 *
 * @param context context to get span from
 */

function getSpan(context) {
  return context.getValue(SPAN_KEY) || undefined;
}

exports.getSpan = getSpan;
/**
 * Set the span on a context
 *
 * @param context context to use as parent
 * @param span span to set active
 */

function setSpan(context, span) {
  return context.setValue(SPAN_KEY, span);
}

exports.setSpan = setSpan;
/**
 * Wrap span context in a NoopSpan and set as span in a new
 * context
 *
 * @param context context to set active span on
 * @param spanContext span context to be wrapped
 */

function setSpanContext(context, spanContext) {
  return setSpan(context, new NoopSpan_1.NoopSpan(spanContext));
}

exports.setSpanContext = setSpanContext;
/**
 * Get the span context of the span if it exists.
 *
 * @param context context to get values from
 */

function getSpanContext(context) {
  var _a;

  return (_a = getSpan(context)) === null || _a === void 0 ? void 0 : _a.context();
}

exports.getSpanContext = getSpanContext;
/**
 * Sets value on context to indicate that instrumentation should
 * be suppressed beyond this current scope.
 *
 * @param context context to set the suppress instrumentation value on.
 */

function suppressInstrumentation(context) {
  return context.setValue(SUPPRESS_INSTRUMENTATION_KEY, true);
}

exports.suppressInstrumentation = suppressInstrumentation;
/**
 * Sets value on context to indicate that instrumentation should
 * no-longer be suppressed beyond this current scope.
 *
 * @param context context to set the suppress instrumentation value on.
 */

function unsuppressInstrumentation(context) {
  return context.setValue(SUPPRESS_INSTRUMENTATION_KEY, false);
}

exports.unsuppressInstrumentation = unsuppressInstrumentation;
/**
 * Return current suppress instrumentation value for the given context,
 * if it exists.
 *
 * @param context context check for the suppress instrumentation value.
 */

function isInstrumentationSuppressed(context) {
  return Boolean(context.getValue(SUPPRESS_INSTRUMENTATION_KEY));
}

exports.isInstrumentationSuppressed = isInstrumentationSuppressed;
/**
 * @param {Context} Context that manage all context values
 * @returns {Baggage} Extracted baggage from the context
 */

function getBaggage(context) {
  return context.getValue(BAGGAGE_KEY) || undefined;
}

exports.getBaggage = getBaggage;
/**
 * @param {Context} Context that manage all context values
 * @param {Baggage} baggage that will be set in the actual context
 */

function setBaggage(context, baggage) {
  return context.setValue(BAGGAGE_KEY, baggage);
}

exports.setBaggage = setBaggage;
/** Get a key to uniquely identify a context value */

function createContextKey(description) {
  return Symbol.for(description);
}

exports.createContextKey = createContextKey;

var BaseContext =
/** @class */
function () {
  /**
   * Construct a new context which inherits values from an optional parent context.
   *
   * @param parentContext a context from which to inherit values
   */
  function BaseContext(parentContext) {
    // for minification
    var self = this;
    self._currentContext = parentContext ? new Map(parentContext) : new Map();

    self.getValue = function (key) {
      return self._currentContext.get(key);
    };

    self.setValue = function (key, value) {
      var context = new BaseContext(self._currentContext);

      context._currentContext.set(key, value);

      return context;
    };

    self.deleteValue = function (key) {
      var context = new BaseContext(self._currentContext);

      context._currentContext.delete(key);

      return context;
    };
  }

  return BaseContext;
}();
/** The root context is used as the default parent context when there is no active context */


exports.ROOT_CONTEXT = new BaseContext();
},{"../trace/NoopSpan":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/NoopSpan.js"}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/NoopTracer.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NOOP_TRACER = exports.NoopTracer = void 0;

var context_1 = require("../context/context");

var NoopSpan_1 = require("./NoopSpan");

var spancontext_utils_1 = require("./spancontext-utils");
/**
 * No-op implementations of {@link Tracer}.
 */


var NoopTracer =
/** @class */
function () {
  function NoopTracer() {} // startSpan starts a noop span.


  NoopTracer.prototype.startSpan = function (name, options, context) {
    var root = Boolean(options === null || options === void 0 ? void 0 : options.root);

    if (root) {
      return new NoopSpan_1.NoopSpan();
    }

    var parentFromContext = context && context_1.getSpanContext(context);

    if (isSpanContext(parentFromContext) && spancontext_utils_1.isSpanContextValid(parentFromContext)) {
      return new NoopSpan_1.NoopSpan(parentFromContext);
    } else {
      return new NoopSpan_1.NoopSpan();
    }
  };

  return NoopTracer;
}();

exports.NoopTracer = NoopTracer;

function isSpanContext(spanContext) {
  return typeof spanContext === 'object' && typeof spanContext['spanId'] === 'string' && typeof spanContext['traceId'] === 'string' && typeof spanContext['traceFlags'] === 'number';
}

exports.NOOP_TRACER = new NoopTracer();
},{"../context/context":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/context/context.js","./NoopSpan":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/NoopSpan.js","./spancontext-utils":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/spancontext-utils.js"}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/NoopTracerProvider.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NOOP_TRACER_PROVIDER = exports.NoopTracerProvider = void 0;

var NoopTracer_1 = require("./NoopTracer");
/**
 * An implementation of the {@link TracerProvider} which returns an impotent
 * Tracer for all calls to `getTracer`.
 *
 * All operations are no-op.
 */


var NoopTracerProvider =
/** @class */
function () {
  function NoopTracerProvider() {}

  NoopTracerProvider.prototype.getTracer = function (_name, _version) {
    return NoopTracer_1.NOOP_TRACER;
  };

  return NoopTracerProvider;
}();

exports.NoopTracerProvider = NoopTracerProvider;
exports.NOOP_TRACER_PROVIDER = new NoopTracerProvider();
},{"./NoopTracer":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/NoopTracer.js"}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/ProxyTracer.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProxyTracer = void 0;

var NoopTracer_1 = require("./NoopTracer");
/**
 * Proxy tracer provided by the proxy tracer provider
 */


var ProxyTracer =
/** @class */
function () {
  function ProxyTracer(_provider, name, version) {
    this._provider = _provider;
    this.name = name;
    this.version = version;
  }

  ProxyTracer.prototype.startSpan = function (name, options, context) {
    return this._getTracer().startSpan(name, options, context);
  };
  /**
   * Try to get a tracer from the proxy tracer provider.
   * If the proxy tracer provider has no delegate, return a noop tracer.
   */


  ProxyTracer.prototype._getTracer = function () {
    if (this._delegate) {
      return this._delegate;
    }

    var tracer = this._provider.getDelegateTracer(this.name, this.version);

    if (!tracer) {
      return NoopTracer_1.NOOP_TRACER;
    }

    this._delegate = tracer;
    return this._delegate;
  };

  return ProxyTracer;
}();

exports.ProxyTracer = ProxyTracer;
},{"./NoopTracer":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/NoopTracer.js"}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/ProxyTracerProvider.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProxyTracerProvider = void 0;

var ProxyTracer_1 = require("./ProxyTracer");

var NoopTracerProvider_1 = require("./NoopTracerProvider");
/**
 * Tracer provider which provides {@link ProxyTracer}s.
 *
 * Before a delegate is set, tracers provided are NoOp.
 *   When a delegate is set, traces are provided from the delegate.
 *   When a delegate is set after tracers have already been provided,
 *   all tracers already provided will use the provided delegate implementation.
 */


var ProxyTracerProvider =
/** @class */
function () {
  function ProxyTracerProvider() {}
  /**
   * Get a {@link ProxyTracer}
   */


  ProxyTracerProvider.prototype.getTracer = function (name, version) {
    var _a;

    return (_a = this.getDelegateTracer(name, version)) !== null && _a !== void 0 ? _a : new ProxyTracer_1.ProxyTracer(this, name, version);
  };

  ProxyTracerProvider.prototype.getDelegate = function () {
    var _a;

    return (_a = this._delegate) !== null && _a !== void 0 ? _a : NoopTracerProvider_1.NOOP_TRACER_PROVIDER;
  };
  /**
   * Set the delegate tracer provider
   */


  ProxyTracerProvider.prototype.setDelegate = function (delegate) {
    this._delegate = delegate;
  };

  ProxyTracerProvider.prototype.getDelegateTracer = function (name, version) {
    var _a;

    return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getTracer(name, version);
  };

  return ProxyTracerProvider;
}();

exports.ProxyTracerProvider = ProxyTracerProvider;
},{"./ProxyTracer":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/ProxyTracer.js","./NoopTracerProvider":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/NoopTracerProvider.js"}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/Sampler.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/SamplingResult.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SamplingDecision = void 0;
/**
 * A sampling decision that determines how a {@link Span} will be recorded
 * and collected.
 */

var SamplingDecision;

(function (SamplingDecision) {
  /**
   * `Span.isRecording() === false`, span will not be recorded and all events
   * and attributes will be dropped.
   */
  SamplingDecision[SamplingDecision["NOT_RECORD"] = 0] = "NOT_RECORD";
  /**
   * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}
   * MUST NOT be set.
   */

  SamplingDecision[SamplingDecision["RECORD"] = 1] = "RECORD";
  /**
   * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}
   * MUST be set.
   */

  SamplingDecision[SamplingDecision["RECORD_AND_SAMPLED"] = 2] = "RECORD_AND_SAMPLED";
})(SamplingDecision = exports.SamplingDecision || (exports.SamplingDecision = {}));
},{}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/span_context.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/span_kind.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SpanKind = void 0;
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var SpanKind;

(function (SpanKind) {
  /** Default value. Indicates that the span is used internally. */
  SpanKind[SpanKind["INTERNAL"] = 0] = "INTERNAL";
  /**
   * Indicates that the span covers server-side handling of an RPC or other
   * remote request.
   */

  SpanKind[SpanKind["SERVER"] = 1] = "SERVER";
  /**
   * Indicates that the span covers the client-side wrapper around an RPC or
   * other remote request.
   */

  SpanKind[SpanKind["CLIENT"] = 2] = "CLIENT";
  /**
   * Indicates that the span describes producer sending a message to a
   * broker. Unlike client and server, there is no direct critical path latency
   * relationship between producer and consumer spans.
   */

  SpanKind[SpanKind["PRODUCER"] = 3] = "PRODUCER";
  /**
   * Indicates that the span describes consumer receiving a message from a
   * broker. Unlike client and server, there is no direct critical path latency
   * relationship between producer and consumer spans.
   */

  SpanKind[SpanKind["CONSUMER"] = 4] = "CONSUMER";
})(SpanKind = exports.SpanKind || (exports.SpanKind = {}));
},{}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/span.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/SpanOptions.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/status.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SpanStatusCode = void 0;
/**
 * An enumeration of status codes.
 */

var SpanStatusCode;

(function (SpanStatusCode) {
  /**
   * The default status.
   */
  SpanStatusCode[SpanStatusCode["UNSET"] = 0] = "UNSET";
  /**
   * The operation has been validated by an Application developer or
   * Operator to have completed successfully.
   */

  SpanStatusCode[SpanStatusCode["OK"] = 1] = "OK";
  /**
   * The operation contains an error.
   */

  SpanStatusCode[SpanStatusCode["ERROR"] = 2] = "ERROR";
})(SpanStatusCode = exports.SpanStatusCode || (exports.SpanStatusCode = {}));
},{}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/TimedEvent.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/trace_state.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/tracer_provider.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/tracer.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/context/NoopContextManager.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var __spreadArrays = this && this.__spreadArrays || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

  return r;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoopContextManager = void 0;

var context_1 = require("./context");

var NoopContextManager =
/** @class */
function () {
  function NoopContextManager() {}

  NoopContextManager.prototype.active = function () {
    return context_1.ROOT_CONTEXT;
  };

  NoopContextManager.prototype.with = function (_context, fn, thisArg) {
    var args = [];

    for (var _i = 3; _i < arguments.length; _i++) {
      args[_i - 3] = arguments[_i];
    }

    return fn.call.apply(fn, __spreadArrays([thisArg], args));
  };

  NoopContextManager.prototype.bind = function (target, _context) {
    return target;
  };

  NoopContextManager.prototype.enable = function () {
    return this;
  };

  NoopContextManager.prototype.disable = function () {
    return this;
  };

  return NoopContextManager;
}();

exports.NoopContextManager = NoopContextManager;
},{"./context":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/context/context.js"}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/context/types.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/platform/browser/globalThis.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._globalThis = void 0;
/** only globals that common to node and browsers are allowed */
// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef

exports._globalThis = typeof globalThis === 'object' ? globalThis : window;
},{}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/platform/browser/index.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function () {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __exportStar = this && this.__exportStar || function (m, exports) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

__exportStar(require("./globalThis"), exports);
},{"./globalThis":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/platform/browser/globalThis.js"}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/version.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VERSION = void 0; // this is autogenerated file, see scripts/version-update.js

exports.VERSION = '1.0.0-rc.0';
},{}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/internal/semver.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isCompatible = exports._makeCompatibilityCheck = void 0;

var version_1 = require("../version");

var re = /^(\d+)\.(\d+)\.(\d+)(?:-(.*))?$/;
/**
 * Create a function to test an API version to see if it is compatible with the provided ownVersion.
 *
 * The returned function has the following semantics:
 * - Exact match is always compatible
 * - Major versions must match exactly
 *    - 1.x package cannot use global 2.x package
 *    - 2.x package cannot use global 1.x package
 * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API
 *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects
 *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3
 * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor
 * - Patch and build tag differences are not considered at this time
 *
 * @param ownVersion version which should be checked against
 */

function _makeCompatibilityCheck(ownVersion) {
  var acceptedVersions = new Set([ownVersion]);
  var rejectedVersions = new Set();
  var myVersionMatch = ownVersion.match(re);

  if (!myVersionMatch) {
    // we cannot guarantee compatibility so we always return noop
    return function () {
      return false;
    };
  }

  var ownVersionParsed = {
    major: +myVersionMatch[1],
    minor: +myVersionMatch[2],
    patch: +myVersionMatch[3]
  };

  function _reject(v) {
    rejectedVersions.add(v);
    return false;
  }

  function _accept(v) {
    acceptedVersions.add(v);
    return true;
  }

  return function isCompatible(globalVersion) {
    if (acceptedVersions.has(globalVersion)) {
      return true;
    }

    if (rejectedVersions.has(globalVersion)) {
      return false;
    }

    var globalVersionMatch = globalVersion.match(re);

    if (!globalVersionMatch) {
      // cannot parse other version
      // we cannot guarantee compatibility so we always noop
      return _reject(globalVersion);
    }

    var globalVersionParsed = {
      major: +globalVersionMatch[1],
      minor: +globalVersionMatch[2],
      patch: +globalVersionMatch[3]
    }; // major versions must match

    if (ownVersionParsed.major !== globalVersionParsed.major) {
      return _reject(globalVersion);
    }

    if (ownVersionParsed.major === 0) {
      if (ownVersionParsed.minor === globalVersionParsed.minor && ownVersionParsed.patch <= globalVersionParsed.patch) {
        return _accept(globalVersion);
      }

      return _reject(globalVersion);
    }

    if (ownVersionParsed.minor <= globalVersionParsed.minor) {
      return _accept(globalVersion);
    }

    return _reject(globalVersion);
  };
}

exports._makeCompatibilityCheck = _makeCompatibilityCheck;
/**
 * Test an API version to see if it is compatible with this API.
 *
 * - Exact match is always compatible
 * - Major versions must match exactly
 *    - 1.x package cannot use global 2.x package
 *    - 2.x package cannot use global 1.x package
 * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API
 *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects
 *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3
 * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor
 * - Patch and build tag differences are not considered at this time
 *
 * @param version version of the API requesting an instance of the global API
 */

exports.isCompatible = _makeCompatibilityCheck(version_1.VERSION);
},{"../version":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/version.js"}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/internal/global-utils.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unregisterGlobal = exports.getGlobal = exports.registerGlobal = void 0;

var __1 = require("..");

var platform_1 = require("../platform");

var version_1 = require("../version");

var semver_1 = require("./semver");

var major = version_1.VERSION.split('.')[0];
var GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for("io.opentelemetry.js.api." + major);
var _global = platform_1._globalThis;

function registerGlobal(type, instance, allowOverride) {
  var _a;

  if (allowOverride === void 0) {
    allowOverride = false;
  }

  _global[GLOBAL_OPENTELEMETRY_API_KEY] = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) !== null && _a !== void 0 ? _a : {
    version: version_1.VERSION
  };
  var api = _global[GLOBAL_OPENTELEMETRY_API_KEY];

  if (!allowOverride && api[type]) {
    // already registered an API of this type
    var err = new Error("@opentelemetry/api: Attempted duplicate registration of API: " + type);

    __1.diag.error(err.stack || err.message);

    return;
  }

  if (api.version !== version_1.VERSION) {
    // All registered APIs must be of the same version exactly
    var err = new Error('@opentelemetry/api: All API registration versions must match');

    __1.diag.error(err.stack || err.message);

    return;
  }

  api[type] = instance;
}

exports.registerGlobal = registerGlobal;

function getGlobal(type) {
  var _a, _b;

  var globalVersion = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _a === void 0 ? void 0 : _a.version;

  if (!globalVersion || !semver_1.isCompatible(globalVersion)) {
    return;
  }

  return (_b = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _b === void 0 ? void 0 : _b[type];
}

exports.getGlobal = getGlobal;

function unregisterGlobal(type) {
  var api = _global[GLOBAL_OPENTELEMETRY_API_KEY];

  if (api) {
    delete api[type];
  }
}

exports.unregisterGlobal = unregisterGlobal;
},{"..":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/index.js","../platform":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/platform/browser/index.js","../version":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/version.js","./semver":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/internal/semver.js"}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/api/context.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var __spreadArrays = this && this.__spreadArrays || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

  return r;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContextAPI = void 0;

var NoopContextManager_1 = require("../context/NoopContextManager");

var global_utils_1 = require("../internal/global-utils");

var API_NAME = 'context';
var NOOP_CONTEXT_MANAGER = new NoopContextManager_1.NoopContextManager();
/**
 * Singleton object which represents the entry point to the OpenTelemetry Context API
 */

var ContextAPI =
/** @class */
function () {
  /** Empty private constructor prevents end users from constructing a new instance of the API */
  function ContextAPI() {}
  /** Get the singleton instance of the Context API */


  ContextAPI.getInstance = function () {
    if (!this._instance) {
      this._instance = new ContextAPI();
    }

    return this._instance;
  };
  /**
   * Set the current context manager. Returns the initialized context manager
   */


  ContextAPI.prototype.setGlobalContextManager = function (contextManager) {
    global_utils_1.registerGlobal(API_NAME, contextManager);
    return contextManager;
  };
  /**
   * Get the currently active context
   */


  ContextAPI.prototype.active = function () {
    return this._getContextManager().active();
  };
  /**
   * Execute a function with an active context
   *
   * @param context context to be active during function execution
   * @param fn function to execute in a context
   * @param thisArg optional receiver to be used for calling fn
   * @param args optional arguments forwarded to fn
   */


  ContextAPI.prototype.with = function (context, fn, thisArg) {
    var _a;

    var args = [];

    for (var _i = 3; _i < arguments.length; _i++) {
      args[_i - 3] = arguments[_i];
    }

    return (_a = this._getContextManager()).with.apply(_a, __spreadArrays([context, fn, thisArg], args));
  };
  /**
   * Bind a context to a target function or event emitter
   *
   * @param target function or event emitter to bind
   * @param context context to bind to the event emitter or function. Defaults to the currently active context
   */


  ContextAPI.prototype.bind = function (target, context) {
    if (context === void 0) {
      context = this.active();
    }

    return this._getContextManager().bind(target, context);
  };

  ContextAPI.prototype._getContextManager = function () {
    return global_utils_1.getGlobal(API_NAME) || NOOP_CONTEXT_MANAGER;
  };
  /** Disable and remove the global context manager */


  ContextAPI.prototype.disable = function () {
    this._getContextManager().disable();

    global_utils_1.unregisterGlobal(API_NAME);
  };

  return ContextAPI;
}();

exports.ContextAPI = ContextAPI;
},{"../context/NoopContextManager":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/context/NoopContextManager.js","../internal/global-utils":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/internal/global-utils.js"}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/api/trace.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TraceAPI = void 0;

var ProxyTracerProvider_1 = require("../trace/ProxyTracerProvider");

var spancontext_utils_1 = require("../trace/spancontext-utils");

var global_utils_1 = require("../internal/global-utils");

var API_NAME = 'trace';
/**
 * Singleton object which represents the entry point to the OpenTelemetry Tracing API
 */

var TraceAPI =
/** @class */
function () {
  /** Empty private constructor prevents end users from constructing a new instance of the API */
  function TraceAPI() {
    this._proxyTracerProvider = new ProxyTracerProvider_1.ProxyTracerProvider();
    this.isSpanContextValid = spancontext_utils_1.isSpanContextValid;
  }
  /** Get the singleton instance of the Trace API */


  TraceAPI.getInstance = function () {
    if (!this._instance) {
      this._instance = new TraceAPI();
    }

    return this._instance;
  };
  /**
   * Set the current global tracer. Returns the initialized global tracer provider
   */


  TraceAPI.prototype.setGlobalTracerProvider = function (provider) {
    this._proxyTracerProvider.setDelegate(provider);

    global_utils_1.registerGlobal(API_NAME, this._proxyTracerProvider);
    return this._proxyTracerProvider;
  };
  /**
   * Returns the global tracer provider.
   */


  TraceAPI.prototype.getTracerProvider = function () {
    return global_utils_1.getGlobal(API_NAME) || this._proxyTracerProvider;
  };
  /**
   * Returns a tracer from the global tracer provider.
   */


  TraceAPI.prototype.getTracer = function (name, version) {
    return this.getTracerProvider().getTracer(name, version);
  };
  /** Remove the global tracer provider */


  TraceAPI.prototype.disable = function () {
    global_utils_1.unregisterGlobal(API_NAME);
    this._proxyTracerProvider = new ProxyTracerProvider_1.ProxyTracerProvider();
  };

  return TraceAPI;
}();

exports.TraceAPI = TraceAPI;
},{"../trace/ProxyTracerProvider":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/ProxyTracerProvider.js","../trace/spancontext-utils":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/spancontext-utils.js","../internal/global-utils":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/internal/global-utils.js"}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/api/propagation.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PropagationAPI = void 0;

var NoopTextMapPropagator_1 = require("../propagation/NoopTextMapPropagator");

var TextMapPropagator_1 = require("../propagation/TextMapPropagator");

var global_utils_1 = require("../internal/global-utils");

var API_NAME = 'propagation';
/**
 * Singleton object which represents the entry point to the OpenTelemetry Propagation API
 */

var PropagationAPI =
/** @class */
function () {
  /** Empty private constructor prevents end users from constructing a new instance of the API */
  function PropagationAPI() {}
  /** Get the singleton instance of the Propagator API */


  PropagationAPI.getInstance = function () {
    if (!this._instance) {
      this._instance = new PropagationAPI();
    }

    return this._instance;
  };
  /**
   * Set the current propagator. Returns the initialized propagator
   */


  PropagationAPI.prototype.setGlobalPropagator = function (propagator) {
    global_utils_1.registerGlobal(API_NAME, propagator);
    return propagator;
  };
  /**
   * Inject context into a carrier to be propagated inter-process
   *
   * @param context Context carrying tracing data to inject
   * @param carrier carrier to inject context into
   * @param setter Function used to set values on the carrier
   */


  PropagationAPI.prototype.inject = function (context, carrier, setter) {
    if (setter === void 0) {
      setter = TextMapPropagator_1.defaultTextMapSetter;
    }

    return this._getGlobalPropagator().inject(context, carrier, setter);
  };
  /**
   * Extract context from a carrier
   *
   * @param context Context which the newly created context will inherit from
   * @param carrier Carrier to extract context from
   * @param getter Function used to extract keys from a carrier
   */


  PropagationAPI.prototype.extract = function (context, carrier, getter) {
    if (getter === void 0) {
      getter = TextMapPropagator_1.defaultTextMapGetter;
    }

    return this._getGlobalPropagator().extract(context, carrier, getter);
  };
  /**
   * Return a list of all fields which may be used by the propagator.
   */


  PropagationAPI.prototype.fields = function () {
    return this._getGlobalPropagator().fields();
  };
  /** Remove the global propagator */


  PropagationAPI.prototype.disable = function () {
    global_utils_1.unregisterGlobal(API_NAME);
  };

  PropagationAPI.prototype._getGlobalPropagator = function () {
    return global_utils_1.getGlobal(API_NAME) || NoopTextMapPropagator_1.NOOP_TEXT_MAP_PROPAGATOR;
  };

  return PropagationAPI;
}();

exports.PropagationAPI = PropagationAPI;
},{"../propagation/NoopTextMapPropagator":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/propagation/NoopTextMapPropagator.js","../propagation/TextMapPropagator":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/propagation/TextMapPropagator.js","../internal/global-utils":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/internal/global-utils.js"}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/diag/internal/logLevelLogger.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createLogLevelDiagLogger = void 0;

var types_1 = require("../types");

function createLogLevelDiagLogger(maxLevel, logger) {
  if (maxLevel < types_1.DiagLogLevel.NONE) {
    maxLevel = types_1.DiagLogLevel.NONE;
  } else if (maxLevel > types_1.DiagLogLevel.ALL) {
    maxLevel = types_1.DiagLogLevel.ALL;
  } // In case the logger is null or undefined


  logger = logger || {};

  function _filterFunc(funcName, theLevel) {
    var theFunc = logger[funcName];

    if (typeof theFunc === 'function' && maxLevel >= theLevel) {
      return theFunc.bind(logger);
    }

    return function () {};
  }

  return {
    error: _filterFunc('error', types_1.DiagLogLevel.ERROR),
    warn: _filterFunc('warn', types_1.DiagLogLevel.WARN),
    info: _filterFunc('info', types_1.DiagLogLevel.INFO),
    debug: _filterFunc('debug', types_1.DiagLogLevel.DEBUG),
    verbose: _filterFunc('verbose', types_1.DiagLogLevel.VERBOSE)
  };
}

exports.createLogLevelDiagLogger = createLogLevelDiagLogger;
},{"../types":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/diag/types.js"}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/api/diag.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DiagAPI = void 0;

var logLevelLogger_1 = require("../diag/internal/logLevelLogger");

var types_1 = require("../diag/types");

var global_utils_1 = require("../internal/global-utils");

var API_NAME = 'diag';
/**
 * Singleton object which represents the entry point to the OpenTelemetry internal
 * diagnostic API
 */

var DiagAPI =
/** @class */
function () {
  /**
   * Private internal constructor
   * @private
   */
  function DiagAPI() {
    function _logProxy(funcName) {
      return function () {
        var logger = global_utils_1.getGlobal('diag'); // shortcut if logger not set

        if (!logger) return;
        return logger[funcName].apply(logger, // work around Function.prototype.apply types
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        arguments);
      };
    } // Using self local variable for minification purposes as 'this' cannot be minified


    var self = this; // DiagAPI specific functions

    self.setLogger = function (logger, logLevel) {
      var _a;

      if (logLevel === void 0) {
        logLevel = types_1.DiagLogLevel.INFO;
      }

      if (logger === self) {
        // There isn't much we can do here.
        // Logging to the console might break the user application.
        // Try to log to self. If a logger was previously registered it will receive the log.
        var err = new Error('Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation');
        self.error((_a = err.stack) !== null && _a !== void 0 ? _a : err.message);
        return;
      }

      global_utils_1.registerGlobal('diag', logLevelLogger_1.createLogLevelDiagLogger(logLevel, logger), true);
    };

    self.disable = function () {
      global_utils_1.unregisterGlobal(API_NAME);
    };

    self.verbose = _logProxy('verbose');
    self.debug = _logProxy('debug');
    self.info = _logProxy('info');
    self.warn = _logProxy('warn');
    self.error = _logProxy('error');
  }
  /** Get the singleton instance of the DiagAPI API */


  DiagAPI.instance = function () {
    if (!this._instance) {
      this._instance = new DiagAPI();
    }

    return this._instance;
  };

  return DiagAPI;
}();

exports.DiagAPI = DiagAPI;
},{"../diag/internal/logLevelLogger":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/diag/internal/logLevelLogger.js","../diag/types":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/diag/types.js","../internal/global-utils":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/internal/global-utils.js"}],"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/index.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function () {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __exportStar = this && this.__exportStar || function (m, exports) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.diag = exports.propagation = exports.trace = exports.context = exports.isValidSpanId = exports.isValidTraceId = exports.isSpanContextValid = exports.INVALID_SPAN_CONTEXT = exports.INVALID_TRACEID = exports.INVALID_SPANID = void 0;

__exportStar(require("./baggage"), exports);

__exportStar(require("./common/Exception"), exports);

__exportStar(require("./common/Time"), exports);

__exportStar(require("./diag"), exports);

__exportStar(require("./propagation/NoopTextMapPropagator"), exports);

__exportStar(require("./propagation/TextMapPropagator"), exports);

__exportStar(require("./trace/attributes"), exports);

__exportStar(require("./trace/Event"), exports);

__exportStar(require("./trace/link_context"), exports);

__exportStar(require("./trace/link"), exports);

__exportStar(require("./trace/NoopTracer"), exports);

__exportStar(require("./trace/NoopTracerProvider"), exports);

__exportStar(require("./trace/ProxyTracer"), exports);

__exportStar(require("./trace/ProxyTracerProvider"), exports);

__exportStar(require("./trace/Sampler"), exports);

__exportStar(require("./trace/SamplingResult"), exports);

__exportStar(require("./trace/span_context"), exports);

__exportStar(require("./trace/span_kind"), exports);

__exportStar(require("./trace/span"), exports);

__exportStar(require("./trace/SpanOptions"), exports);

__exportStar(require("./trace/status"), exports);

__exportStar(require("./trace/TimedEvent"), exports);

__exportStar(require("./trace/trace_flags"), exports);

__exportStar(require("./trace/trace_state"), exports);

__exportStar(require("./trace/tracer_provider"), exports);

__exportStar(require("./trace/tracer"), exports);

var spancontext_utils_1 = require("./trace/spancontext-utils");

Object.defineProperty(exports, "INVALID_SPANID", {
  enumerable: true,
  get: function () {
    return spancontext_utils_1.INVALID_SPANID;
  }
});
Object.defineProperty(exports, "INVALID_TRACEID", {
  enumerable: true,
  get: function () {
    return spancontext_utils_1.INVALID_TRACEID;
  }
});
Object.defineProperty(exports, "INVALID_SPAN_CONTEXT", {
  enumerable: true,
  get: function () {
    return spancontext_utils_1.INVALID_SPAN_CONTEXT;
  }
});
Object.defineProperty(exports, "isSpanContextValid", {
  enumerable: true,
  get: function () {
    return spancontext_utils_1.isSpanContextValid;
  }
});
Object.defineProperty(exports, "isValidTraceId", {
  enumerable: true,
  get: function () {
    return spancontext_utils_1.isValidTraceId;
  }
});
Object.defineProperty(exports, "isValidSpanId", {
  enumerable: true,
  get: function () {
    return spancontext_utils_1.isValidSpanId;
  }
});

__exportStar(require("./context/context"), exports);

__exportStar(require("./context/NoopContextManager"), exports);

__exportStar(require("./context/types"), exports);

var context_1 = require("./api/context");
/** Entrypoint for context API */


exports.context = context_1.ContextAPI.getInstance();

var trace_1 = require("./api/trace");
/** Entrypoint for trace API */


exports.trace = trace_1.TraceAPI.getInstance();

var propagation_1 = require("./api/propagation");
/** Entrypoint for propagation API */


exports.propagation = propagation_1.PropagationAPI.getInstance();

var diag_1 = require("./api/diag");
/**
 * Entrypoint for Diag API.
 * Defines Diagnostic handler used for internal diagnostic logging operations.
 * The default provides a Noop DiagLogger implementation which may be changed via the
 * diag.setLogger(logger: DiagLogger) function.
 */


exports.diag = diag_1.DiagAPI.instance();
exports.default = {
  trace: exports.trace,
  context: exports.context,
  propagation: exports.propagation,
  diag: exports.diag
};
},{"./baggage":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/baggage/index.js","./common/Exception":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/common/Exception.js","./common/Time":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/common/Time.js","./diag":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/diag/index.js","./propagation/NoopTextMapPropagator":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/propagation/NoopTextMapPropagator.js","./propagation/TextMapPropagator":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/propagation/TextMapPropagator.js","./trace/attributes":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/attributes.js","./trace/Event":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/Event.js","./trace/link_context":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/link_context.js","./trace/link":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/link.js","./trace/NoopTracer":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/NoopTracer.js","./trace/NoopTracerProvider":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/NoopTracerProvider.js","./trace/ProxyTracer":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/ProxyTracer.js","./trace/ProxyTracerProvider":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/ProxyTracerProvider.js","./trace/Sampler":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/Sampler.js","./trace/SamplingResult":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/SamplingResult.js","./trace/span_context":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/span_context.js","./trace/span_kind":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/span_kind.js","./trace/span":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/span.js","./trace/SpanOptions":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/SpanOptions.js","./trace/status":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/status.js","./trace/TimedEvent":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/TimedEvent.js","./trace/trace_flags":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","./trace/trace_state":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/trace_state.js","./trace/tracer_provider":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/tracer_provider.js","./trace/tracer":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/tracer.js","./trace/spancontext-utils":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/trace/spancontext-utils.js","./context/context":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/context/context.js","./context/NoopContextManager":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/context/NoopContextManager.js","./context/types":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/context/types.js","./api/context":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/api/context.js","./api/trace":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/api/trace.js","./api/propagation":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/api/propagation.js","./api/diag":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/api/diag.js"}],"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/interfaces.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSpan = getSpan;
exports.setSpan = setSpan;
exports.setSpanContext = setSpanContext;
exports.getSpanContext = getSpanContext;
exports.SpanStatusCode = exports.context = exports.SpanKind = void 0;

var _api = require("@opentelemetry/api");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * The kind of span.
 */
var SpanKind;
exports.SpanKind = SpanKind;

(function (SpanKind) {
  /** Default value. Indicates that the span is used internally. */
  SpanKind[SpanKind["INTERNAL"] = 0] = "INTERNAL";
  /**
   * Indicates that the span covers server-side handling of an RPC or other
   * remote request.
   */

  SpanKind[SpanKind["SERVER"] = 1] = "SERVER";
  /**
   * Indicates that the span covers the client-side wrapper around an RPC or
   * other remote request.
   */

  SpanKind[SpanKind["CLIENT"] = 2] = "CLIENT";
  /**
   * Indicates that the span describes producer sending a message to a
   * broker. Unlike client and server, there is no direct critical path latency
   * relationship between producer and consumer spans.
   */

  SpanKind[SpanKind["PRODUCER"] = 3] = "PRODUCER";
  /**
   * Indicates that the span describes consumer receiving a message from a
   * broker. Unlike client and server, there is no direct critical path latency
   * relationship between producer and consumer spans.
   */

  SpanKind[SpanKind["CONSUMER"] = 4] = "CONSUMER";
})(SpanKind || (exports.SpanKind = SpanKind = {}));
/**
 * Return the span if one exists
 *
 * @param context - context to get span from
 */


function getSpan(context) {
  return (0, _api.getSpan)(context);
}
/**
 * Set the span on a context
 *
 * @param context - context to use as parent
 * @param span - span to set active
 */


function setSpan(context, span) {
  return (0, _api.setSpan)(context, span);
}
/**
 * Wrap span context in a NoopSpan and set as span in a new
 * context
 *
 * @param context - context to set active span on
 * @param spanContext - span context to be wrapped
 */


function setSpanContext(context, spanContext) {
  return (0, _api.setSpanContext)(context, spanContext);
}
/**
 * Get the span context of the span if it exists.
 *
 * @param context - context to get values from
 */


function getSpanContext(context) {
  return (0, _api.getSpanContext)(context);
}
/** Entrypoint for context API */


var context = _api.context;
/** SpanStatusCode */

exports.context = context;
var SpanStatusCode;
exports.SpanStatusCode = SpanStatusCode;

(function (SpanStatusCode) {
  /**
   * The default status.
   */
  SpanStatusCode[SpanStatusCode["UNSET"] = 0] = "UNSET";
  /**
   * The operation has been validated by an Application developer or
   * Operator to have completed successfully.
   */

  SpanStatusCode[SpanStatusCode["OK"] = 1] = "OK";
  /**
   * The operation contains an error.
   */

  SpanStatusCode[SpanStatusCode["ERROR"] = 2] = "ERROR";
})(SpanStatusCode || (exports.SpanStatusCode = SpanStatusCode = {}));
},{"@opentelemetry/api":"node_modules/@azure/core-http/node_modules/@opentelemetry/api/build/src/index.js"}],"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/tracers/opencensus/openCensusTraceStateWrapper.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OpenCensusTraceStateWrapper = void 0;

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * @internal
 */
var OpenCensusTraceStateWrapper =
/** @class */
function () {
  function OpenCensusTraceStateWrapper(state) {
    this._state = state;
  }

  OpenCensusTraceStateWrapper.prototype.get = function (_key) {
    throw new Error("Method not implemented.");
  };

  OpenCensusTraceStateWrapper.prototype.set = function (_key, _value) {
    throw new Error("Method not implemented.");
  };

  OpenCensusTraceStateWrapper.prototype.unset = function (_key) {
    throw new Error("Method not implemented");
  };

  OpenCensusTraceStateWrapper.prototype.serialize = function () {
    return this._state || "";
  };

  return OpenCensusTraceStateWrapper;
}();

exports.OpenCensusTraceStateWrapper = OpenCensusTraceStateWrapper;
},{}],"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/tracers/opencensus/openCensusSpanWrapper.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OpenCensusSpanWrapper = void 0;

var _interfaces = require("../../interfaces");

var _openCensusTraceStateWrapper = require("./openCensusTraceStateWrapper");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/** An enumeration of canonical status codes. */
var CanonicalCode;

(function (CanonicalCode) {
  /**
   * Not an error; returned on success
   */
  CanonicalCode[CanonicalCode["OK"] = 0] = "OK";
  /**
   * Internal errors.  Means some invariants expected by underlying
   * system has been broken.  If you see one of these errors,
   * something is very broken.
   */

  CanonicalCode[CanonicalCode["INTERNAL"] = 13] = "INTERNAL";
})(CanonicalCode || (CanonicalCode = {}));

function isWrappedSpan(span) {
  return !!span && span.getWrappedSpan !== undefined;
}

function isTracer(tracerOrSpan) {
  return tracerOrSpan.getWrappedTracer !== undefined;
}
/**
 * An implementation of OpenTelemetry Span that wraps an OpenCensus Span.
 */


var OpenCensusSpanWrapper =
/** @class */
function () {
  function OpenCensusSpanWrapper(tracerOrSpan, name, options, context) {
    if (name === void 0) {
      name = "";
    }

    if (options === void 0) {
      options = {};
    }

    if (isTracer(tracerOrSpan)) {
      var span = (0, _interfaces.getSpan)(context !== null && context !== void 0 ? context : _interfaces.context.active());
      var parent = isWrappedSpan(span) ? span.getWrappedSpan() : undefined;
      this._span = tracerOrSpan.getWrappedTracer().startChildSpan({
        name: name,
        childOf: parent
      });

      this._span.start();

      if (options.links) {
        for (var _i = 0, _a = options.links; _i < _a.length; _i++) {
          var link = _a[_i]; // Since there is no way to set the link relationship, leave it as Unspecified.

          this._span.addLink(link.context.traceId, link.context.spanId, 0
          /* LinkType.UNSPECIFIED */
          , link.attributes);
        }
      }
    } else {
      this._span = tracerOrSpan;
    }
  }
  /**
   * The underlying OpenCensus Span
   */


  OpenCensusSpanWrapper.prototype.getWrappedSpan = function () {
    return this._span;
  };
  /**
   * Marks the end of Span execution.
   * @param endTime - The time to use as the Span's end time. Defaults to
   * the current time.
   */


  OpenCensusSpanWrapper.prototype.end = function (_endTime) {
    this._span.end();
  };
  /**
   * Returns the SpanContext associated with this Span.
   */


  OpenCensusSpanWrapper.prototype.context = function () {
    var openCensusSpanContext = this._span.spanContext;
    return {
      spanId: openCensusSpanContext.spanId,
      traceId: openCensusSpanContext.traceId,
      traceFlags: openCensusSpanContext.options,
      traceState: new _openCensusTraceStateWrapper.OpenCensusTraceStateWrapper(openCensusSpanContext.traceState)
    };
  };
  /**
   * Sets an attribute on the Span
   * @param key - The attribute key
   * @param value - The attribute value
   */


  OpenCensusSpanWrapper.prototype.setAttribute = function (key, value) {
    this._span.addAttribute(key, value);

    return this;
  };
  /**
   * Sets attributes on the Span
   * @param attributes - The attributes to add
   */


  OpenCensusSpanWrapper.prototype.setAttributes = function (attributes) {
    this._span.attributes = attributes;
    return this;
  };
  /**
   * Adds an event to the Span
   * @param name - The name of the event
   * @param attributes - The associated attributes to add for this event
   */


  OpenCensusSpanWrapper.prototype.addEvent = function (_name, _attributes) {
    throw new Error("Method not implemented.");
  };
  /**
   * Sets a status on the span. Overrides the default of SpanStatusCode.OK.
   * @param status - The status to set.
   */


  OpenCensusSpanWrapper.prototype.setStatus = function (status) {
    switch (status.code) {
      case _interfaces.SpanStatusCode.ERROR:
        {
          this._span.setStatus(CanonicalCode.INTERNAL, status.message);

          break;
        }

      case _interfaces.SpanStatusCode.OK:
        {
          this._span.setStatus(CanonicalCode.OK, status.message);

          break;
        }

      case _interfaces.SpanStatusCode.UNSET:
        {
          break;
        }
    }

    return this;
  };
  /**
   * Updates the name of the Span
   * @param name - The new Span name
   */


  OpenCensusSpanWrapper.prototype.updateName = function (name) {
    this._span.name = name;
    return this;
  };
  /**
   * Returns whether this span will be recorded
   */


  OpenCensusSpanWrapper.prototype.isRecording = function () {
    // NoRecordSpans have an empty traceId
    return !!this._span.traceId;
  };
  /**
   * Sets exception as a span event
   * @param exception - the exception the only accepted values are string or Error
   * @param time - the time to set as Span's event time. If not provided,
   *     use the current time.
   */


  OpenCensusSpanWrapper.prototype.recordException = function (_exception, _time) {
    throw new Error("Method not implemented");
  };

  return OpenCensusSpanWrapper;
}();

exports.OpenCensusSpanWrapper = OpenCensusSpanWrapper;
},{"../../interfaces":"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/interfaces.js","./openCensusTraceStateWrapper":"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/tracers/opencensus/openCensusTraceStateWrapper.js"}],"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/tracers/opencensus/openCensusTracerWrapper.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OpenCensusTracerWrapper = void 0;

var _openCensusSpanWrapper = require("./openCensusSpanWrapper");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * An implementation of OpenTelemetry Tracer that wraps an OpenCensus Tracer.
 */
var OpenCensusTracerWrapper =
/** @class */
function () {
  /**
   * Create a new wrapper around a given OpenCensus Tracer.
   * @param tracer - The OpenCensus Tracer to wrap.
   */
  function OpenCensusTracerWrapper(tracer) {
    this._tracer = tracer;
  }
  /**
   * The wrapped OpenCensus Tracer
   */


  OpenCensusTracerWrapper.prototype.getWrappedTracer = function () {
    return this._tracer;
  };
  /**
   * Starts a new Span.
   * @param name - The name of the span.
   * @param options - The SpanOptions used during Span creation.
   */


  OpenCensusTracerWrapper.prototype.startSpan = function (name, options) {
    return new _openCensusSpanWrapper.OpenCensusSpanWrapper(this, name, options);
  };
  /**
   * Returns the current Span from the current context, if available.
   */


  OpenCensusTracerWrapper.prototype.getCurrentSpan = function () {
    return undefined;
  };
  /**
   * Executes the given function within the context provided by a Span.
   * @param _span - The span that provides the context.
   * @param _fn - The function to be executed.
   */


  OpenCensusTracerWrapper.prototype.withSpan = function (_span, _fn) {
    throw new Error("Method not implemented.");
  };
  /**
   * Bind a Span as the target's scope
   * @param target - An object to bind the scope.
   * @param _span - A specific Span to use. Otherwise, use the current one.
   */


  OpenCensusTracerWrapper.prototype.bind = function (_target, _span) {
    throw new Error("Method not implemented.");
  };

  return OpenCensusTracerWrapper;
}();

exports.OpenCensusTracerWrapper = OpenCensusTracerWrapper;
},{"./openCensusSpanWrapper":"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/tracers/opencensus/openCensusSpanWrapper.js"}],"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/tracers/test/testSpan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TestSpan = void 0;

var _tslib = require("tslib");

var _interfaces = require("../../interfaces");

var _noOpSpan = require("../noop/noOpSpan");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * A mock span useful for testing.
 */
var TestSpan =
/** @class */
function (_super) {
  (0, _tslib.__extends)(TestSpan, _super);
  /**
   * Starts a new Span.
   * @param parentTracer-  The tracer that created this Span
   * @param name - The name of the span.
   * @param context - The SpanContext this span belongs to
   * @param kind - The SpanKind of this Span
   * @param parentSpanId - The identifier of the parent Span
   * @param startTime - The startTime of the event (defaults to now)
   */

  function TestSpan(parentTracer, name, context, kind, parentSpanId, startTime) {
    if (startTime === void 0) {
      startTime = Date.now();
    }

    var _this = _super.call(this) || this;

    _this._tracer = parentTracer;
    _this.name = name;
    _this.kind = kind;
    _this.startTime = startTime;
    _this.parentSpanId = parentSpanId;
    _this.status = {
      code: _interfaces.SpanStatusCode.OK
    };
    _this.endCalled = false;
    _this._context = context;
    _this.attributes = {};
    return _this;
  }
  /**
   * Returns the Tracer that created this Span
   */


  TestSpan.prototype.tracer = function () {
    return this._tracer;
  };
  /**
   * Returns the SpanContext associated with this Span.
   */


  TestSpan.prototype.context = function () {
    return this._context;
  };
  /**
   * Marks the end of Span execution.
   * @param _endTime - The time to use as the Span's end time. Defaults to
   * the current time.
   */


  TestSpan.prototype.end = function (_endTime) {
    this.endCalled = true;
  };
  /**
   * Sets a status on the span. Overrides the default of SpanStatusCode.OK.
   * @param status - The status to set.
   */


  TestSpan.prototype.setStatus = function (status) {
    this.status = status;
    return this;
  };
  /**
   * Returns whether this span will be recorded
   */


  TestSpan.prototype.isRecording = function () {
    return true;
  };
  /**
   * Sets an attribute on the Span
   * @param key - The attribute key
   * @param value - The attribute value
   */


  TestSpan.prototype.setAttribute = function (key, value) {
    this.attributes[key] = value;
    return this;
  };
  /**
   * Sets attributes on the Span
   * @param attributes - The attributes to add
   */


  TestSpan.prototype.setAttributes = function (attributes) {
    for (var _i = 0, _a = Object.keys(attributes); _i < _a.length; _i++) {
      var key = _a[_i];
      this.attributes[key] = attributes[key];
    }

    return this;
  };

  return TestSpan;
}(_noOpSpan.NoOpSpan);

exports.TestSpan = TestSpan;
},{"tslib":"node_modules/tslib/tslib.es6.js","../../interfaces":"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/interfaces.js","../noop/noOpSpan":"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/tracers/noop/noOpSpan.js"}],"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/tracers/test/testTracer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TestTracer = void 0;

var _tslib = require("tslib");

var _testSpan = require("./testSpan");

var _noOpTracer = require("../noop/noOpTracer");

var _interfaces = require("../../interfaces");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * A mock tracer useful for testing
 */
var TestTracer =
/** @class */
function (_super) {
  (0, _tslib.__extends)(TestTracer, _super);

  function TestTracer() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.traceIdCounter = 0;
    _this.spanIdCounter = 0;
    _this.rootSpans = [];
    _this.knownSpans = [];
    return _this;
  }

  TestTracer.prototype.getNextTraceId = function () {
    this.traceIdCounter++;
    return String(this.traceIdCounter);
  };

  TestTracer.prototype.getNextSpanId = function () {
    this.spanIdCounter++;
    return String(this.spanIdCounter);
  };
  /**
   * Returns all Spans that were created without a parent
   */


  TestTracer.prototype.getRootSpans = function () {
    return this.rootSpans;
  };
  /**
   * Returns all Spans this Tracer knows about
   */


  TestTracer.prototype.getKnownSpans = function () {
    return this.knownSpans;
  };
  /**
   * Returns all Spans where end() has not been called
   */


  TestTracer.prototype.getActiveSpans = function () {
    return this.knownSpans.filter(function (span) {
      return !span.endCalled;
    });
  };
  /**
   * Return all Spans for a particular trace, grouped by their
   * parent Span in a tree-like structure
   * @param traceId - The traceId to return the graph for
   */


  TestTracer.prototype.getSpanGraph = function (traceId) {
    var traceSpans = this.knownSpans.filter(function (span) {
      return span.context().traceId === traceId;
    });
    var roots = [];
    var nodeMap = new Map();

    for (var _i = 0, traceSpans_1 = traceSpans; _i < traceSpans_1.length; _i++) {
      var span = traceSpans_1[_i];
      var spanId = span.context().spanId;
      var node = {
        name: span.name,
        children: []
      };
      nodeMap.set(spanId, node);

      if (span.parentSpanId) {
        var parent = nodeMap.get(span.parentSpanId);

        if (!parent) {
          throw new Error("Span with name " + node.name + " has an unknown parentSpan with id " + span.parentSpanId);
        }

        parent.children.push(node);
      } else {
        roots.push(node);
      }
    }

    return {
      roots: roots
    };
  };
  /**
   * Starts a new Span.
   * @param name - The name of the span.
   * @param options - The SpanOptions used during Span creation.
   */


  TestTracer.prototype.startSpan = function (name, options, context) {
    var parentContext = (0, _interfaces.getSpanContext)(context || _interfaces.context.active());
    var traceId;
    var isRootSpan = false;

    if (parentContext && parentContext.traceId) {
      traceId = parentContext.traceId;
    } else {
      traceId = this.getNextTraceId();
      isRootSpan = true;
    }

    var spanContext = {
      traceId: traceId,
      spanId: this.getNextSpanId(),
      traceFlags: 0
      /* NONE */

    };
    var span = new _testSpan.TestSpan(this, name, spanContext, (options === null || options === void 0 ? void 0 : options.kind) || _interfaces.SpanKind.INTERNAL, parentContext ? parentContext.spanId : undefined, options === null || options === void 0 ? void 0 : options.startTime);
    this.knownSpans.push(span);

    if (isRootSpan) {
      this.rootSpans.push(span);
    }

    return span;
  };

  return TestTracer;
}(_noOpTracer.NoOpTracer);

exports.TestTracer = TestTracer;
},{"tslib":"node_modules/tslib/tslib.es6.js","./testSpan":"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/tracers/test/testSpan.js","../noop/noOpTracer":"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/tracers/noop/noOpTracer.js","../../interfaces":"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/interfaces.js"}],"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/createSpan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSpanFunction = createSpanFunction;

var _tslib = require("tslib");

var _tracerProxy = require("../src/tracerProxy");

var _interfaces = require("./interfaces");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Creates a function that can be used to create spans using the global tracer.
 *
 * Usage:
 *
 * ```typescript
 * // once
 * const createSpan = createSpanFunction({ packagePrefix: "Azure.Data.AppConfiguration", namespace: "Microsoft.AppConfiguration" });
 *
 * // in each operation
 * const span = createSpan("deleteConfigurationSetting", operationOptions);
 *    // code...
 * span.end();
 * ```
 *
 * @hidden
 * @param args - allows configuration of the prefix for each span as well as the az.namespace field.
 */
function createSpanFunction(args) {
  return function (operationName, operationOptions) {
    var tracer = (0, _tracerProxy.getTracer)();
    var tracingOptions = (operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions) || {};
    var spanOptions = (0, _tslib.__assign)({
      kind: _interfaces.SpanKind.INTERNAL
    }, tracingOptions.spanOptions);
    var spanName = args.packagePrefix ? args.packagePrefix + "." + operationName : operationName;
    var span = tracer.startSpan(spanName, spanOptions, tracingOptions.tracingContext);

    if (args.namespace) {
      span.setAttribute("az.namespace", args.namespace);
    }

    var newSpanOptions = tracingOptions.spanOptions || {};

    if (span.isRecording() && args.namespace) {
      newSpanOptions = (0, _tslib.__assign)((0, _tslib.__assign)({}, tracingOptions.spanOptions), {
        attributes: (0, _tslib.__assign)((0, _tslib.__assign)({}, spanOptions.attributes), {
          "az.namespace": args.namespace
        })
      });
    }

    var newTracingOptions = (0, _tslib.__assign)((0, _tslib.__assign)({}, tracingOptions), {
      spanOptions: newSpanOptions,
      tracingContext: (0, _interfaces.setSpan)(tracingOptions.tracingContext || _interfaces.context.active(), span)
    });
    var newOperationOptions = (0, _tslib.__assign)((0, _tslib.__assign)({}, operationOptions), {
      tracingOptions: newTracingOptions
    });
    return {
      span: span,
      updatedOptions: newOperationOptions
    };
  };
}
},{"tslib":"node_modules/tslib/tslib.es6.js","../src/tracerProxy":"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/tracerProxy.js","./interfaces":"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/interfaces.js"}],"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/utils/traceParentHeader.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractSpanContextFromTraceParentHeader = extractSpanContextFromTraceParentHeader;
exports.getTraceParentHeader = getTraceParentHeader;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var VERSION = "00";
/**
 * Generates a `SpanContext` given a `traceparent` header value.
 * @param traceParent - Serialized span context data as a `traceparent` header value.
 * @returns The `SpanContext` generated from the `traceparent` value.
 */

function extractSpanContextFromTraceParentHeader(traceParentHeader) {
  var parts = traceParentHeader.split("-");

  if (parts.length !== 4) {
    return;
  }

  var version = parts[0],
      traceId = parts[1],
      spanId = parts[2],
      traceOptions = parts[3];

  if (version !== VERSION) {
    return;
  }

  var traceFlags = parseInt(traceOptions, 16);
  var spanContext = {
    spanId: spanId,
    traceId: traceId,
    traceFlags: traceFlags
  };
  return spanContext;
}
/**
 * Generates a `traceparent` value given a span context.
 * @param spanContext - Contains context for a specific span.
 * @returns The `spanContext` represented as a `traceparent` value.
 */


function getTraceParentHeader(spanContext) {
  var missingFields = [];

  if (!spanContext.traceId) {
    missingFields.push("traceId");
  }

  if (!spanContext.spanId) {
    missingFields.push("spanId");
  }

  if (missingFields.length) {
    return;
  }

  var flags = spanContext.traceFlags || 0
  /* NONE */
  ;
  var hexFlags = flags.toString(16);
  var traceFlags = hexFlags.length === 1 ? "0" + hexFlags : hexFlags; // https://www.w3.org/TR/trace-context/#traceparent-header-field-values

  return VERSION + "-" + spanContext.traceId + "-" + spanContext.spanId + "-" + traceFlags;
}
},{}],"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "getTracer", {
  enumerable: true,
  get: function () {
    return _tracerProxy.getTracer;
  }
});
Object.defineProperty(exports, "setTracer", {
  enumerable: true,
  get: function () {
    return _tracerProxy.setTracer;
  }
});
Object.defineProperty(exports, "NoOpSpan", {
  enumerable: true,
  get: function () {
    return _noOpSpan.NoOpSpan;
  }
});
Object.defineProperty(exports, "NoOpTracer", {
  enumerable: true,
  get: function () {
    return _noOpTracer.NoOpTracer;
  }
});
Object.defineProperty(exports, "OpenCensusSpanWrapper", {
  enumerable: true,
  get: function () {
    return _openCensusSpanWrapper.OpenCensusSpanWrapper;
  }
});
Object.defineProperty(exports, "OpenCensusTracerWrapper", {
  enumerable: true,
  get: function () {
    return _openCensusTracerWrapper.OpenCensusTracerWrapper;
  }
});
Object.defineProperty(exports, "TestTracer", {
  enumerable: true,
  get: function () {
    return _testTracer.TestTracer;
  }
});
Object.defineProperty(exports, "TestSpan", {
  enumerable: true,
  get: function () {
    return _testSpan.TestSpan;
  }
});
Object.defineProperty(exports, "createSpanFunction", {
  enumerable: true,
  get: function () {
    return _createSpan.createSpanFunction;
  }
});
Object.defineProperty(exports, "context", {
  enumerable: true,
  get: function () {
    return _interfaces.context;
  }
});
Object.defineProperty(exports, "getSpan", {
  enumerable: true,
  get: function () {
    return _interfaces.getSpan;
  }
});
Object.defineProperty(exports, "getSpanContext", {
  enumerable: true,
  get: function () {
    return _interfaces.getSpanContext;
  }
});
Object.defineProperty(exports, "setSpan", {
  enumerable: true,
  get: function () {
    return _interfaces.setSpan;
  }
});
Object.defineProperty(exports, "setSpanContext", {
  enumerable: true,
  get: function () {
    return _interfaces.setSpanContext;
  }
});
Object.defineProperty(exports, "SpanKind", {
  enumerable: true,
  get: function () {
    return _interfaces.SpanKind;
  }
});
Object.defineProperty(exports, "SpanStatusCode", {
  enumerable: true,
  get: function () {
    return _interfaces.SpanStatusCode;
  }
});
Object.defineProperty(exports, "extractSpanContextFromTraceParentHeader", {
  enumerable: true,
  get: function () {
    return _traceParentHeader.extractSpanContextFromTraceParentHeader;
  }
});
Object.defineProperty(exports, "getTraceParentHeader", {
  enumerable: true,
  get: function () {
    return _traceParentHeader.getTraceParentHeader;
  }
});

var _tracerProxy = require("./tracerProxy");

var _noOpSpan = require("./tracers/noop/noOpSpan");

var _noOpTracer = require("./tracers/noop/noOpTracer");

var _openCensusSpanWrapper = require("./tracers/opencensus/openCensusSpanWrapper");

var _openCensusTracerWrapper = require("./tracers/opencensus/openCensusTracerWrapper");

var _testTracer = require("./tracers/test/testTracer");

var _testSpan = require("./tracers/test/testSpan");

var _createSpan = require("./createSpan");

var _interfaces = require("./interfaces");

var _traceParentHeader = require("./utils/traceParentHeader");
},{"./tracerProxy":"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/tracerProxy.js","./tracers/noop/noOpSpan":"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/tracers/noop/noOpSpan.js","./tracers/noop/noOpTracer":"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/tracers/noop/noOpTracer.js","./tracers/opencensus/openCensusSpanWrapper":"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/tracers/opencensus/openCensusSpanWrapper.js","./tracers/opencensus/openCensusTracerWrapper":"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/tracers/opencensus/openCensusTracerWrapper.js","./tracers/test/testTracer":"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/tracers/test/testTracer.js","./tracers/test/testSpan":"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/tracers/test/testSpan.js","./createSpan":"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/createSpan.js","./interfaces":"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/interfaces.js","./utils/traceParentHeader":"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/utils/traceParentHeader.js"}],"node_modules/@azure/core-http/es/src/policies/tracingPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tracingPolicy = tracingPolicy;
exports.TracingPolicy = void 0;

var _tslib = require("tslib");

var _coreTracing = require("@azure/core-tracing");

var _requestPolicy = require("./requestPolicy");

var _url = require("../url");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var createSpan = (0, _coreTracing.createSpanFunction)({
  packagePrefix: "",
  namespace: ""
});

function tracingPolicy(tracingOptions) {
  if (tracingOptions === void 0) {
    tracingOptions = {};
  }

  return {
    create: function (nextPolicy, options) {
      return new TracingPolicy(nextPolicy, options, tracingOptions);
    }
  };
}

var TracingPolicy =
/** @class */
function (_super) {
  (0, _tslib.__extends)(TracingPolicy, _super);

  function TracingPolicy(nextPolicy, options, tracingOptions) {
    var _this = _super.call(this, nextPolicy, options) || this;

    _this.userAgent = tracingOptions.userAgent;
    return _this;
  }

  TracingPolicy.prototype.sendRequest = function (request) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var path, span, spanContext, traceParentHeader, traceState, response, serviceRequestId, err_1;
      return (0, _tslib.__generator)(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!request.tracingContext) {
              return [2
              /*return*/
              , this._nextPolicy.sendRequest(request)];
            }

            path = _url.URLBuilder.parse(request.url).getPath() || "/";
            span = createSpan(path, {
              tracingOptions: {
                spanOptions: (0, _tslib.__assign)((0, _tslib.__assign)({}, request.spanOptions), {
                  kind: _coreTracing.SpanKind.CLIENT
                }),
                tracingContext: request.tracingContext
              }
            }).span;
            span.setAttributes({
              "http.method": request.method,
              "http.url": request.url,
              requestId: request.requestId
            });

            if (this.userAgent) {
              span.setAttribute("http.user_agent", this.userAgent);
            }

            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            spanContext = span.context();
            traceParentHeader = (0, _coreTracing.getTraceParentHeader)(spanContext);

            if (traceParentHeader) {
              request.headers.set("traceparent", traceParentHeader);
              traceState = spanContext.traceState && spanContext.traceState.serialize(); // if tracestate is set, traceparent MUST be set, so only set tracestate after traceparent

              if (traceState) {
                request.headers.set("tracestate", traceState);
              }
            }

            return [4
            /*yield*/
            , this._nextPolicy.sendRequest(request)];

          case 2:
            response = _a.sent();
            span.setAttribute("http.status_code", response.status);
            serviceRequestId = response.headers.get("x-ms-request-id");

            if (serviceRequestId) {
              span.setAttribute("serviceRequestId", serviceRequestId);
            }

            span.end();
            return [2
            /*return*/
            , response];

          case 3:
            err_1 = _a.sent();
            span.end();
            throw err_1;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  return TracingPolicy;
}(_requestPolicy.BaseRequestPolicy);

exports.TracingPolicy = TracingPolicy;
},{"tslib":"node_modules/tslib/tslib.es6.js","@azure/core-tracing":"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/index.js","./requestPolicy":"node_modules/@azure/core-http/es/src/policies/requestPolicy.js","../url":"node_modules/@azure/core-http/es/src/url.js"}],"node_modules/@azure/core-http/es/src/policies/disableResponseDecompressionPolicy.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.disableResponseDecompressionPolicy = disableResponseDecompressionPolicy;
exports.DisableResponseDecompressionPolicy = void 0;

var _tslib = require("tslib");

var _requestPolicy = require("./requestPolicy");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/*
 * NOTE: When moving this file, please update "browser" section in package.json
 */
var DisbleResponseDecompressionNotSupportedInBrowser = new Error("DisableResponseDecompressionPolicy is not supported in browser environment");
/**
 * {@link DisableResponseDecompressionPolicy} is not supported in browser and attempting
 * to use it will results in error being thrown.
 */

function disableResponseDecompressionPolicy() {
  return {
    create: function (_nextPolicy, _options) {
      throw DisbleResponseDecompressionNotSupportedInBrowser;
    }
  };
}

var DisableResponseDecompressionPolicy =
/** @class */
function (_super) {
  (0, _tslib.__extends)(DisableResponseDecompressionPolicy, _super);

  function DisableResponseDecompressionPolicy(nextPolicy, options) {
    var _this = _super.call(this, nextPolicy, options) || this;

    throw DisbleResponseDecompressionNotSupportedInBrowser;
    return _this;
  }

  DisableResponseDecompressionPolicy.prototype.sendRequest = function (_request) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      return (0, _tslib.__generator)(this, function (_a) {
        throw DisbleResponseDecompressionNotSupportedInBrowser;
      });
    });
  };

  return DisableResponseDecompressionPolicy;
}(_requestPolicy.BaseRequestPolicy);

exports.DisableResponseDecompressionPolicy = DisableResponseDecompressionPolicy;
},{"tslib":"node_modules/tslib/tslib.es6.js","./requestPolicy":"node_modules/@azure/core-http/es/src/policies/requestPolicy.js"}],"node_modules/@azure/core-http/es/src/policies/ndJsonPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ndJsonPolicy = ndJsonPolicy;

var _tslib = require("tslib");

var _requestPolicy = require("./requestPolicy");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// BaseRequestPolicy has a protected constructor.

/* eslint-disable @typescript-eslint/no-useless-constructor */
function ndJsonPolicy() {
  return {
    create: function (nextPolicy, options) {
      return new NdJsonPolicy(nextPolicy, options);
    }
  };
}
/**
 * NdJsonPolicy that formats a JSON array as newline-delimited JSON
 */


var NdJsonPolicy =
/** @class */
function (_super) {
  (0, _tslib.__extends)(NdJsonPolicy, _super);
  /**
   * Creates an instance of KeepAlivePolicy.
   */

  function NdJsonPolicy(nextPolicy, options) {
    return _super.call(this, nextPolicy, options) || this;
  }
  /**
   * Sends a request.
   */


  NdJsonPolicy.prototype.sendRequest = function (request) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var body;
      return (0, _tslib.__generator)(this, function (_a) {
        // There currently isn't a good way to bypass the serializer
        if (typeof request.body === "string" && request.body.startsWith("[")) {
          body = JSON.parse(request.body);

          if (Array.isArray(body)) {
            request.body = body.map(function (item) {
              return JSON.stringify(item) + "\n";
            }).join("");
          }
        }

        return [2
        /*return*/
        , this._nextPolicy.sendRequest(request)];
      });
    });
  };

  return NdJsonPolicy;
}(_requestPolicy.BaseRequestPolicy);
},{"tslib":"node_modules/tslib/tslib.es6.js","./requestPolicy":"node_modules/@azure/core-http/es/src/policies/requestPolicy.js"}],"node_modules/@azure/core-http/es/src/httpClientCache.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCachedDefaultHttpClient = getCachedDefaultHttpClient;

var _defaultHttpClient = require("./defaultHttpClient");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var cachedHttpClient;

function getCachedDefaultHttpClient() {
  if (!cachedHttpClient) {
    cachedHttpClient = new _defaultHttpClient.DefaultHttpClient();
  }

  return cachedHttpClient;
}
},{"./defaultHttpClient":"node_modules/@azure/core-http/es/src/defaultHttpClient.browser.js"}],"node_modules/@azure/core-http/es/src/serviceClient.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.serializeRequestBody = serializeRequestBody;
exports.createPipelineFromOptions = createPipelineFromOptions;
exports.getPropertyParent = getPropertyParent;
exports.getOperationArgumentValueFromParameterPath = getOperationArgumentValueFromParameterPath;
exports.flattenResponse = flattenResponse;
exports.ServiceClient = void 0;

var _tslib = require("tslib");

var _coreAuth = require("@azure/core-auth");

var _logPolicy = require("./policies/logPolicy");

var _operationParameter = require("./operationParameter");

var _operationSpec = require("./operationSpec");

var _deserializationPolicy = require("./policies/deserializationPolicy");

var _exponentialRetryPolicy = require("./policies/exponentialRetryPolicy");

var _generateClientRequestIdPolicy = require("./policies/generateClientRequestIdPolicy");

var _userAgentPolicy = require("./policies/userAgentPolicy");

var _redirectPolicy = require("./policies/redirectPolicy");

var _requestPolicy = require("./policies/requestPolicy");

var _rpRegistrationPolicy = require("./policies/rpRegistrationPolicy");

var _bearerTokenAuthenticationPolicy = require("./policies/bearerTokenAuthenticationPolicy");

var _systemErrorRetryPolicy = require("./policies/systemErrorRetryPolicy");

var _queryCollectionFormat = require("./queryCollectionFormat");

var _serializer = require("./serializer");

var _url = require("./url");

var utils = _interopRequireWildcard(require("./util/utils"));

var _xml = require("./util/xml");

var _webResource = require("./webResource");

var _proxyPolicy = require("./policies/proxyPolicy");

var _throttlingRetryPolicy = require("./policies/throttlingRetryPolicy");

var _signingPolicy = require("./policies/signingPolicy");

var _log = require("./log");

var _keepAlivePolicy = require("./policies/keepAlivePolicy");

var _tracingPolicy = require("./policies/tracingPolicy");

var _disableResponseDecompressionPolicy = require("./policies/disableResponseDecompressionPolicy");

var _ndJsonPolicy = require("./policies/ndJsonPolicy");

var _serializer2 = require("./util/serializer.common");

var _httpClientCache = require("./httpClientCache");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * ServiceClient sends service requests and receives responses.
 */
var ServiceClient =
/** @class */
function () {
  /**
   * The ServiceClient constructor
   * @param credentials - The credentials used for authentication with the service.
   * @param options - The service client options that govern the behavior of the client.
   */
  function ServiceClient(credentials,
  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */
  options) {
    var _this = this;

    if (!options) {
      options = {};
    }

    this._withCredentials = options.withCredentials || false;
    this._httpClient = options.httpClient || (0, _httpClientCache.getCachedDefaultHttpClient)();
    this._requestPolicyOptions = new _requestPolicy.RequestPolicyOptions(options.httpPipelineLogger);
    var requestPolicyFactories;

    if (Array.isArray(options.requestPolicyFactories)) {
      _log.logger.info("ServiceClient: using custom request policies");

      requestPolicyFactories = options.requestPolicyFactories;
    } else {
      var authPolicyFactory = undefined;

      if ((0, _coreAuth.isTokenCredential)(credentials)) {
        _log.logger.info("ServiceClient: creating bearer token authentication policy from provided credentials"); // Create a wrapped RequestPolicyFactory here so that we can provide the
        // correct scope to the BearerTokenAuthenticationPolicy at the first time
        // one is requested.  This is needed because generated ServiceClient
        // implementations do not set baseUri until after ServiceClient's constructor
        // is finished, leaving baseUri empty at the time when it is needed to
        // build the correct scope name.


        var wrappedPolicyFactory = function () {
          var bearerTokenPolicyFactory = undefined; // eslint-disable-next-line @typescript-eslint/no-this-alias

          var serviceClient = _this;
          var serviceClientOptions = options;
          return {
            create: function (nextPolicy, createOptions) {
              var credentialScopes = getCredentialScopes(serviceClientOptions, serviceClient.baseUri);

              if (!credentialScopes) {
                throw new Error("When using credential, the ServiceClient must contain a baseUri or a credentialScopes in ServiceClientOptions. Unable to create a bearerTokenAuthenticationPolicy");
              }

              if (bearerTokenPolicyFactory === undefined || bearerTokenPolicyFactory === null) {
                bearerTokenPolicyFactory = (0, _bearerTokenAuthenticationPolicy.bearerTokenAuthenticationPolicy)(credentials, credentialScopes);
              }

              return bearerTokenPolicyFactory.create(nextPolicy, createOptions);
            }
          };
        };

        authPolicyFactory = wrappedPolicyFactory();
      } else if (credentials && typeof credentials.signRequest === "function") {
        _log.logger.info("ServiceClient: creating signing policy from provided credentials");

        authPolicyFactory = (0, _signingPolicy.signingPolicy)(credentials);
      } else if (credentials !== undefined && credentials !== null) {
        throw new Error("The credentials argument must implement the TokenCredential interface");
      }

      _log.logger.info("ServiceClient: using default request policies");

      requestPolicyFactories = createDefaultRequestPolicyFactories(authPolicyFactory, options);

      if (options.requestPolicyFactories) {
        // options.requestPolicyFactories can also be a function that manipulates
        // the default requestPolicyFactories array
        var newRequestPolicyFactories = options.requestPolicyFactories(requestPolicyFactories);

        if (newRequestPolicyFactories) {
          requestPolicyFactories = newRequestPolicyFactories;
        }
      }
    }

    this._requestPolicyFactories = requestPolicyFactories;
  }
  /**
   * Send the provided httpRequest.
   */


  ServiceClient.prototype.sendRequest = function (options) {
    if (options === null || options === undefined || typeof options !== "object") {
      throw new Error("options cannot be null or undefined and it must be of type object.");
    }

    var httpRequest;

    try {
      if ((0, _webResource.isWebResourceLike)(options)) {
        options.validateRequestProperties();
        httpRequest = options;
      } else {
        httpRequest = new _webResource.WebResource();
        httpRequest = httpRequest.prepare(options);
      }
    } catch (error) {
      return Promise.reject(error);
    }

    var httpPipeline = this._httpClient;

    if (this._requestPolicyFactories && this._requestPolicyFactories.length > 0) {
      for (var i = this._requestPolicyFactories.length - 1; i >= 0; --i) {
        httpPipeline = this._requestPolicyFactories[i].create(httpPipeline, this._requestPolicyOptions);
      }
    }

    return httpPipeline.sendRequest(httpRequest);
  };
  /**
   * Send an HTTP request that is populated using the provided OperationSpec.
   * @param operationArguments - The arguments that the HTTP request's templated values will be populated from.
   * @param operationSpec - The OperationSpec to use to populate the httpRequest.
   * @param callback - The callback to call when the response is received.
   */


  ServiceClient.prototype.sendOperationRequest = function (operationArguments, operationSpec, callback) {
    var _a;

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var serializerOptions, httpRequest, result, baseUri, requestUrl, _i, _b, urlParameter, urlParameterValue, _c, _d, queryParameter, queryParameterValue, index, item, index, contentType, _e, _f, headerParameter, headerValue, headerCollectionPrefix, _g, _h, key, options, customHeaderName, rawResponse, sendRequestError, error_1, error_2, cb;

      return (0, _tslib.__generator)(this, function (_j) {
        switch (_j.label) {
          case 0:
            if (typeof operationArguments.options === "function") {
              callback = operationArguments.options;
              operationArguments.options = undefined;
            }

            serializerOptions = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.serializerOptions;
            httpRequest = new _webResource.WebResource();
            _j.label = 1;

          case 1:
            _j.trys.push([1, 6,, 7]);

            baseUri = operationSpec.baseUrl || this.baseUri;

            if (!baseUri) {
              throw new Error("If operationSpec.baseUrl is not specified, then the ServiceClient must have a baseUri string property that contains the base URL to use.");
            }

            httpRequest.method = operationSpec.httpMethod;
            httpRequest.operationSpec = operationSpec;
            requestUrl = _url.URLBuilder.parse(baseUri);

            if (operationSpec.path) {
              requestUrl.appendPath(operationSpec.path);
            }

            if (operationSpec.urlParameters && operationSpec.urlParameters.length > 0) {
              for (_i = 0, _b = operationSpec.urlParameters; _i < _b.length; _i++) {
                urlParameter = _b[_i];
                urlParameterValue = getOperationArgumentValueFromParameter(this, operationArguments, urlParameter, operationSpec.serializer);
                urlParameterValue = operationSpec.serializer.serialize(urlParameter.mapper, urlParameterValue, (0, _operationParameter.getPathStringFromParameter)(urlParameter), serializerOptions);

                if (!urlParameter.skipEncoding) {
                  urlParameterValue = encodeURIComponent(urlParameterValue);
                }

                requestUrl.replaceAll("{" + (urlParameter.mapper.serializedName || (0, _operationParameter.getPathStringFromParameter)(urlParameter)) + "}", urlParameterValue);
              }
            }

            if (operationSpec.queryParameters && operationSpec.queryParameters.length > 0) {
              for (_c = 0, _d = operationSpec.queryParameters; _c < _d.length; _c++) {
                queryParameter = _d[_c];
                queryParameterValue = getOperationArgumentValueFromParameter(this, operationArguments, queryParameter, operationSpec.serializer);

                if (queryParameterValue !== undefined && queryParameterValue !== null) {
                  queryParameterValue = operationSpec.serializer.serialize(queryParameter.mapper, queryParameterValue, (0, _operationParameter.getPathStringFromParameter)(queryParameter), serializerOptions);

                  if (queryParameter.collectionFormat !== undefined && queryParameter.collectionFormat !== null) {
                    if (queryParameter.collectionFormat === _queryCollectionFormat.QueryCollectionFormat.Multi) {
                      if (queryParameterValue.length === 0) {
                        // The collection is empty, no need to try serializing the current queryParam
                        continue;
                      } else {
                        for (index in queryParameterValue) {
                          item = queryParameterValue[index];
                          queryParameterValue[index] = item === undefined || item === null ? "" : item.toString();
                        }
                      }
                    } else if (queryParameter.collectionFormat === _queryCollectionFormat.QueryCollectionFormat.Ssv || queryParameter.collectionFormat === _queryCollectionFormat.QueryCollectionFormat.Tsv) {
                      queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);
                    }
                  }

                  if (!queryParameter.skipEncoding) {
                    if (Array.isArray(queryParameterValue)) {
                      for (index in queryParameterValue) {
                        if (queryParameterValue[index] !== undefined && queryParameterValue[index] !== null) {
                          queryParameterValue[index] = encodeURIComponent(queryParameterValue[index]);
                        }
                      }
                    } else {
                      queryParameterValue = encodeURIComponent(queryParameterValue);
                    }
                  }

                  if (queryParameter.collectionFormat !== undefined && queryParameter.collectionFormat !== null && queryParameter.collectionFormat !== _queryCollectionFormat.QueryCollectionFormat.Multi && queryParameter.collectionFormat !== _queryCollectionFormat.QueryCollectionFormat.Ssv && queryParameter.collectionFormat !== _queryCollectionFormat.QueryCollectionFormat.Tsv) {
                    queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);
                  }

                  requestUrl.setQueryParameter(queryParameter.mapper.serializedName || (0, _operationParameter.getPathStringFromParameter)(queryParameter), queryParameterValue);
                }
              }
            }

            httpRequest.url = requestUrl.toString();
            contentType = operationSpec.contentType || this.requestContentType;

            if (contentType && operationSpec.requestBody) {
              httpRequest.headers.set("Content-Type", contentType);
            }

            if (operationSpec.headerParameters) {
              for (_e = 0, _f = operationSpec.headerParameters; _e < _f.length; _e++) {
                headerParameter = _f[_e];
                headerValue = getOperationArgumentValueFromParameter(this, operationArguments, headerParameter, operationSpec.serializer);

                if (headerValue !== undefined && headerValue !== null) {
                  headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, (0, _operationParameter.getPathStringFromParameter)(headerParameter), serializerOptions);
                  headerCollectionPrefix = headerParameter.mapper.headerCollectionPrefix;

                  if (headerCollectionPrefix) {
                    for (_g = 0, _h = Object.keys(headerValue); _g < _h.length; _g++) {
                      key = _h[_g];
                      httpRequest.headers.set(headerCollectionPrefix + key, headerValue[key]);
                    }
                  } else {
                    httpRequest.headers.set(headerParameter.mapper.serializedName || (0, _operationParameter.getPathStringFromParameter)(headerParameter), headerValue);
                  }
                }
              }
            }

            options = operationArguments.options;

            if (options) {
              if (options.customHeaders) {
                for (customHeaderName in options.customHeaders) {
                  httpRequest.headers.set(customHeaderName, options.customHeaders[customHeaderName]);
                }
              }

              if (options.abortSignal) {
                httpRequest.abortSignal = options.abortSignal;
              }

              if (options.timeout) {
                httpRequest.timeout = options.timeout;
              }

              if (options.onUploadProgress) {
                httpRequest.onUploadProgress = options.onUploadProgress;
              }

              if (options.onDownloadProgress) {
                httpRequest.onDownloadProgress = options.onDownloadProgress;
              }

              if (options.spanOptions) {
                httpRequest.spanOptions = options.spanOptions;
              }

              if (options.tracingContext) {
                httpRequest.tracingContext = options.tracingContext;
              }

              if (options.shouldDeserialize !== undefined && options.shouldDeserialize !== null) {
                httpRequest.shouldDeserialize = options.shouldDeserialize;
              }
            }

            httpRequest.withCredentials = this._withCredentials;
            serializeRequestBody(this, httpRequest, operationArguments, operationSpec);

            if (httpRequest.streamResponseStatusCodes === undefined) {
              httpRequest.streamResponseStatusCodes = (0, _operationSpec.getStreamResponseStatusCodes)(operationSpec);
            }

            rawResponse = void 0;
            sendRequestError = void 0;
            _j.label = 2;

          case 2:
            _j.trys.push([2, 4,, 5]);

            return [4
            /*yield*/
            , this.sendRequest(httpRequest)];

          case 3:
            rawResponse = _j.sent();
            return [3
            /*break*/
            , 5];

          case 4:
            error_1 = _j.sent();
            sendRequestError = error_1;
            return [3
            /*break*/
            , 5];

          case 5:
            if (sendRequestError) {
              if (sendRequestError.response) {
                sendRequestError.details = flattenResponse(sendRequestError.response, operationSpec.responses[sendRequestError.statusCode] || operationSpec.responses["default"]);
              }

              result = Promise.reject(sendRequestError);
            } else {
              result = Promise.resolve(flattenResponse(rawResponse, operationSpec.responses[rawResponse.status]));
            }

            return [3
            /*break*/
            , 7];

          case 6:
            error_2 = _j.sent();
            result = Promise.reject(error_2);
            return [3
            /*break*/
            , 7];

          case 7:
            cb = callback;

            if (cb) {
              result.then(function (res) {
                return cb(null, res._response.parsedBody, res._response.request, res._response);
              }).catch(function (err) {
                return cb(err);
              });
            }

            return [2
            /*return*/
            , result];
        }
      });
    });
  };

  return ServiceClient;
}();

exports.ServiceClient = ServiceClient;

function serializeRequestBody(serviceClient, httpRequest, operationArguments, operationSpec) {
  var _a, _b, _c, _d, _e, _f;

  var serializerOptions = (_b = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.serializerOptions) !== null && _b !== void 0 ? _b : {};
  var updatedOptions = {
    rootName: (_c = serializerOptions.rootName) !== null && _c !== void 0 ? _c : "",
    includeRoot: (_d = serializerOptions.includeRoot) !== null && _d !== void 0 ? _d : false,
    xmlCharKey: (_e = serializerOptions.xmlCharKey) !== null && _e !== void 0 ? _e : _serializer2.XML_CHARKEY
  };
  var xmlCharKey = serializerOptions.xmlCharKey;

  if (operationSpec.requestBody && operationSpec.requestBody.mapper) {
    httpRequest.body = getOperationArgumentValueFromParameter(serviceClient, operationArguments, operationSpec.requestBody, operationSpec.serializer);
    var bodyMapper = operationSpec.requestBody.mapper;
    var required = bodyMapper.required,
        xmlName = bodyMapper.xmlName,
        xmlElementName = bodyMapper.xmlElementName,
        serializedName = bodyMapper.serializedName,
        xmlNamespace = bodyMapper.xmlNamespace,
        xmlNamespacePrefix = bodyMapper.xmlNamespacePrefix;
    var typeName = bodyMapper.type.name;

    try {
      if (httpRequest.body !== undefined && httpRequest.body !== null || required) {
        var requestBodyParameterPathString = (0, _operationParameter.getPathStringFromParameter)(operationSpec.requestBody);
        httpRequest.body = operationSpec.serializer.serialize(bodyMapper, httpRequest.body, requestBodyParameterPathString, updatedOptions);
        var isStream = typeName === _serializer.MapperType.Stream;

        if (operationSpec.isXML) {
          var xmlnsKey = xmlNamespacePrefix ? "xmlns:" + xmlNamespacePrefix : "xmlns";
          var value = getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, httpRequest.body, updatedOptions);

          if (typeName === _serializer.MapperType.Sequence) {
            httpRequest.body = (0, _xml.stringifyXML)(utils.prepareXMLRootList(value, xmlElementName || xmlName || serializedName, xmlnsKey, xmlNamespace), {
              rootName: xmlName || serializedName,
              xmlCharKey: xmlCharKey
            });
          } else if (!isStream) {
            httpRequest.body = (0, _xml.stringifyXML)(value, {
              rootName: xmlName || serializedName,
              xmlCharKey: xmlCharKey
            });
          }
        } else if (typeName === _serializer.MapperType.String && (((_f = operationSpec.contentType) === null || _f === void 0 ? void 0 : _f.match("text/plain")) || operationSpec.mediaType === "text")) {
          // the String serializer has validated that request body is a string
          // so just send the string.
          return;
        } else if (!isStream) {
          httpRequest.body = JSON.stringify(httpRequest.body);
        }
      }
    } catch (error) {
      throw new Error("Error \"" + error.message + "\" occurred in serializing the payload - " + JSON.stringify(serializedName, undefined, "  ") + ".");
    }
  } else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {
    httpRequest.formData = {};

    for (var _i = 0, _g = operationSpec.formDataParameters; _i < _g.length; _i++) {
      var formDataParameter = _g[_i];
      var formDataParameterValue = getOperationArgumentValueFromParameter(serviceClient, operationArguments, formDataParameter, operationSpec.serializer);

      if (formDataParameterValue !== undefined && formDataParameterValue !== null) {
        var formDataParameterPropertyName = formDataParameter.mapper.serializedName || (0, _operationParameter.getPathStringFromParameter)(formDataParameter);
        httpRequest.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, (0, _operationParameter.getPathStringFromParameter)(formDataParameter), updatedOptions);
      }
    }
  }
}
/**
 * Adds an xml namespace to the xml serialized object if needed, otherwise it just returns the value itself
 */


function getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, serializedValue, options) {
  var _a; // Composite and Sequence schemas already got their root namespace set during serialization
  // We just need to add xmlns to the other schema types


  if (xmlNamespace && !["Composite", "Sequence", "Dictionary"].includes(typeName)) {
    var result = {};
    result[options.xmlCharKey] = serializedValue;
    result[_serializer2.XML_ATTRKEY] = (_a = {}, _a[xmlnsKey] = xmlNamespace, _a);
    return result;
  }

  return serializedValue;
}

function getValueOrFunctionResult(value, defaultValueCreator) {
  var result;

  if (typeof value === "string") {
    result = value;
  } else {
    result = defaultValueCreator();

    if (typeof value === "function") {
      result = value(result);
    }
  }

  return result;
}

function createDefaultRequestPolicyFactories(authPolicyFactory, options) {
  var factories = [];

  if (options.generateClientRequestIdHeader) {
    factories.push((0, _generateClientRequestIdPolicy.generateClientRequestIdPolicy)(options.clientRequestIdHeaderName));
  }

  if (authPolicyFactory) {
    factories.push(authPolicyFactory);
  }

  var userAgentHeaderName = getValueOrFunctionResult(options.userAgentHeaderName, _userAgentPolicy.getDefaultUserAgentHeaderName);
  var userAgentHeaderValue = getValueOrFunctionResult(options.userAgent, _userAgentPolicy.getDefaultUserAgentValue);

  if (userAgentHeaderName && userAgentHeaderValue) {
    factories.push((0, _userAgentPolicy.userAgentPolicy)({
      key: userAgentHeaderName,
      value: userAgentHeaderValue
    }));
  }

  factories.push((0, _redirectPolicy.redirectPolicy)());
  factories.push((0, _rpRegistrationPolicy.rpRegistrationPolicy)(options.rpRegistrationRetryTimeout));

  if (!options.noRetryPolicy) {
    factories.push((0, _exponentialRetryPolicy.exponentialRetryPolicy)());
    factories.push((0, _systemErrorRetryPolicy.systemErrorRetryPolicy)());
    factories.push((0, _throttlingRetryPolicy.throttlingRetryPolicy)());
  }

  factories.push((0, _deserializationPolicy.deserializationPolicy)(options.deserializationContentTypes));

  if (utils.isNode) {
    factories.push((0, _proxyPolicy.proxyPolicy)(options.proxySettings));
  }

  factories.push((0, _logPolicy.logPolicy)({
    logger: _log.logger.info
  }));
  return factories;
}

function createPipelineFromOptions(pipelineOptions, authPolicyFactory) {
  var requestPolicyFactories = [];

  if (pipelineOptions.sendStreamingJson) {
    requestPolicyFactories.push((0, _ndJsonPolicy.ndJsonPolicy)());
  }

  var userAgentValue = undefined;

  if (pipelineOptions.userAgentOptions && pipelineOptions.userAgentOptions.userAgentPrefix) {
    var userAgentInfo = [];
    userAgentInfo.push(pipelineOptions.userAgentOptions.userAgentPrefix); // Add the default user agent value if it isn't already specified
    // by the userAgentPrefix option.

    var defaultUserAgentInfo = (0, _userAgentPolicy.getDefaultUserAgentValue)();

    if (userAgentInfo.indexOf(defaultUserAgentInfo) === -1) {
      userAgentInfo.push(defaultUserAgentInfo);
    }

    userAgentValue = userAgentInfo.join(" ");
  }

  var keepAliveOptions = (0, _tslib.__assign)((0, _tslib.__assign)({}, _keepAlivePolicy.DefaultKeepAliveOptions), pipelineOptions.keepAliveOptions);
  var retryOptions = (0, _tslib.__assign)((0, _tslib.__assign)({}, _exponentialRetryPolicy.DefaultRetryOptions), pipelineOptions.retryOptions);
  var redirectOptions = (0, _tslib.__assign)((0, _tslib.__assign)({}, _redirectPolicy.DefaultRedirectOptions), pipelineOptions.redirectOptions);

  if (utils.isNode) {
    requestPolicyFactories.push((0, _proxyPolicy.proxyPolicy)(pipelineOptions.proxyOptions));
  }

  var deserializationOptions = (0, _tslib.__assign)((0, _tslib.__assign)({}, _deserializationPolicy.DefaultDeserializationOptions), pipelineOptions.deserializationOptions);
  var loggingOptions = (0, _tslib.__assign)({}, pipelineOptions.loggingOptions);
  requestPolicyFactories.push((0, _tracingPolicy.tracingPolicy)({
    userAgent: userAgentValue
  }), (0, _keepAlivePolicy.keepAlivePolicy)(keepAliveOptions), (0, _userAgentPolicy.userAgentPolicy)({
    value: userAgentValue
  }), (0, _generateClientRequestIdPolicy.generateClientRequestIdPolicy)(), (0, _deserializationPolicy.deserializationPolicy)(deserializationOptions.expectedContentTypes), (0, _throttlingRetryPolicy.throttlingRetryPolicy)(), (0, _systemErrorRetryPolicy.systemErrorRetryPolicy)(), (0, _exponentialRetryPolicy.exponentialRetryPolicy)(retryOptions.maxRetries, retryOptions.retryDelayInMs, retryOptions.maxRetryDelayInMs));

  if (redirectOptions.handleRedirects) {
    requestPolicyFactories.push((0, _redirectPolicy.redirectPolicy)(redirectOptions.maxRetries));
  }

  if (authPolicyFactory) {
    requestPolicyFactories.push(authPolicyFactory);
  }

  requestPolicyFactories.push((0, _logPolicy.logPolicy)(loggingOptions));

  if (utils.isNode && pipelineOptions.decompressResponse === false) {
    requestPolicyFactories.push((0, _disableResponseDecompressionPolicy.disableResponseDecompressionPolicy)());
  }

  return {
    httpClient: pipelineOptions.httpClient,
    requestPolicyFactories: requestPolicyFactories
  };
}
/**
 * Get the property parent for the property at the provided path when starting with the provided
 * parent object.
 */


function getPropertyParent(parent, propertyPath) {
  if (parent && propertyPath) {
    var propertyPathLength = propertyPath.length;

    for (var i = 0; i < propertyPathLength - 1; ++i) {
      var propertyName = propertyPath[i];

      if (!parent[propertyName]) {
        parent[propertyName] = {};
      }

      parent = parent[propertyName];
    }
  }

  return parent;
}

function getOperationArgumentValueFromParameter(serviceClient, operationArguments, parameter, serializer) {
  return getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, parameter.parameterPath, parameter.mapper, serializer);
}

function getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, parameterPath, parameterMapper, serializer) {
  var _a;

  var value;

  if (typeof parameterPath === "string") {
    parameterPath = [parameterPath];
  }

  var serializerOptions = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.serializerOptions;

  if (Array.isArray(parameterPath)) {
    if (parameterPath.length > 0) {
      if (parameterMapper.isConstant) {
        value = parameterMapper.defaultValue;
      } else {
        var propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);

        if (!propertySearchResult.propertyFound) {
          propertySearchResult = getPropertyFromParameterPath(serviceClient, parameterPath);
        }

        var useDefaultValue = false;

        if (!propertySearchResult.propertyFound) {
          useDefaultValue = parameterMapper.required || parameterPath[0] === "options" && parameterPath.length === 2;
        }

        value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;
      } // Serialize just for validation purposes.


      var parameterPathString = (0, _operationParameter.getPathStringFromParameterPath)(parameterPath, parameterMapper);
      serializer.serialize(parameterMapper, value, parameterPathString, serializerOptions);
    }
  } else {
    if (parameterMapper.required) {
      value = {};
    }

    for (var propertyName in parameterPath) {
      var propertyMapper = parameterMapper.type.modelProperties[propertyName];
      var propertyPath = parameterPath[propertyName];
      var propertyValue = getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, propertyPath, propertyMapper, serializer); // Serialize just for validation purposes.

      var propertyPathString = (0, _operationParameter.getPathStringFromParameterPath)(propertyPath, propertyMapper);
      serializer.serialize(propertyMapper, propertyValue, propertyPathString, serializerOptions);

      if (propertyValue !== undefined && propertyValue !== null) {
        if (!value) {
          value = {};
        }

        value[propertyName] = propertyValue;
      }
    }
  }

  return value;
}

function getPropertyFromParameterPath(parent, parameterPath) {
  var result = {
    propertyFound: false
  };
  var i = 0;

  for (; i < parameterPath.length; ++i) {
    var parameterPathPart = parameterPath[i]; // Make sure to check inherited properties too, so don't use hasOwnProperty().

    if (parent !== undefined && parent !== null && parameterPathPart in parent) {
      parent = parent[parameterPathPart];
    } else {
      break;
    }
  }

  if (i === parameterPath.length) {
    result.propertyValue = parent;
    result.propertyFound = true;
  }

  return result;
}

function flattenResponse(_response, responseSpec) {
  var parsedHeaders = _response.parsedHeaders;
  var bodyMapper = responseSpec && responseSpec.bodyMapper;

  var addOperationResponse = function (obj) {
    return Object.defineProperty(obj, "_response", {
      value: _response
    });
  };

  if (bodyMapper) {
    var typeName = bodyMapper.type.name;

    if (typeName === "Stream") {
      return addOperationResponse((0, _tslib.__assign)((0, _tslib.__assign)({}, parsedHeaders), {
        blobBody: _response.blobBody,
        readableStreamBody: _response.readableStreamBody
      }));
    }

    var modelProperties_1 = typeName === "Composite" && bodyMapper.type.modelProperties || {};
    var isPageableResponse = Object.keys(modelProperties_1).some(function (k) {
      return modelProperties_1[k].serializedName === "";
    });

    if (typeName === "Sequence" || isPageableResponse) {
      var arrayResponse = (0, _tslib.__spreadArray)([], _response.parsedBody || []);

      for (var _i = 0, _a = Object.keys(modelProperties_1); _i < _a.length; _i++) {
        var key = _a[_i];

        if (modelProperties_1[key].serializedName) {
          arrayResponse[key] = _response.parsedBody[key];
        }
      }

      if (parsedHeaders) {
        for (var _b = 0, _c = Object.keys(parsedHeaders); _b < _c.length; _b++) {
          var key = _c[_b];
          arrayResponse[key] = parsedHeaders[key];
        }
      }

      addOperationResponse(arrayResponse);
      return arrayResponse;
    }

    if (typeName === "Composite" || typeName === "Dictionary") {
      return addOperationResponse((0, _tslib.__assign)((0, _tslib.__assign)({}, parsedHeaders), _response.parsedBody));
    }
  }

  if (bodyMapper || _response.request.method === "HEAD" || utils.isPrimitiveType(_response.parsedBody)) {
    // primitive body types and HEAD booleans
    return addOperationResponse((0, _tslib.__assign)((0, _tslib.__assign)({}, parsedHeaders), {
      body: _response.parsedBody
    }));
  }

  return addOperationResponse((0, _tslib.__assign)((0, _tslib.__assign)({}, parsedHeaders), _response.parsedBody));
}

function getCredentialScopes(options, baseUri) {
  if (options === null || options === void 0 ? void 0 : options.credentialScopes) {
    var scopes = options.credentialScopes;
    return Array.isArray(scopes) ? scopes.map(function (scope) {
      return new _url.URL(scope).toString();
    }) : new _url.URL(scopes).toString();
  }

  if (baseUri) {
    return baseUri + "/.default";
  }

  return undefined;
}
},{"tslib":"node_modules/tslib/tslib.es6.js","@azure/core-auth":"node_modules/@azure/core-auth/dist-esm/src/index.js","./policies/logPolicy":"node_modules/@azure/core-http/es/src/policies/logPolicy.js","./operationParameter":"node_modules/@azure/core-http/es/src/operationParameter.js","./operationSpec":"node_modules/@azure/core-http/es/src/operationSpec.js","./policies/deserializationPolicy":"node_modules/@azure/core-http/es/src/policies/deserializationPolicy.js","./policies/exponentialRetryPolicy":"node_modules/@azure/core-http/es/src/policies/exponentialRetryPolicy.js","./policies/generateClientRequestIdPolicy":"node_modules/@azure/core-http/es/src/policies/generateClientRequestIdPolicy.js","./policies/userAgentPolicy":"node_modules/@azure/core-http/es/src/policies/userAgentPolicy.js","./policies/redirectPolicy":"node_modules/@azure/core-http/es/src/policies/redirectPolicy.js","./policies/requestPolicy":"node_modules/@azure/core-http/es/src/policies/requestPolicy.js","./policies/rpRegistrationPolicy":"node_modules/@azure/core-http/es/src/policies/rpRegistrationPolicy.js","./policies/bearerTokenAuthenticationPolicy":"node_modules/@azure/core-http/es/src/policies/bearerTokenAuthenticationPolicy.js","./policies/systemErrorRetryPolicy":"node_modules/@azure/core-http/es/src/policies/systemErrorRetryPolicy.js","./queryCollectionFormat":"node_modules/@azure/core-http/es/src/queryCollectionFormat.js","./serializer":"node_modules/@azure/core-http/es/src/serializer.js","./url":"node_modules/@azure/core-http/es/src/url.js","./util/utils":"node_modules/@azure/core-http/es/src/util/utils.js","./util/xml":"node_modules/@azure/core-http/es/src/util/xml.browser.js","./webResource":"node_modules/@azure/core-http/es/src/webResource.js","./policies/proxyPolicy":"node_modules/@azure/core-http/es/src/policies/proxyPolicy.browser.js","./policies/throttlingRetryPolicy":"node_modules/@azure/core-http/es/src/policies/throttlingRetryPolicy.js","./policies/signingPolicy":"node_modules/@azure/core-http/es/src/policies/signingPolicy.js","./log":"node_modules/@azure/core-http/es/src/log.js","./policies/keepAlivePolicy":"node_modules/@azure/core-http/es/src/policies/keepAlivePolicy.js","./policies/tracingPolicy":"node_modules/@azure/core-http/es/src/policies/tracingPolicy.js","./policies/disableResponseDecompressionPolicy":"node_modules/@azure/core-http/es/src/policies/disableResponseDecompressionPolicy.browser.js","./policies/ndJsonPolicy":"node_modules/@azure/core-http/es/src/policies/ndJsonPolicy.js","./util/serializer.common":"node_modules/@azure/core-http/es/src/util/serializer.common.js","./httpClientCache":"node_modules/@azure/core-http/es/src/httpClientCache.js"}],"node_modules/@azure/core-http/es/src/createSpanLegacy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSpanFunction = createSpanFunction;

var _coreTracing = require("@azure/core-tracing");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// NOTE: we've moved this code into core-tracing but these functions
// were a part of the GA'd library and can't be removed until the next major
// release. They currently get called always, even if tracing is not enabled.

/**
 * This function is only here for compatibility. Use createSpanFunction in core-tracing.
 *
 * @deprecated This function is only here for compatibility. Use createSpanFunction in core-tracing.
 * @hidden

 * @param spanConfig - The name of the operation being performed.
 * @param tracingOptions - The options for the underlying http request.
 */
function createSpanFunction(args) {
  return (0, _coreTracing.createSpanFunction)(args);
}
},{"@azure/core-tracing":"node_modules/@azure/core-http/node_modules/@azure/core-tracing/dist-esm/src/index.js"}],"node_modules/@azure/core-http/es/src/credentials/accessTokenCache.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExpiringAccessTokenCache = exports.TokenRefreshBufferMs = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Defines the default token refresh buffer duration.
 */
var TokenRefreshBufferMs = 2 * 60 * 1000; // 2 Minutes

/**
 * Provides an {@link AccessTokenCache} implementation which clears
 * the cached {@link AccessToken}'s after the expiresOnTimestamp has
 * passed.
 *
 * @deprecated No longer used in the bearer authorization policy.
 */

exports.TokenRefreshBufferMs = TokenRefreshBufferMs;

var ExpiringAccessTokenCache =
/** @class */
function () {
  /**
   * Constructs an instance of {@link ExpiringAccessTokenCache} with
   * an optional expiration buffer time.
   */
  function ExpiringAccessTokenCache(tokenRefreshBufferMs) {
    if (tokenRefreshBufferMs === void 0) {
      tokenRefreshBufferMs = TokenRefreshBufferMs;
    }

    this.cachedToken = undefined;
    this.tokenRefreshBufferMs = tokenRefreshBufferMs;
  }

  ExpiringAccessTokenCache.prototype.setCachedToken = function (accessToken) {
    this.cachedToken = accessToken;
  };

  ExpiringAccessTokenCache.prototype.getCachedToken = function () {
    if (this.cachedToken && Date.now() + this.tokenRefreshBufferMs >= this.cachedToken.expiresOnTimestamp) {
      this.cachedToken = undefined;
    }

    return this.cachedToken;
  };

  return ExpiringAccessTokenCache;
}();

exports.ExpiringAccessTokenCache = ExpiringAccessTokenCache;
},{}],"node_modules/@azure/core-http/es/src/credentials/accessTokenRefresher.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccessTokenRefresher = void 0;

var _tslib = require("tslib");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Helps the core-http token authentication policies with requesting a new token if we're not currently waiting for a new token.
 *
 * @deprecated No longer used in the bearer authorization policy.
 */
var AccessTokenRefresher =
/** @class */
function () {
  function AccessTokenRefresher(credential, scopes, requiredMillisecondsBeforeNewRefresh) {
    if (requiredMillisecondsBeforeNewRefresh === void 0) {
      requiredMillisecondsBeforeNewRefresh = 30000;
    }

    this.credential = credential;
    this.scopes = scopes;
    this.requiredMillisecondsBeforeNewRefresh = requiredMillisecondsBeforeNewRefresh;
    this.lastCalled = 0;
  }
  /**
   * Returns true if the required milliseconds(defaulted to 30000) have been passed signifying
   * that we are ready for a new refresh.
   */


  AccessTokenRefresher.prototype.isReady = function () {
    // We're only ready for a new refresh if the required milliseconds have passed.
    return !this.lastCalled || Date.now() - this.lastCalled > this.requiredMillisecondsBeforeNewRefresh;
  };
  /**
   * Stores the time in which it is called,
   * then requests a new token,
   * then sets this.promise to undefined,
   * then returns the token.
   */


  AccessTokenRefresher.prototype.getToken = function (options) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var token;
      return (0, _tslib.__generator)(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.lastCalled = Date.now();
            return [4
            /*yield*/
            , this.credential.getToken(this.scopes, options)];

          case 1:
            token = _a.sent();
            this.promise = undefined;
            return [2
            /*return*/
            , token || undefined];
        }
      });
    });
  };
  /**
   * Requests a new token if we're not currently waiting for a new token.
   * Returns null if the required time between each call hasn't been reached.
   */


  AccessTokenRefresher.prototype.refresh = function (options) {
    if (!this.promise) {
      this.promise = this.getToken(options);
    }

    return this.promise;
  };

  return AccessTokenRefresher;
}();

exports.AccessTokenRefresher = AccessTokenRefresher;
},{"tslib":"node_modules/tslib/tslib.es6.js"}],"node_modules/@azure/core-http/es/src/credentials/basicAuthenticationCredentials.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BasicAuthenticationCredentials = void 0;

var _httpHeaders = require("../httpHeaders");

var base64 = _interopRequireWildcard(require("../util/base64"));

var _constants = require("../util/constants");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var HeaderConstants = _constants.Constants.HeaderConstants;
var DEFAULT_AUTHORIZATION_SCHEME = "Basic";

var BasicAuthenticationCredentials =
/** @class */
function () {
  /**
   * Creates a new BasicAuthenticationCredentials object.
   *
   * @param userName - User name.
   * @param password - Password.
   * @param authorizationScheme - The authorization scheme.
   */
  function BasicAuthenticationCredentials(userName, password, authorizationScheme) {
    if (authorizationScheme === void 0) {
      authorizationScheme = DEFAULT_AUTHORIZATION_SCHEME;
    }

    this.authorizationScheme = DEFAULT_AUTHORIZATION_SCHEME;

    if (userName === null || userName === undefined || typeof userName.valueOf() !== "string") {
      throw new Error("userName cannot be null or undefined and must be of type string.");
    }

    if (password === null || password === undefined || typeof password.valueOf() !== "string") {
      throw new Error("password cannot be null or undefined and must be of type string.");
    }

    this.userName = userName;
    this.password = password;
    this.authorizationScheme = authorizationScheme;
  }
  /**
   * Signs a request with the Authentication header.
   *
   * @param webResource - The WebResourceLike to be signed.
   * @returns The signed request object.
   */


  BasicAuthenticationCredentials.prototype.signRequest = function (webResource) {
    var credentials = this.userName + ":" + this.password;
    var encodedCredentials = this.authorizationScheme + " " + base64.encodeString(credentials);
    if (!webResource.headers) webResource.headers = new _httpHeaders.HttpHeaders();
    webResource.headers.set(HeaderConstants.AUTHORIZATION, encodedCredentials);
    return Promise.resolve(webResource);
  };

  return BasicAuthenticationCredentials;
}();

exports.BasicAuthenticationCredentials = BasicAuthenticationCredentials;
},{"../httpHeaders":"node_modules/@azure/core-http/es/src/httpHeaders.js","../util/base64":"node_modules/@azure/core-http/es/src/util/base64.browser.js","../util/constants":"node_modules/@azure/core-http/es/src/util/constants.js"}],"node_modules/@azure/core-http/es/src/credentials/apiKeyCredentials.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ApiKeyCredentials = void 0;

var _httpHeaders = require("../httpHeaders");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Authenticates to a service using an API key.
 */
var ApiKeyCredentials =
/** @class */
function () {
  /**
   * @param options - Specifies the options to be provided for auth. Either header or query needs to be provided.
   */
  function ApiKeyCredentials(options) {
    if (!options || options && !options.inHeader && !options.inQuery) {
      throw new Error("options cannot be null or undefined. Either \"inHeader\" or \"inQuery\" property of the options object needs to be provided.");
    }

    this.inHeader = options.inHeader;
    this.inQuery = options.inQuery;
  }
  /**
   * Signs a request with the values provided in the inHeader and inQuery parameter.
   *
   * @param webResource - The WebResourceLike to be signed.
   * @returns The signed request object.
   */


  ApiKeyCredentials.prototype.signRequest = function (webResource) {
    if (!webResource) {
      return Promise.reject(new Error("webResource cannot be null or undefined and must be of type \"object\"."));
    }

    if (this.inHeader) {
      if (!webResource.headers) {
        webResource.headers = new _httpHeaders.HttpHeaders();
      }

      for (var headerName in this.inHeader) {
        webResource.headers.set(headerName, this.inHeader[headerName]);
      }
    }

    if (this.inQuery) {
      if (!webResource.url) {
        return Promise.reject(new Error("url cannot be null in the request object."));
      }

      if (webResource.url.indexOf("?") < 0) {
        webResource.url += "?";
      }

      for (var key in this.inQuery) {
        if (!webResource.url.endsWith("?")) {
          webResource.url += "&";
        }

        webResource.url += key + "=" + this.inQuery[key];
      }
    }

    return Promise.resolve(webResource);
  };

  return ApiKeyCredentials;
}();

exports.ApiKeyCredentials = ApiKeyCredentials;
},{"../httpHeaders":"node_modules/@azure/core-http/es/src/httpHeaders.js"}],"node_modules/@azure/core-http/es/src/credentials/topicCredentials.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TopicCredentials = void 0;

var _tslib = require("tslib");

var _apiKeyCredentials = require("./apiKeyCredentials");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var TopicCredentials =
/** @class */
function (_super) {
  (0, _tslib.__extends)(TopicCredentials, _super);
  /**
   * Creates a new EventGrid TopicCredentials object.
   *
   * @param topicKey - The EventGrid topic key
   */

  function TopicCredentials(topicKey) {
    var _this = this;

    if (!topicKey || topicKey && typeof topicKey !== "string") {
      throw new Error("topicKey cannot be null or undefined and must be of type string.");
    }

    var options = {
      inHeader: {
        "aeg-sas-key": topicKey
      }
    };
    _this = _super.call(this, options) || this;
    return _this;
  }

  return TopicCredentials;
}(_apiKeyCredentials.ApiKeyCredentials);

exports.TopicCredentials = TopicCredentials;
},{"tslib":"node_modules/tslib/tslib.es6.js","./apiKeyCredentials":"node_modules/@azure/core-http/es/src/credentials/apiKeyCredentials.js"}],"node_modules/@azure/core-asynciterator-polyfill/dist-esm/index.js":[function(require,module,exports) {
"use strict";
if (typeof Symbol === undefined || !Symbol.asyncIterator) {
    Symbol.asyncIterator = Symbol.for("Symbol.asyncIterator");
}

},{}],"node_modules/@azure/core-http/es/src/coreHttp.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "WebResource", {
  enumerable: true,
  get: function () {
    return _webResource.WebResource;
  }
});
Object.defineProperty(exports, "DefaultHttpClient", {
  enumerable: true,
  get: function () {
    return _defaultHttpClient.DefaultHttpClient;
  }
});
Object.defineProperty(exports, "HttpHeaders", {
  enumerable: true,
  get: function () {
    return _httpHeaders.HttpHeaders;
  }
});
Object.defineProperty(exports, "HttpPipelineLogLevel", {
  enumerable: true,
  get: function () {
    return _httpPipelineLogLevel.HttpPipelineLogLevel;
  }
});
Object.defineProperty(exports, "RestError", {
  enumerable: true,
  get: function () {
    return _restError.RestError;
  }
});
Object.defineProperty(exports, "operationOptionsToRequestOptionsBase", {
  enumerable: true,
  get: function () {
    return _operationOptions.operationOptionsToRequestOptionsBase;
  }
});
Object.defineProperty(exports, "ServiceClient", {
  enumerable: true,
  get: function () {
    return _serviceClient.ServiceClient;
  }
});
Object.defineProperty(exports, "flattenResponse", {
  enumerable: true,
  get: function () {
    return _serviceClient.flattenResponse;
  }
});
Object.defineProperty(exports, "createPipelineFromOptions", {
  enumerable: true,
  get: function () {
    return _serviceClient.createPipelineFromOptions;
  }
});
Object.defineProperty(exports, "QueryCollectionFormat", {
  enumerable: true,
  get: function () {
    return _queryCollectionFormat.QueryCollectionFormat;
  }
});
Object.defineProperty(exports, "Constants", {
  enumerable: true,
  get: function () {
    return _constants.Constants;
  }
});
Object.defineProperty(exports, "bearerTokenAuthenticationPolicy", {
  enumerable: true,
  get: function () {
    return _bearerTokenAuthenticationPolicy.bearerTokenAuthenticationPolicy;
  }
});
Object.defineProperty(exports, "logPolicy", {
  enumerable: true,
  get: function () {
    return _logPolicy.logPolicy;
  }
});
Object.defineProperty(exports, "BaseRequestPolicy", {
  enumerable: true,
  get: function () {
    return _requestPolicy.BaseRequestPolicy;
  }
});
Object.defineProperty(exports, "RequestPolicyOptions", {
  enumerable: true,
  get: function () {
    return _requestPolicy.RequestPolicyOptions;
  }
});
Object.defineProperty(exports, "generateClientRequestIdPolicy", {
  enumerable: true,
  get: function () {
    return _generateClientRequestIdPolicy.generateClientRequestIdPolicy;
  }
});
Object.defineProperty(exports, "exponentialRetryPolicy", {
  enumerable: true,
  get: function () {
    return _exponentialRetryPolicy.exponentialRetryPolicy;
  }
});
Object.defineProperty(exports, "RetryMode", {
  enumerable: true,
  get: function () {
    return _exponentialRetryPolicy.RetryMode;
  }
});
Object.defineProperty(exports, "systemErrorRetryPolicy", {
  enumerable: true,
  get: function () {
    return _systemErrorRetryPolicy.systemErrorRetryPolicy;
  }
});
Object.defineProperty(exports, "throttlingRetryPolicy", {
  enumerable: true,
  get: function () {
    return _throttlingRetryPolicy.throttlingRetryPolicy;
  }
});
Object.defineProperty(exports, "getDefaultProxySettings", {
  enumerable: true,
  get: function () {
    return _proxyPolicy.getDefaultProxySettings;
  }
});
Object.defineProperty(exports, "proxyPolicy", {
  enumerable: true,
  get: function () {
    return _proxyPolicy.proxyPolicy;
  }
});
Object.defineProperty(exports, "redirectPolicy", {
  enumerable: true,
  get: function () {
    return _redirectPolicy.redirectPolicy;
  }
});
Object.defineProperty(exports, "keepAlivePolicy", {
  enumerable: true,
  get: function () {
    return _keepAlivePolicy.keepAlivePolicy;
  }
});
Object.defineProperty(exports, "disableResponseDecompressionPolicy", {
  enumerable: true,
  get: function () {
    return _disableResponseDecompressionPolicy.disableResponseDecompressionPolicy;
  }
});
Object.defineProperty(exports, "signingPolicy", {
  enumerable: true,
  get: function () {
    return _signingPolicy.signingPolicy;
  }
});
Object.defineProperty(exports, "userAgentPolicy", {
  enumerable: true,
  get: function () {
    return _userAgentPolicy.userAgentPolicy;
  }
});
Object.defineProperty(exports, "getDefaultUserAgentValue", {
  enumerable: true,
  get: function () {
    return _userAgentPolicy.getDefaultUserAgentValue;
  }
});
Object.defineProperty(exports, "deserializationPolicy", {
  enumerable: true,
  get: function () {
    return _deserializationPolicy.deserializationPolicy;
  }
});
Object.defineProperty(exports, "deserializeResponseBody", {
  enumerable: true,
  get: function () {
    return _deserializationPolicy.deserializeResponseBody;
  }
});
Object.defineProperty(exports, "tracingPolicy", {
  enumerable: true,
  get: function () {
    return _tracingPolicy.tracingPolicy;
  }
});
Object.defineProperty(exports, "MapperType", {
  enumerable: true,
  get: function () {
    return _serializer.MapperType;
  }
});
Object.defineProperty(exports, "Serializer", {
  enumerable: true,
  get: function () {
    return _serializer.Serializer;
  }
});
Object.defineProperty(exports, "serializeObject", {
  enumerable: true,
  get: function () {
    return _serializer.serializeObject;
  }
});
Object.defineProperty(exports, "stripRequest", {
  enumerable: true,
  get: function () {
    return _utils.stripRequest;
  }
});
Object.defineProperty(exports, "stripResponse", {
  enumerable: true,
  get: function () {
    return _utils.stripResponse;
  }
});
Object.defineProperty(exports, "delay", {
  enumerable: true,
  get: function () {
    return _utils.delay;
  }
});
Object.defineProperty(exports, "executePromisesSequentially", {
  enumerable: true,
  get: function () {
    return _utils.executePromisesSequentially;
  }
});
Object.defineProperty(exports, "generateUuid", {
  enumerable: true,
  get: function () {
    return _utils.generateUuid;
  }
});
Object.defineProperty(exports, "encodeUri", {
  enumerable: true,
  get: function () {
    return _utils.encodeUri;
  }
});
Object.defineProperty(exports, "promiseToCallback", {
  enumerable: true,
  get: function () {
    return _utils.promiseToCallback;
  }
});
Object.defineProperty(exports, "promiseToServiceCallback", {
  enumerable: true,
  get: function () {
    return _utils.promiseToServiceCallback;
  }
});
Object.defineProperty(exports, "isValidUuid", {
  enumerable: true,
  get: function () {
    return _utils.isValidUuid;
  }
});
Object.defineProperty(exports, "applyMixins", {
  enumerable: true,
  get: function () {
    return _utils.applyMixins;
  }
});
Object.defineProperty(exports, "isNode", {
  enumerable: true,
  get: function () {
    return _utils.isNode;
  }
});
Object.defineProperty(exports, "isDuration", {
  enumerable: true,
  get: function () {
    return _utils.isDuration;
  }
});
Object.defineProperty(exports, "URLBuilder", {
  enumerable: true,
  get: function () {
    return _url.URLBuilder;
  }
});
Object.defineProperty(exports, "URLQuery", {
  enumerable: true,
  get: function () {
    return _url.URLQuery;
  }
});
Object.defineProperty(exports, "createSpanFunction", {
  enumerable: true,
  get: function () {
    return _createSpanLegacy.createSpanFunction;
  }
});
Object.defineProperty(exports, "isTokenCredential", {
  enumerable: true,
  get: function () {
    return _coreAuth.isTokenCredential;
  }
});
Object.defineProperty(exports, "ExpiringAccessTokenCache", {
  enumerable: true,
  get: function () {
    return _accessTokenCache.ExpiringAccessTokenCache;
  }
});
Object.defineProperty(exports, "AccessTokenRefresher", {
  enumerable: true,
  get: function () {
    return _accessTokenRefresher.AccessTokenRefresher;
  }
});
Object.defineProperty(exports, "BasicAuthenticationCredentials", {
  enumerable: true,
  get: function () {
    return _basicAuthenticationCredentials.BasicAuthenticationCredentials;
  }
});
Object.defineProperty(exports, "ApiKeyCredentials", {
  enumerable: true,
  get: function () {
    return _apiKeyCredentials.ApiKeyCredentials;
  }
});
Object.defineProperty(exports, "TopicCredentials", {
  enumerable: true,
  get: function () {
    return _topicCredentials.TopicCredentials;
  }
});
Object.defineProperty(exports, "parseXML", {
  enumerable: true,
  get: function () {
    return _xml.parseXML;
  }
});
Object.defineProperty(exports, "stringifyXML", {
  enumerable: true,
  get: function () {
    return _xml.stringifyXML;
  }
});
Object.defineProperty(exports, "XML_ATTRKEY", {
  enumerable: true,
  get: function () {
    return _serializer2.XML_ATTRKEY;
  }
});
Object.defineProperty(exports, "XML_CHARKEY", {
  enumerable: true,
  get: function () {
    return _serializer2.XML_CHARKEY;
  }
});

var _webResource = require("./webResource");

var _defaultHttpClient = require("./defaultHttpClient");

var _httpHeaders = require("./httpHeaders");

var _httpPipelineLogLevel = require("./httpPipelineLogLevel");

var _restError = require("./restError");

var _operationOptions = require("./operationOptions");

var _serviceClient = require("./serviceClient");

var _queryCollectionFormat = require("./queryCollectionFormat");

var _constants = require("./util/constants");

var _bearerTokenAuthenticationPolicy = require("./policies/bearerTokenAuthenticationPolicy");

var _logPolicy = require("./policies/logPolicy");

var _requestPolicy = require("./policies/requestPolicy");

var _generateClientRequestIdPolicy = require("./policies/generateClientRequestIdPolicy");

var _exponentialRetryPolicy = require("./policies/exponentialRetryPolicy");

var _systemErrorRetryPolicy = require("./policies/systemErrorRetryPolicy");

var _throttlingRetryPolicy = require("./policies/throttlingRetryPolicy");

var _proxyPolicy = require("./policies/proxyPolicy");

var _redirectPolicy = require("./policies/redirectPolicy");

var _keepAlivePolicy = require("./policies/keepAlivePolicy");

var _disableResponseDecompressionPolicy = require("./policies/disableResponseDecompressionPolicy");

var _signingPolicy = require("./policies/signingPolicy");

var _userAgentPolicy = require("./policies/userAgentPolicy");

var _deserializationPolicy = require("./policies/deserializationPolicy");

var _tracingPolicy = require("./policies/tracingPolicy");

var _serializer = require("./serializer");

var _utils = require("./util/utils");

var _url = require("./url");

var _createSpanLegacy = require("./createSpanLegacy");

var _coreAuth = require("@azure/core-auth");

var _accessTokenCache = require("./credentials/accessTokenCache");

var _accessTokenRefresher = require("./credentials/accessTokenRefresher");

var _basicAuthenticationCredentials = require("./credentials/basicAuthenticationCredentials");

var _apiKeyCredentials = require("./credentials/apiKeyCredentials");

var _topicCredentials = require("./credentials/topicCredentials");

var _xml = require("./util/xml");

var _serializer2 = require("./util/serializer.common");

require("@azure/core-asynciterator-polyfill");
},{"./webResource":"node_modules/@azure/core-http/es/src/webResource.js","./defaultHttpClient":"node_modules/@azure/core-http/es/src/defaultHttpClient.browser.js","./httpHeaders":"node_modules/@azure/core-http/es/src/httpHeaders.js","./httpPipelineLogLevel":"node_modules/@azure/core-http/es/src/httpPipelineLogLevel.js","./restError":"node_modules/@azure/core-http/es/src/restError.js","./operationOptions":"node_modules/@azure/core-http/es/src/operationOptions.js","./serviceClient":"node_modules/@azure/core-http/es/src/serviceClient.js","./queryCollectionFormat":"node_modules/@azure/core-http/es/src/queryCollectionFormat.js","./util/constants":"node_modules/@azure/core-http/es/src/util/constants.js","./policies/bearerTokenAuthenticationPolicy":"node_modules/@azure/core-http/es/src/policies/bearerTokenAuthenticationPolicy.js","./policies/logPolicy":"node_modules/@azure/core-http/es/src/policies/logPolicy.js","./policies/requestPolicy":"node_modules/@azure/core-http/es/src/policies/requestPolicy.js","./policies/generateClientRequestIdPolicy":"node_modules/@azure/core-http/es/src/policies/generateClientRequestIdPolicy.js","./policies/exponentialRetryPolicy":"node_modules/@azure/core-http/es/src/policies/exponentialRetryPolicy.js","./policies/systemErrorRetryPolicy":"node_modules/@azure/core-http/es/src/policies/systemErrorRetryPolicy.js","./policies/throttlingRetryPolicy":"node_modules/@azure/core-http/es/src/policies/throttlingRetryPolicy.js","./policies/proxyPolicy":"node_modules/@azure/core-http/es/src/policies/proxyPolicy.browser.js","./policies/redirectPolicy":"node_modules/@azure/core-http/es/src/policies/redirectPolicy.js","./policies/keepAlivePolicy":"node_modules/@azure/core-http/es/src/policies/keepAlivePolicy.js","./policies/disableResponseDecompressionPolicy":"node_modules/@azure/core-http/es/src/policies/disableResponseDecompressionPolicy.browser.js","./policies/signingPolicy":"node_modules/@azure/core-http/es/src/policies/signingPolicy.js","./policies/userAgentPolicy":"node_modules/@azure/core-http/es/src/policies/userAgentPolicy.js","./policies/deserializationPolicy":"node_modules/@azure/core-http/es/src/policies/deserializationPolicy.js","./policies/tracingPolicy":"node_modules/@azure/core-http/es/src/policies/tracingPolicy.js","./serializer":"node_modules/@azure/core-http/es/src/serializer.js","./util/utils":"node_modules/@azure/core-http/es/src/util/utils.js","./url":"node_modules/@azure/core-http/es/src/url.js","./createSpanLegacy":"node_modules/@azure/core-http/es/src/createSpanLegacy.js","@azure/core-auth":"node_modules/@azure/core-auth/dist-esm/src/index.js","./credentials/accessTokenCache":"node_modules/@azure/core-http/es/src/credentials/accessTokenCache.js","./credentials/accessTokenRefresher":"node_modules/@azure/core-http/es/src/credentials/accessTokenRefresher.js","./credentials/basicAuthenticationCredentials":"node_modules/@azure/core-http/es/src/credentials/basicAuthenticationCredentials.js","./credentials/apiKeyCredentials":"node_modules/@azure/core-http/es/src/credentials/apiKeyCredentials.js","./credentials/topicCredentials":"node_modules/@azure/core-http/es/src/credentials/topicCredentials.js","./util/xml":"node_modules/@azure/core-http/es/src/util/xml.browser.js","./util/serializer.common":"node_modules/@azure/core-http/es/src/util/serializer.common.js","@azure/core-asynciterator-polyfill":"node_modules/@azure/core-asynciterator-polyfill/dist-esm/index.js"}],"node_modules/@opentelemetry/api/build/src/common/Logger.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/src/common/Time.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/src/context/propagation/getter.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultGetter = void 0;
/**
 * Default getter which just does a simple property access. Returns
 * undefined if the key is not set.
 *
 * @param carrier
 * @param key
 */

function defaultGetter(carrier, key) {
  return carrier[key];
}

exports.defaultGetter = defaultGetter;
},{}],"node_modules/@opentelemetry/api/build/src/context/propagation/HttpTextPropagator.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/src/context/propagation/NoopHttpTextPropagator.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NOOP_HTTP_TEXT_PROPAGATOR = exports.NoopHttpTextPropagator = void 0;
/**
 * No-op implementations of {@link HttpTextPropagator}.
 */

var NoopHttpTextPropagator =
/** @class */
function () {
  function NoopHttpTextPropagator() {}
  /** Noop inject function does nothing */


  NoopHttpTextPropagator.prototype.inject = function (context, carrier, setter) {};
  /** Noop extract function does nothing and returns the input context */


  NoopHttpTextPropagator.prototype.extract = function (context, carrier, getter) {
    return context;
  };

  return NoopHttpTextPropagator;
}();

exports.NoopHttpTextPropagator = NoopHttpTextPropagator;
exports.NOOP_HTTP_TEXT_PROPAGATOR = new NoopHttpTextPropagator();
},{}],"node_modules/@opentelemetry/api/build/src/context/propagation/setter.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultSetter = void 0;
/**
 * Default setter which sets value via direct property access
 *
 * @param carrier
 * @param key
 */

function defaultSetter(carrier, key, value) {
  carrier[key] = value;
}

exports.defaultSetter = defaultSetter;
},{}],"node_modules/@opentelemetry/api/build/src/correlation_context/CorrelationContext.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/src/correlation_context/EntryValue.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EntryTtl = void 0;
/**
 * EntryTtl is an integer that represents number of hops an entry can propagate.
 *
 * For now, ONLY special values (0 and -1) are supported.
 */

var EntryTtl;

(function (EntryTtl) {
  /**
   * NO_PROPAGATION is considered to have local context and is used within the
   * process it created.
   */
  EntryTtl[EntryTtl["NO_PROPAGATION"] = 0] = "NO_PROPAGATION";
  /** UNLIMITED_PROPAGATION can propagate unlimited hops. */

  EntryTtl[EntryTtl["UNLIMITED_PROPAGATION"] = -1] = "UNLIMITED_PROPAGATION";
})(EntryTtl = exports.EntryTtl || (exports.EntryTtl = {}));
},{}],"node_modules/@opentelemetry/api/build/src/metrics/BatchObserverResult.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/src/metrics/BoundInstrument.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/src/metrics/Meter.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/src/metrics/MeterProvider.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/src/metrics/Metric.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValueType = void 0;
/** The Type of value. It describes how the data is reported. */

var ValueType;

(function (ValueType) {
  ValueType[ValueType["INT"] = 0] = "INT";
  ValueType[ValueType["DOUBLE"] = 1] = "DOUBLE";
})(ValueType = exports.ValueType || (exports.ValueType = {}));
},{}],"node_modules/@opentelemetry/api/build/src/metrics/NoopMeter.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var __extends = this && this.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NOOP_BATCH_OBSERVER_METRIC = exports.NOOP_SUM_OBSERVER_METRIC = exports.NOOP_UP_DOWN_SUM_OBSERVER_METRIC = exports.NOOP_VALUE_OBSERVER_METRIC = exports.NOOP_BOUND_BASE_OBSERVER = exports.NOOP_VALUE_RECORDER_METRIC = exports.NOOP_BOUND_VALUE_RECORDER = exports.NOOP_COUNTER_METRIC = exports.NOOP_BOUND_COUNTER = exports.NOOP_METER = exports.NoopBoundBaseObserver = exports.NoopBoundValueRecorder = exports.NoopBoundCounter = exports.NoopBatchObserverMetric = exports.NoopBaseObserverMetric = exports.NoopValueRecorderMetric = exports.NoopCounterMetric = exports.NoopMetric = exports.NoopMeter = void 0;
/**
 * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses
 * constant NoopMetrics for all of its methods.
 */

var NoopMeter =
/** @class */
function () {
  function NoopMeter() {}
  /**
   * Returns constant noop value recorder.
   * @param name the name of the metric.
   * @param [options] the metric options.
   */


  NoopMeter.prototype.createValueRecorder = function (name, options) {
    return exports.NOOP_VALUE_RECORDER_METRIC;
  };
  /**
   * Returns a constant noop counter.
   * @param name the name of the metric.
   * @param [options] the metric options.
   */


  NoopMeter.prototype.createCounter = function (name, options) {
    return exports.NOOP_COUNTER_METRIC;
  };
  /**
   * Returns a constant noop UpDownCounter.
   * @param name the name of the metric.
   * @param [options] the metric options.
   */


  NoopMeter.prototype.createUpDownCounter = function (name, options) {
    return exports.NOOP_COUNTER_METRIC;
  };
  /**
   * Returns constant noop value observer.
   * @param name the name of the metric.
   * @param [options] the metric options.
   * @param [callback] the value observer callback
   */


  NoopMeter.prototype.createValueObserver = function (name, options, callback) {
    return exports.NOOP_VALUE_OBSERVER_METRIC;
  };
  /**
   * Returns constant noop batch observer.
   * @param name the name of the metric.
   * @param callback the batch observer callback
   */


  NoopMeter.prototype.createBatchObserver = function (name, callback) {
    return exports.NOOP_BATCH_OBSERVER_METRIC;
  };

  return NoopMeter;
}();

exports.NoopMeter = NoopMeter;

var NoopMetric =
/** @class */
function () {
  function NoopMetric(instrument) {
    this._instrument = instrument;
  }
  /**
   * Returns a Bound Instrument associated with specified Labels.
   * It is recommended to keep a reference to the Bound Instrument instead of
   * always calling this method for every operations.
   * @param labels key-values pairs that are associated with a specific metric
   *     that you want to record.
   */


  NoopMetric.prototype.bind = function (labels) {
    return this._instrument;
  };
  /**
   * Removes the Binding from the metric, if it is present.
   * @param labels key-values pairs that are associated with a specific metric.
   */


  NoopMetric.prototype.unbind = function (labels) {
    return;
  };
  /**
   * Clears all timeseries from the Metric.
   */


  NoopMetric.prototype.clear = function () {
    return;
  };

  return NoopMetric;
}();

exports.NoopMetric = NoopMetric;

var NoopCounterMetric =
/** @class */
function (_super) {
  __extends(NoopCounterMetric, _super);

  function NoopCounterMetric() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  NoopCounterMetric.prototype.add = function (value, labels) {
    this.bind(labels).add(value);
  };

  return NoopCounterMetric;
}(NoopMetric);

exports.NoopCounterMetric = NoopCounterMetric;

var NoopValueRecorderMetric =
/** @class */
function (_super) {
  __extends(NoopValueRecorderMetric, _super);

  function NoopValueRecorderMetric() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  NoopValueRecorderMetric.prototype.record = function (value, labels, correlationContext, spanContext) {
    if (typeof correlationContext === 'undefined') {
      this.bind(labels).record(value);
    } else if (typeof spanContext === 'undefined') {
      this.bind(labels).record(value, correlationContext);
    } else {
      this.bind(labels).record(value, correlationContext, spanContext);
    }
  };

  return NoopValueRecorderMetric;
}(NoopMetric);

exports.NoopValueRecorderMetric = NoopValueRecorderMetric;

var NoopBaseObserverMetric =
/** @class */
function (_super) {
  __extends(NoopBaseObserverMetric, _super);

  function NoopBaseObserverMetric() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  NoopBaseObserverMetric.prototype.observation = function () {
    return {
      observer: this,
      value: 0
    };
  };

  return NoopBaseObserverMetric;
}(NoopMetric);

exports.NoopBaseObserverMetric = NoopBaseObserverMetric;

var NoopBatchObserverMetric =
/** @class */
function (_super) {
  __extends(NoopBatchObserverMetric, _super);

  function NoopBatchObserverMetric() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  return NoopBatchObserverMetric;
}(NoopMetric);

exports.NoopBatchObserverMetric = NoopBatchObserverMetric;

var NoopBoundCounter =
/** @class */
function () {
  function NoopBoundCounter() {}

  NoopBoundCounter.prototype.add = function (value) {
    return;
  };

  return NoopBoundCounter;
}();

exports.NoopBoundCounter = NoopBoundCounter;

var NoopBoundValueRecorder =
/** @class */
function () {
  function NoopBoundValueRecorder() {}

  NoopBoundValueRecorder.prototype.record = function (value, correlationContext, spanContext) {
    return;
  };

  return NoopBoundValueRecorder;
}();

exports.NoopBoundValueRecorder = NoopBoundValueRecorder;

var NoopBoundBaseObserver =
/** @class */
function () {
  function NoopBoundBaseObserver() {}

  NoopBoundBaseObserver.prototype.update = function (value) {};

  return NoopBoundBaseObserver;
}();

exports.NoopBoundBaseObserver = NoopBoundBaseObserver;
exports.NOOP_METER = new NoopMeter();
exports.NOOP_BOUND_COUNTER = new NoopBoundCounter();
exports.NOOP_COUNTER_METRIC = new NoopCounterMetric(exports.NOOP_BOUND_COUNTER);
exports.NOOP_BOUND_VALUE_RECORDER = new NoopBoundValueRecorder();
exports.NOOP_VALUE_RECORDER_METRIC = new NoopValueRecorderMetric(exports.NOOP_BOUND_VALUE_RECORDER);
exports.NOOP_BOUND_BASE_OBSERVER = new NoopBoundBaseObserver();
exports.NOOP_VALUE_OBSERVER_METRIC = new NoopBaseObserverMetric(exports.NOOP_BOUND_BASE_OBSERVER);
exports.NOOP_UP_DOWN_SUM_OBSERVER_METRIC = new NoopBaseObserverMetric(exports.NOOP_BOUND_BASE_OBSERVER);
exports.NOOP_SUM_OBSERVER_METRIC = new NoopBaseObserverMetric(exports.NOOP_BOUND_BASE_OBSERVER);
exports.NOOP_BATCH_OBSERVER_METRIC = new NoopBatchObserverMetric();
},{}],"node_modules/@opentelemetry/api/build/src/metrics/NoopMeterProvider.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NOOP_METER_PROVIDER = exports.NoopMeterProvider = void 0;

var NoopMeter_1 = require("./NoopMeter");
/**
 * An implementation of the {@link MeterProvider} which returns an impotent Meter
 * for all calls to `getMeter`
 */


var NoopMeterProvider =
/** @class */
function () {
  function NoopMeterProvider() {}

  NoopMeterProvider.prototype.getMeter = function (_name, _version) {
    return NoopMeter_1.NOOP_METER;
  };

  return NoopMeterProvider;
}();

exports.NoopMeterProvider = NoopMeterProvider;
exports.NOOP_METER_PROVIDER = new NoopMeterProvider();
},{"./NoopMeter":"node_modules/@opentelemetry/api/build/src/metrics/NoopMeter.js"}],"node_modules/@opentelemetry/api/build/src/metrics/Observation.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/src/metrics/ObserverResult.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/src/trace/attributes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/src/trace/Event.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/src/trace/instrumentation/Plugin.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/src/trace/link_context.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/src/trace/link.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TraceFlags = void 0;
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var TraceFlags;

(function (TraceFlags) {
  /** Represents no flag set. */
  TraceFlags[TraceFlags["NONE"] = 0] = "NONE";
  /** Bit to represent whether trace is sampled in trace flags. */

  TraceFlags[TraceFlags["SAMPLED"] = 1] = "SAMPLED";
})(TraceFlags = exports.TraceFlags || (exports.TraceFlags = {}));
},{}],"node_modules/@opentelemetry/api/build/src/trace/NoopSpan.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NOOP_SPAN = exports.NoopSpan = exports.INVALID_SPAN_ID = exports.INVALID_TRACE_ID = void 0;

var trace_flags_1 = require("./trace_flags");

exports.INVALID_TRACE_ID = '0';
exports.INVALID_SPAN_ID = '0';
var INVALID_SPAN_CONTEXT = {
  traceId: exports.INVALID_TRACE_ID,
  spanId: exports.INVALID_SPAN_ID,
  traceFlags: trace_flags_1.TraceFlags.NONE
};
/**
 * The NoopSpan is the default {@link Span} that is used when no Span
 * implementation is available. All operations are no-op including context
 * propagation.
 */

var NoopSpan =
/** @class */
function () {
  function NoopSpan(_spanContext) {
    if (_spanContext === void 0) {
      _spanContext = INVALID_SPAN_CONTEXT;
    }

    this._spanContext = _spanContext;
  } // Returns a SpanContext.


  NoopSpan.prototype.context = function () {
    return this._spanContext;
  }; // By default does nothing


  NoopSpan.prototype.setAttribute = function (key, value) {
    return this;
  }; // By default does nothing


  NoopSpan.prototype.setAttributes = function (attributes) {
    return this;
  }; // By default does nothing


  NoopSpan.prototype.addEvent = function (name, attributes) {
    return this;
  }; // By default does nothing


  NoopSpan.prototype.setStatus = function (status) {
    return this;
  }; // By default does nothing


  NoopSpan.prototype.updateName = function (name) {
    return this;
  }; // By default does nothing


  NoopSpan.prototype.end = function (endTime) {}; // isRecording always returns false for noopSpan.


  NoopSpan.prototype.isRecording = function () {
    return false;
  };

  return NoopSpan;
}();

exports.NoopSpan = NoopSpan;
exports.NOOP_SPAN = new NoopSpan();
},{"./trace_flags":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js"}],"node_modules/@opentelemetry/api/build/src/trace/NoopTracer.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NOOP_TRACER = exports.NoopTracer = void 0;

var NoopSpan_1 = require("./NoopSpan");
/**
 * No-op implementations of {@link Tracer}.
 */


var NoopTracer =
/** @class */
function () {
  function NoopTracer() {}

  NoopTracer.prototype.getCurrentSpan = function () {
    return NoopSpan_1.NOOP_SPAN;
  }; // startSpan starts a noop span.


  NoopTracer.prototype.startSpan = function (name, options) {
    return NoopSpan_1.NOOP_SPAN;
  };

  NoopTracer.prototype.withSpan = function (span, fn) {
    return fn();
  };

  NoopTracer.prototype.bind = function (target, span) {
    return target;
  };

  return NoopTracer;
}();

exports.NoopTracer = NoopTracer;
exports.NOOP_TRACER = new NoopTracer();
},{"./NoopSpan":"node_modules/@opentelemetry/api/build/src/trace/NoopSpan.js"}],"node_modules/@opentelemetry/api/build/src/trace/NoopTracerProvider.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NOOP_TRACER_PROVIDER = exports.NoopTracerProvider = void 0;

var NoopTracer_1 = require("./NoopTracer");
/**
 * An implementation of the {@link TracerProvider} which returns an impotent
 * Tracer for all calls to `getTracer`.
 *
 * All operations are no-op.
 */


var NoopTracerProvider =
/** @class */
function () {
  function NoopTracerProvider() {}

  NoopTracerProvider.prototype.getTracer = function (_name, _version) {
    return NoopTracer_1.NOOP_TRACER;
  };

  return NoopTracerProvider;
}();

exports.NoopTracerProvider = NoopTracerProvider;
exports.NOOP_TRACER_PROVIDER = new NoopTracerProvider();
},{"./NoopTracer":"node_modules/@opentelemetry/api/build/src/trace/NoopTracer.js"}],"node_modules/@opentelemetry/api/build/src/trace/Sampler.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/src/trace/SamplingResult.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SamplingDecision = void 0;
/**
 * A sampling decision that determines how a {@link Span} will be recorded
 * and collected.
 */

var SamplingDecision;

(function (SamplingDecision) {
  /**
   * `Span.isRecording() === false`, span will not be recorded and all events
   * and attributes will be dropped.
   */
  SamplingDecision[SamplingDecision["NOT_RECORD"] = 0] = "NOT_RECORD";
  /**
   * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}
   * MUST NOT be set.
   */

  SamplingDecision[SamplingDecision["RECORD"] = 1] = "RECORD";
  /**
   * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}
   * MUST be set.
   */

  SamplingDecision[SamplingDecision["RECORD_AND_SAMPLED"] = 2] = "RECORD_AND_SAMPLED";
})(SamplingDecision = exports.SamplingDecision || (exports.SamplingDecision = {}));
},{}],"node_modules/@opentelemetry/api/build/src/trace/span_context.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/src/trace/span_kind.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SpanKind = void 0;
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var SpanKind;

(function (SpanKind) {
  /** Default value. Indicates that the span is used internally. */
  SpanKind[SpanKind["INTERNAL"] = 0] = "INTERNAL";
  /**
   * Indicates that the span covers server-side handling of an RPC or other
   * remote request.
   */

  SpanKind[SpanKind["SERVER"] = 1] = "SERVER";
  /**
   * Indicates that the span covers the client-side wrapper around an RPC or
   * other remote request.
   */

  SpanKind[SpanKind["CLIENT"] = 2] = "CLIENT";
  /**
   * Indicates that the span describes producer sending a message to a
   * broker. Unlike client and server, there is no direct critical path latency
   * relationship between producer and consumer spans.
   */

  SpanKind[SpanKind["PRODUCER"] = 3] = "PRODUCER";
  /**
   * Indicates that the span describes consumer receiving a message from a
   * broker. Unlike client and server, there is no direct critical path latency
   * relationship between producer and consumer spans.
   */

  SpanKind[SpanKind["CONSUMER"] = 4] = "CONSUMER";
})(SpanKind = exports.SpanKind || (exports.SpanKind = {}));
},{}],"node_modules/@opentelemetry/api/build/src/trace/span.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/src/trace/SpanOptions.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/src/trace/status.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CanonicalCode = void 0;
/**
 * An enumeration of canonical status codes.
 */

var CanonicalCode;

(function (CanonicalCode) {
  /**
   * Not an error; returned on success
   */
  CanonicalCode[CanonicalCode["OK"] = 0] = "OK";
  /**
   * The operation was cancelled (typically by the caller).
   */

  CanonicalCode[CanonicalCode["CANCELLED"] = 1] = "CANCELLED";
  /**
   * Unknown error.  An example of where this error may be returned is
   * if a status value received from another address space belongs to
   * an error-space that is not known in this address space.  Also
   * errors raised by APIs that do not return enough error information
   * may be converted to this error.
   */

  CanonicalCode[CanonicalCode["UNKNOWN"] = 2] = "UNKNOWN";
  /**
   * Client specified an invalid argument.  Note that this differs
   * from FAILED_PRECONDITION.  INVALID_ARGUMENT indicates arguments
   * that are problematic regardless of the state of the system
   * (e.g., a malformed file name).
   */

  CanonicalCode[CanonicalCode["INVALID_ARGUMENT"] = 3] = "INVALID_ARGUMENT";
  /**
   * Deadline expired before operation could complete.  For operations
   * that change the state of the system, this error may be returned
   * even if the operation has completed successfully.  For example, a
   * successful response from a server could have been delayed long
   * enough for the deadline to expire.
   */

  CanonicalCode[CanonicalCode["DEADLINE_EXCEEDED"] = 4] = "DEADLINE_EXCEEDED";
  /**
   * Some requested entity (e.g., file or directory) was not found.
   */

  CanonicalCode[CanonicalCode["NOT_FOUND"] = 5] = "NOT_FOUND";
  /**
   * Some entity that we attempted to create (e.g., file or directory)
   * already exists.
   */

  CanonicalCode[CanonicalCode["ALREADY_EXISTS"] = 6] = "ALREADY_EXISTS";
  /**
   * The caller does not have permission to execute the specified
   * operation.  PERMISSION_DENIED must not be used for rejections
   * caused by exhausting some resource (use RESOURCE_EXHAUSTED
   * instead for those errors).  PERMISSION_DENIED must not be
   * used if the caller can not be identified (use UNAUTHENTICATED
   * instead for those errors).
   */

  CanonicalCode[CanonicalCode["PERMISSION_DENIED"] = 7] = "PERMISSION_DENIED";
  /**
   * Some resource has been exhausted, perhaps a per-user quota, or
   * perhaps the entire file system is out of space.
   */

  CanonicalCode[CanonicalCode["RESOURCE_EXHAUSTED"] = 8] = "RESOURCE_EXHAUSTED";
  /**
   * Operation was rejected because the system is not in a state
   * required for the operation's execution.  For example, directory
   * to be deleted may be non-empty, an rmdir operation is applied to
   * a non-directory, etc.
   *
   * A litmus test that may help a service implementor in deciding
   * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
   *
   *  - Use UNAVAILABLE if the client can retry just the failing call.
   *  - Use ABORTED if the client should retry at a higher-level
   *    (e.g., restarting a read-modify-write sequence).
   *  - Use FAILED_PRECONDITION if the client should not retry until
   *    the system state has been explicitly fixed.  E.g., if an "rmdir"
   *    fails because the directory is non-empty, FAILED_PRECONDITION
   *    should be returned since the client should not retry unless
   *    they have first fixed up the directory by deleting files from it.
   *  - Use FAILED_PRECONDITION if the client performs conditional
   *    REST Get/Update/Delete on a resource and the resource on the
   *    server does not match the condition. E.g., conflicting
   *    read-modify-write on the same resource.
   */

  CanonicalCode[CanonicalCode["FAILED_PRECONDITION"] = 9] = "FAILED_PRECONDITION";
  /**
   * The operation was aborted, typically due to a concurrency issue
   * like sequencer check failures, transaction aborts, etc.
   *
   * See litmus test above for deciding between FAILED_PRECONDITION,
   * ABORTED, and UNAVAILABLE.
   */

  CanonicalCode[CanonicalCode["ABORTED"] = 10] = "ABORTED";
  /**
   * Operation was attempted past the valid range.  E.g., seeking or
   * reading past end of file.
   *
   * Unlike INVALID_ARGUMENT, this error indicates a problem that may
   * be fixed if the system state changes. For example, a 32-bit file
   * system will generate INVALID_ARGUMENT if asked to read at an
   * offset that is not in the range [0,2^32-1], but it will generate
   * OUT_OF_RANGE if asked to read from an offset past the current
   * file size.
   *
   * There is a fair bit of overlap between FAILED_PRECONDITION and
   * OUT_OF_RANGE.  We recommend using OUT_OF_RANGE (the more specific
   * error) when it applies so that callers who are iterating through
   * a space can easily look for an OUT_OF_RANGE error to detect when
   * they are done.
   */

  CanonicalCode[CanonicalCode["OUT_OF_RANGE"] = 11] = "OUT_OF_RANGE";
  /**
   * Operation is not implemented or not supported/enabled in this service.
   */

  CanonicalCode[CanonicalCode["UNIMPLEMENTED"] = 12] = "UNIMPLEMENTED";
  /**
   * Internal errors.  Means some invariants expected by underlying
   * system has been broken.  If you see one of these errors,
   * something is very broken.
   */

  CanonicalCode[CanonicalCode["INTERNAL"] = 13] = "INTERNAL";
  /**
   * The service is currently unavailable.  This is a most likely a
   * transient condition and may be corrected by retrying with
   * a backoff.
   *
   * See litmus test above for deciding between FAILED_PRECONDITION,
   * ABORTED, and UNAVAILABLE.
   */

  CanonicalCode[CanonicalCode["UNAVAILABLE"] = 14] = "UNAVAILABLE";
  /**
   * Unrecoverable data loss or corruption.
   */

  CanonicalCode[CanonicalCode["DATA_LOSS"] = 15] = "DATA_LOSS";
  /**
   * The request does not have valid authentication credentials for the
   * operation.
   */

  CanonicalCode[CanonicalCode["UNAUTHENTICATED"] = 16] = "UNAUTHENTICATED";
})(CanonicalCode = exports.CanonicalCode || (exports.CanonicalCode = {}));
},{}],"node_modules/@opentelemetry/api/build/src/trace/TimedEvent.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/src/trace/trace_state.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/src/trace/tracer_provider.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/api/build/src/trace/tracer.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/context-base/build/src/types.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@opentelemetry/context-base/build/src/context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Context = void 0;
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Context =
/** @class */
function () {
  /**
   * Construct a new context which inherits values from an optional parent context.
   *
   * @param parentContext a context from which to inherit values
   */
  function Context(parentContext) {
    this._currentContext = parentContext ? new Map(parentContext) : new Map();
  }
  /** Get a key to uniquely identify a context value */


  Context.createKey = function (description) {
    return Symbol(description);
  };
  /**
   * Get a value from the context.
   *
   * @param key key which identifies a context value
   */


  Context.prototype.getValue = function (key) {
    return this._currentContext.get(key);
  };
  /**
   * Create a new context which inherits from this context and has
   * the given key set to the given value.
   *
   * @param key context key for which to set the value
   * @param value value to set for the given key
   */


  Context.prototype.setValue = function (key, value) {
    var context = new Context(this._currentContext);

    context._currentContext.set(key, value);

    return context;
  };
  /**
   * Return a new context which inherits from this context but does
   * not contain a value for the given key.
   *
   * @param key context key for which to clear a value
   */


  Context.prototype.deleteValue = function (key) {
    var context = new Context(this._currentContext);

    context._currentContext.delete(key);

    return context;
  };
  /** The root context is used as the default parent context when there is no active context */


  Context.ROOT_CONTEXT = new Context();
  /**
   * This is another identifier to the root context which allows developers to easily search the
   * codebase for direct uses of context which need to be removed in later PRs.
   *
   * It's existence is temporary and it should be removed when all references are fixed.
   */

  Context.TODO = Context.ROOT_CONTEXT;
  return Context;
}();

exports.Context = Context;
},{}],"node_modules/@opentelemetry/context-base/build/src/NoopContextManager.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoopContextManager = void 0;

var context_1 = require("./context");

var NoopContextManager =
/** @class */
function () {
  function NoopContextManager() {}

  NoopContextManager.prototype.active = function () {
    return context_1.Context.ROOT_CONTEXT;
  };

  NoopContextManager.prototype.with = function (context, fn) {
    return fn();
  };

  NoopContextManager.prototype.bind = function (target, context) {
    return target;
  };

  NoopContextManager.prototype.enable = function () {
    return this;
  };

  NoopContextManager.prototype.disable = function () {
    return this;
  };

  return NoopContextManager;
}();

exports.NoopContextManager = NoopContextManager;
},{"./context":"node_modules/@opentelemetry/context-base/build/src/context.js"}],"node_modules/@opentelemetry/context-base/build/src/index.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function () {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __exportStar = this && this.__exportStar || function (m, exports) {
  for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

__exportStar(require("./types"), exports);

__exportStar(require("./context"), exports);

__exportStar(require("./NoopContextManager"), exports);
},{"./types":"node_modules/@opentelemetry/context-base/build/src/types.js","./context":"node_modules/@opentelemetry/context-base/build/src/context.js","./NoopContextManager":"node_modules/@opentelemetry/context-base/build/src/NoopContextManager.js"}],"node_modules/@opentelemetry/api/build/src/platform/browser/globalThis.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._globalThis = void 0;
/** only globals that common to node and browsers are allowed */
// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef

exports._globalThis = typeof globalThis === 'object' ? globalThis : window;
},{}],"node_modules/@opentelemetry/api/build/src/platform/browser/index.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function () {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __exportStar = this && this.__exportStar || function (m, exports) {
  for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

__exportStar(require("./globalThis"), exports);
},{"./globalThis":"node_modules/@opentelemetry/api/build/src/platform/browser/globalThis.js"}],"node_modules/@opentelemetry/api/build/src/api/global-utils.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.API_BACKWARDS_COMPATIBILITY_VERSION = exports.makeGetter = exports._global = exports.GLOBAL_TRACE_API_KEY = exports.GLOBAL_PROPAGATION_API_KEY = exports.GLOBAL_METRICS_API_KEY = exports.GLOBAL_CONTEXT_MANAGER_API_KEY = void 0;

var platform_1 = require("../platform");

exports.GLOBAL_CONTEXT_MANAGER_API_KEY = Symbol.for('io.opentelemetry.js.api.context');
exports.GLOBAL_METRICS_API_KEY = Symbol.for('io.opentelemetry.js.api.metrics');
exports.GLOBAL_PROPAGATION_API_KEY = Symbol.for('io.opentelemetry.js.api.propagation');
exports.GLOBAL_TRACE_API_KEY = Symbol.for('io.opentelemetry.js.api.trace');
exports._global = platform_1._globalThis;
/**
 * Make a function which accepts a version integer and returns the instance of an API if the version
 * is compatible, or a fallback version (usually NOOP) if it is not.
 *
 * @param requiredVersion Backwards compatibility version which is required to return the instance
 * @param instance Instance which should be returned if the required version is compatible
 * @param fallback Fallback instance, usually NOOP, which will be returned if the required version is not compatible
 */

function makeGetter(requiredVersion, instance, fallback) {
  return function (version) {
    return version === requiredVersion ? instance : fallback;
  };
}

exports.makeGetter = makeGetter;
/**
 * A number which should be incremented each time a backwards incompatible
 * change is made to the API. This number is used when an API package
 * attempts to access the global API to ensure it is getting a compatible
 * version. If the global API is not compatible with the API package
 * attempting to get it, a NOOP API implementation will be returned.
 */

exports.API_BACKWARDS_COMPATIBILITY_VERSION = 0;
},{"../platform":"node_modules/@opentelemetry/api/build/src/platform/browser/index.js"}],"node_modules/@opentelemetry/api/build/src/api/context.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContextAPI = void 0;

var context_base_1 = require("@opentelemetry/context-base");

var global_utils_1 = require("./global-utils");

var NOOP_CONTEXT_MANAGER = new context_base_1.NoopContextManager();
/**
 * Singleton object which represents the entry point to the OpenTelemetry Context API
 */

var ContextAPI =
/** @class */
function () {
  /** Empty private constructor prevents end users from constructing a new instance of the API */
  function ContextAPI() {}
  /** Get the singleton instance of the Context API */


  ContextAPI.getInstance = function () {
    if (!this._instance) {
      this._instance = new ContextAPI();
    }

    return this._instance;
  };
  /**
   * Set the current context manager. Returns the initialized context manager
   */


  ContextAPI.prototype.setGlobalContextManager = function (contextManager) {
    if (global_utils_1._global[global_utils_1.GLOBAL_CONTEXT_MANAGER_API_KEY]) {
      // global context manager has already been set
      return this._getContextManager();
    }

    global_utils_1._global[global_utils_1.GLOBAL_CONTEXT_MANAGER_API_KEY] = global_utils_1.makeGetter(global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION, contextManager, NOOP_CONTEXT_MANAGER);
    return contextManager;
  };
  /**
   * Get the currently active context
   */


  ContextAPI.prototype.active = function () {
    return this._getContextManager().active();
  };
  /**
   * Execute a function with an active context
   *
   * @param context context to be active during function execution
   * @param fn function to execute in a context
   */


  ContextAPI.prototype.with = function (context, fn) {
    return this._getContextManager().with(context, fn);
  };
  /**
   * Bind a context to a target function or event emitter
   *
   * @param target function or event emitter to bind
   * @param context context to bind to the event emitter or function. Defaults to the currently active context
   */


  ContextAPI.prototype.bind = function (target, context) {
    if (context === void 0) {
      context = this.active();
    }

    return this._getContextManager().bind(target, context);
  };

  ContextAPI.prototype._getContextManager = function () {
    var _a, _b;

    return (_b = (_a = global_utils_1._global[global_utils_1.GLOBAL_CONTEXT_MANAGER_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(global_utils_1._global, global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NOOP_CONTEXT_MANAGER;
  };
  /** Disable and remove the global context manager */


  ContextAPI.prototype.disable = function () {
    this._getContextManager().disable();

    delete global_utils_1._global[global_utils_1.GLOBAL_CONTEXT_MANAGER_API_KEY];
  };

  return ContextAPI;
}();

exports.ContextAPI = ContextAPI;
},{"@opentelemetry/context-base":"node_modules/@opentelemetry/context-base/build/src/index.js","./global-utils":"node_modules/@opentelemetry/api/build/src/api/global-utils.js"}],"node_modules/@opentelemetry/api/build/src/api/trace.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TraceAPI = void 0;

var NoopTracerProvider_1 = require("../trace/NoopTracerProvider");

var global_utils_1 = require("./global-utils");
/**
 * Singleton object which represents the entry point to the OpenTelemetry Tracing API
 */


var TraceAPI =
/** @class */
function () {
  /** Empty private constructor prevents end users from constructing a new instance of the API */
  function TraceAPI() {}
  /** Get the singleton instance of the Trace API */


  TraceAPI.getInstance = function () {
    if (!this._instance) {
      this._instance = new TraceAPI();
    }

    return this._instance;
  };
  /**
   * Set the current global tracer. Returns the initialized global tracer provider
   */


  TraceAPI.prototype.setGlobalTracerProvider = function (provider) {
    if (global_utils_1._global[global_utils_1.GLOBAL_TRACE_API_KEY]) {
      // global tracer provider has already been set
      return this.getTracerProvider();
    }

    global_utils_1._global[global_utils_1.GLOBAL_TRACE_API_KEY] = global_utils_1.makeGetter(global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION, provider, NoopTracerProvider_1.NOOP_TRACER_PROVIDER);
    return this.getTracerProvider();
  };
  /**
   * Returns the global tracer provider.
   */


  TraceAPI.prototype.getTracerProvider = function () {
    var _a, _b;

    return (_b = (_a = global_utils_1._global[global_utils_1.GLOBAL_TRACE_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(global_utils_1._global, global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NoopTracerProvider_1.NOOP_TRACER_PROVIDER;
  };
  /**
   * Returns a tracer from the global tracer provider.
   */


  TraceAPI.prototype.getTracer = function (name, version) {
    return this.getTracerProvider().getTracer(name, version);
  };
  /** Remove the global tracer provider */


  TraceAPI.prototype.disable = function () {
    delete global_utils_1._global[global_utils_1.GLOBAL_TRACE_API_KEY];
  };

  return TraceAPI;
}();

exports.TraceAPI = TraceAPI;
},{"../trace/NoopTracerProvider":"node_modules/@opentelemetry/api/build/src/trace/NoopTracerProvider.js","./global-utils":"node_modules/@opentelemetry/api/build/src/api/global-utils.js"}],"node_modules/@opentelemetry/api/build/src/api/metrics.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MetricsAPI = void 0;

var NoopMeterProvider_1 = require("../metrics/NoopMeterProvider");

var global_utils_1 = require("./global-utils");
/**
 * Singleton object which represents the entry point to the OpenTelemetry Metrics API
 */


var MetricsAPI =
/** @class */
function () {
  /** Empty private constructor prevents end users from constructing a new instance of the API */
  function MetricsAPI() {}
  /** Get the singleton instance of the Metrics API */


  MetricsAPI.getInstance = function () {
    if (!this._instance) {
      this._instance = new MetricsAPI();
    }

    return this._instance;
  };
  /**
   * Set the current global meter. Returns the initialized global meter provider.
   */


  MetricsAPI.prototype.setGlobalMeterProvider = function (provider) {
    if (global_utils_1._global[global_utils_1.GLOBAL_METRICS_API_KEY]) {
      // global meter provider has already been set
      return this.getMeterProvider();
    }

    global_utils_1._global[global_utils_1.GLOBAL_METRICS_API_KEY] = global_utils_1.makeGetter(global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION, provider, NoopMeterProvider_1.NOOP_METER_PROVIDER);
    return provider;
  };
  /**
   * Returns the global meter provider.
   */


  MetricsAPI.prototype.getMeterProvider = function () {
    var _a, _b;

    return (_b = (_a = global_utils_1._global[global_utils_1.GLOBAL_METRICS_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(global_utils_1._global, global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NoopMeterProvider_1.NOOP_METER_PROVIDER;
  };
  /**
   * Returns a meter from the global meter provider.
   */


  MetricsAPI.prototype.getMeter = function (name, version) {
    return this.getMeterProvider().getMeter(name, version);
  };
  /** Remove the global meter provider */


  MetricsAPI.prototype.disable = function () {
    delete global_utils_1._global[global_utils_1.GLOBAL_METRICS_API_KEY];
  };

  return MetricsAPI;
}();

exports.MetricsAPI = MetricsAPI;
},{"../metrics/NoopMeterProvider":"node_modules/@opentelemetry/api/build/src/metrics/NoopMeterProvider.js","./global-utils":"node_modules/@opentelemetry/api/build/src/api/global-utils.js"}],"node_modules/@opentelemetry/api/build/src/api/propagation.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PropagationAPI = void 0;

var getter_1 = require("../context/propagation/getter");

var NoopHttpTextPropagator_1 = require("../context/propagation/NoopHttpTextPropagator");

var setter_1 = require("../context/propagation/setter");

var context_1 = require("./context");

var global_utils_1 = require("./global-utils");

var contextApi = context_1.ContextAPI.getInstance();
/**
 * Singleton object which represents the entry point to the OpenTelemetry Propagation API
 */

var PropagationAPI =
/** @class */
function () {
  /** Empty private constructor prevents end users from constructing a new instance of the API */
  function PropagationAPI() {}
  /** Get the singleton instance of the Propagator API */


  PropagationAPI.getInstance = function () {
    if (!this._instance) {
      this._instance = new PropagationAPI();
    }

    return this._instance;
  };
  /**
   * Set the current propagator. Returns the initialized propagator
   */


  PropagationAPI.prototype.setGlobalPropagator = function (propagator) {
    if (global_utils_1._global[global_utils_1.GLOBAL_PROPAGATION_API_KEY]) {
      // global propagator has already been set
      return this._getGlobalPropagator();
    }

    global_utils_1._global[global_utils_1.GLOBAL_PROPAGATION_API_KEY] = global_utils_1.makeGetter(global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION, propagator, NoopHttpTextPropagator_1.NOOP_HTTP_TEXT_PROPAGATOR);
    return propagator;
  };
  /**
   * Inject context into a carrier to be propagated inter-process
   *
   * @param carrier carrier to inject context into
   * @param setter Function used to set values on the carrier
   * @param context Context carrying tracing data to inject. Defaults to the currently active context.
   */


  PropagationAPI.prototype.inject = function (carrier, setter, context) {
    if (setter === void 0) {
      setter = setter_1.defaultSetter;
    }

    if (context === void 0) {
      context = contextApi.active();
    }

    return this._getGlobalPropagator().inject(context, carrier, setter);
  };
  /**
   * Extract context from a carrier
   *
   * @param carrier Carrier to extract context from
   * @param getter Function used to extract keys from a carrier
   * @param context Context which the newly created context will inherit from. Defaults to the currently active context.
   */


  PropagationAPI.prototype.extract = function (carrier, getter, context) {
    if (getter === void 0) {
      getter = getter_1.defaultGetter;
    }

    if (context === void 0) {
      context = contextApi.active();
    }

    return this._getGlobalPropagator().extract(context, carrier, getter);
  };
  /** Remove the global propagator */


  PropagationAPI.prototype.disable = function () {
    delete global_utils_1._global[global_utils_1.GLOBAL_PROPAGATION_API_KEY];
  };

  PropagationAPI.prototype._getGlobalPropagator = function () {
    var _a, _b;

    return (_b = (_a = global_utils_1._global[global_utils_1.GLOBAL_PROPAGATION_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(global_utils_1._global, global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NoopHttpTextPropagator_1.NOOP_HTTP_TEXT_PROPAGATOR;
  };

  return PropagationAPI;
}();

exports.PropagationAPI = PropagationAPI;
},{"../context/propagation/getter":"node_modules/@opentelemetry/api/build/src/context/propagation/getter.js","../context/propagation/NoopHttpTextPropagator":"node_modules/@opentelemetry/api/build/src/context/propagation/NoopHttpTextPropagator.js","../context/propagation/setter":"node_modules/@opentelemetry/api/build/src/context/propagation/setter.js","./context":"node_modules/@opentelemetry/api/build/src/api/context.js","./global-utils":"node_modules/@opentelemetry/api/build/src/api/global-utils.js"}],"node_modules/@opentelemetry/api/build/src/index.js":[function(require,module,exports) {
"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function () {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __exportStar = this && this.__exportStar || function (m, exports) {
  for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.propagation = exports.metrics = exports.trace = exports.context = void 0;

__exportStar(require("./common/Logger"), exports);

__exportStar(require("./common/Time"), exports);

__exportStar(require("./context/propagation/getter"), exports);

__exportStar(require("./context/propagation/HttpTextPropagator"), exports);

__exportStar(require("./context/propagation/NoopHttpTextPropagator"), exports);

__exportStar(require("./context/propagation/setter"), exports);

__exportStar(require("./correlation_context/CorrelationContext"), exports);

__exportStar(require("./correlation_context/EntryValue"), exports);

__exportStar(require("./metrics/BatchObserverResult"), exports);

__exportStar(require("./metrics/BoundInstrument"), exports);

__exportStar(require("./metrics/Meter"), exports);

__exportStar(require("./metrics/MeterProvider"), exports);

__exportStar(require("./metrics/Metric"), exports);

__exportStar(require("./metrics/NoopMeter"), exports);

__exportStar(require("./metrics/NoopMeterProvider"), exports);

__exportStar(require("./metrics/Observation"), exports);

__exportStar(require("./metrics/ObserverResult"), exports);

__exportStar(require("./trace/attributes"), exports);

__exportStar(require("./trace/Event"), exports);

__exportStar(require("./trace/instrumentation/Plugin"), exports);

__exportStar(require("./trace/link_context"), exports);

__exportStar(require("./trace/link"), exports);

__exportStar(require("./trace/NoopSpan"), exports);

__exportStar(require("./trace/NoopTracer"), exports);

__exportStar(require("./trace/NoopTracerProvider"), exports);

__exportStar(require("./trace/Sampler"), exports);

__exportStar(require("./trace/SamplingResult"), exports);

__exportStar(require("./trace/span_context"), exports);

__exportStar(require("./trace/span_kind"), exports);

__exportStar(require("./trace/span"), exports);

__exportStar(require("./trace/SpanOptions"), exports);

__exportStar(require("./trace/status"), exports);

__exportStar(require("./trace/TimedEvent"), exports);

__exportStar(require("./trace/trace_flags"), exports);

__exportStar(require("./trace/trace_state"), exports);

__exportStar(require("./trace/tracer_provider"), exports);

__exportStar(require("./trace/tracer"), exports);

var context_base_1 = require("@opentelemetry/context-base");

Object.defineProperty(exports, "Context", {
  enumerable: true,
  get: function () {
    return context_base_1.Context;
  }
});

var context_1 = require("./api/context");
/** Entrypoint for context API */


exports.context = context_1.ContextAPI.getInstance();

var trace_1 = require("./api/trace");
/** Entrypoint for trace API */


exports.trace = trace_1.TraceAPI.getInstance();

var metrics_1 = require("./api/metrics");
/** Entrypoint for metrics API */


exports.metrics = metrics_1.MetricsAPI.getInstance();

var propagation_1 = require("./api/propagation");
/** Entrypoint for propagation API */


exports.propagation = propagation_1.PropagationAPI.getInstance();
exports.default = {
  trace: exports.trace,
  metrics: exports.metrics,
  context: exports.context,
  propagation: exports.propagation
};
},{"./common/Logger":"node_modules/@opentelemetry/api/build/src/common/Logger.js","./common/Time":"node_modules/@opentelemetry/api/build/src/common/Time.js","./context/propagation/getter":"node_modules/@opentelemetry/api/build/src/context/propagation/getter.js","./context/propagation/HttpTextPropagator":"node_modules/@opentelemetry/api/build/src/context/propagation/HttpTextPropagator.js","./context/propagation/NoopHttpTextPropagator":"node_modules/@opentelemetry/api/build/src/context/propagation/NoopHttpTextPropagator.js","./context/propagation/setter":"node_modules/@opentelemetry/api/build/src/context/propagation/setter.js","./correlation_context/CorrelationContext":"node_modules/@opentelemetry/api/build/src/correlation_context/CorrelationContext.js","./correlation_context/EntryValue":"node_modules/@opentelemetry/api/build/src/correlation_context/EntryValue.js","./metrics/BatchObserverResult":"node_modules/@opentelemetry/api/build/src/metrics/BatchObserverResult.js","./metrics/BoundInstrument":"node_modules/@opentelemetry/api/build/src/metrics/BoundInstrument.js","./metrics/Meter":"node_modules/@opentelemetry/api/build/src/metrics/Meter.js","./metrics/MeterProvider":"node_modules/@opentelemetry/api/build/src/metrics/MeterProvider.js","./metrics/Metric":"node_modules/@opentelemetry/api/build/src/metrics/Metric.js","./metrics/NoopMeter":"node_modules/@opentelemetry/api/build/src/metrics/NoopMeter.js","./metrics/NoopMeterProvider":"node_modules/@opentelemetry/api/build/src/metrics/NoopMeterProvider.js","./metrics/Observation":"node_modules/@opentelemetry/api/build/src/metrics/Observation.js","./metrics/ObserverResult":"node_modules/@opentelemetry/api/build/src/metrics/ObserverResult.js","./trace/attributes":"node_modules/@opentelemetry/api/build/src/trace/attributes.js","./trace/Event":"node_modules/@opentelemetry/api/build/src/trace/Event.js","./trace/instrumentation/Plugin":"node_modules/@opentelemetry/api/build/src/trace/instrumentation/Plugin.js","./trace/link_context":"node_modules/@opentelemetry/api/build/src/trace/link_context.js","./trace/link":"node_modules/@opentelemetry/api/build/src/trace/link.js","./trace/NoopSpan":"node_modules/@opentelemetry/api/build/src/trace/NoopSpan.js","./trace/NoopTracer":"node_modules/@opentelemetry/api/build/src/trace/NoopTracer.js","./trace/NoopTracerProvider":"node_modules/@opentelemetry/api/build/src/trace/NoopTracerProvider.js","./trace/Sampler":"node_modules/@opentelemetry/api/build/src/trace/Sampler.js","./trace/SamplingResult":"node_modules/@opentelemetry/api/build/src/trace/SamplingResult.js","./trace/span_context":"node_modules/@opentelemetry/api/build/src/trace/span_context.js","./trace/span_kind":"node_modules/@opentelemetry/api/build/src/trace/span_kind.js","./trace/span":"node_modules/@opentelemetry/api/build/src/trace/span.js","./trace/SpanOptions":"node_modules/@opentelemetry/api/build/src/trace/SpanOptions.js","./trace/status":"node_modules/@opentelemetry/api/build/src/trace/status.js","./trace/TimedEvent":"node_modules/@opentelemetry/api/build/src/trace/TimedEvent.js","./trace/trace_flags":"node_modules/@opentelemetry/api/build/src/trace/trace_flags.js","./trace/trace_state":"node_modules/@opentelemetry/api/build/src/trace/trace_state.js","./trace/tracer_provider":"node_modules/@opentelemetry/api/build/src/trace/tracer_provider.js","./trace/tracer":"node_modules/@opentelemetry/api/build/src/trace/tracer.js","@opentelemetry/context-base":"node_modules/@opentelemetry/context-base/build/src/index.js","./api/context":"node_modules/@opentelemetry/api/build/src/api/context.js","./api/trace":"node_modules/@opentelemetry/api/build/src/api/trace.js","./api/metrics":"node_modules/@opentelemetry/api/build/src/api/metrics.js","./api/propagation":"node_modules/@opentelemetry/api/build/src/api/propagation.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlobBreakLeaseHeaders = exports.BlobChangeLeaseHeaders = exports.BlobRenewLeaseHeaders = exports.BlobReleaseLeaseHeaders = exports.BlobAcquireLeaseHeaders = exports.BlobSetMetadataHeaders = exports.BlobSetHTTPHeadersHeaders = exports.BlobSetExpiryHeaders = exports.BlobUndeleteHeaders = exports.BlockBlobPutBlobFromUrlHeaders = exports.BlockBlobUploadHeaders = exports.AppendBlobCreateHeaders = exports.PageBlobCreateHeaders = exports.BlobRenameHeaders = exports.BlobGetAccessControlHeaders = exports.BlobSetAccessControlHeaders = exports.BlobDeleteHeaders = exports.BlobGetPropertiesHeaders = exports.BlobDownloadHeaders = exports.DirectoryGetAccessControlHeaders = exports.DirectorySetAccessControlHeaders = exports.DirectoryDeleteHeaders = exports.DirectoryRenameHeaders = exports.DirectoryCreateHeaders = exports.ContainerGetAccountInfoHeaders = exports.ContainerListBlobHierarchySegmentHeaders = exports.ContainerListBlobFlatSegmentHeaders = exports.ContainerChangeLeaseHeaders = exports.ContainerBreakLeaseHeaders = exports.ContainerRenewLeaseHeaders = exports.ContainerReleaseLeaseHeaders = exports.ContainerAcquireLeaseHeaders = exports.ContainerSubmitBatchHeaders = exports.ContainerRenameHeaders = exports.ContainerRestoreHeaders = exports.ContainerSetAccessPolicyHeaders = exports.ContainerGetAccessPolicyHeaders = exports.ContainerSetMetadataHeaders = exports.ContainerDeleteHeaders = exports.ContainerGetPropertiesHeaders = exports.ContainerCreateHeaders = exports.ServiceFilterBlobsHeaders = exports.ServiceSubmitBatchHeaders = exports.ServiceGetAccountInfoHeaders = exports.ServiceGetUserDelegationKeyHeaders = exports.ServiceListContainersSegmentHeaders = exports.ServiceGetStatisticsHeaders = exports.ServiceGetPropertiesHeaders = exports.ServiceSetPropertiesHeaders = exports.AppendPositionAccessConditions = exports.SequenceNumberAccessConditions = exports.BlobHTTPHeaders = exports.CpkInfo = exports.SourceModifiedAccessConditions = exports.DirectoryHttpHeaders = exports.ModifiedAccessConditions = exports.LeaseAccessConditions = exports.ContainerEncryptionScope = exports.BlobServiceStatistics = exports.BlobServiceProperties = exports.StaticWebsite = exports.SignedIdentifier = exports.QueryRequest = exports.QuerySerialization = exports.QueryFormat = exports.PageList = exports.ClearRange = exports.PageRange = exports.Metrics = exports.Logging = exports.RetentionPolicy = exports.GeoReplication = exports.FilterBlobSegment = exports.FilterBlobItem = exports.CorsRule = exports.ListContainersSegmentResponse = exports.ArrowConfiguration = exports.ArrowField = exports.JsonTextConfiguration = exports.DelimitedTextConfiguration = exports.ContainerItem = exports.ContainerProperties = exports.BlockLookupList = exports.BlockList = exports.Block = exports.ListBlobsHierarchySegmentResponse = exports.BlobHierarchyListSegment = exports.BlobPrefix = exports.ListBlobsFlatSegmentResponse = exports.BlobFlatListSegment = exports.BlobItemInternal = exports.BlobTags = exports.BlobTag = exports.BlobPropertiesInternal = exports.AccessPolicy = exports.DataLakeStorageError = exports.DataLakeStorageErrorError = exports.StorageError = exports.UserDelegationKey = exports.KeyInfo = void 0;
exports.BlobSetTagsHeaders = exports.BlobGetTagsHeaders = exports.BlobQueryHeaders = exports.AppendBlobSealHeaders = exports.AppendBlobAppendBlockFromUrlHeaders = exports.AppendBlobAppendBlockHeaders = exports.PageBlobCopyIncrementalHeaders = exports.PageBlobUpdateSequenceNumberHeaders = exports.PageBlobResizeHeaders = exports.PageBlobGetPageRangesDiffHeaders = exports.PageBlobGetPageRangesHeaders = exports.PageBlobUploadPagesFromURLHeaders = exports.PageBlobClearPagesHeaders = exports.PageBlobUploadPagesHeaders = exports.BlockBlobGetBlockListHeaders = exports.BlockBlobCommitBlockListHeaders = exports.BlockBlobStageBlockFromURLHeaders = exports.BlockBlobStageBlockHeaders = exports.BlobGetAccountInfoHeaders = exports.BlobSetTierHeaders = exports.BlobAbortCopyFromURLHeaders = exports.BlobCopyFromURLHeaders = exports.BlobStartCopyFromURLHeaders = exports.BlobCreateSnapshotHeaders = void 0;

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
var KeyInfo = {
  serializedName: "KeyInfo",
  type: {
    name: "Composite",
    className: "KeyInfo",
    modelProperties: {
      startsOn: {
        xmlName: "Start",
        required: true,
        serializedName: "Start",
        type: {
          name: "String"
        }
      },
      expiresOn: {
        xmlName: "Expiry",
        required: true,
        serializedName: "Expiry",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.KeyInfo = KeyInfo;
var UserDelegationKey = {
  serializedName: "UserDelegationKey",
  type: {
    name: "Composite",
    className: "UserDelegationKey",
    modelProperties: {
      signedObjectId: {
        xmlName: "SignedOid",
        required: true,
        serializedName: "SignedOid",
        type: {
          name: "String"
        }
      },
      signedTenantId: {
        xmlName: "SignedTid",
        required: true,
        serializedName: "SignedTid",
        type: {
          name: "String"
        }
      },
      signedStartsOn: {
        xmlName: "SignedStart",
        required: true,
        serializedName: "SignedStart",
        type: {
          name: "String"
        }
      },
      signedExpiresOn: {
        xmlName: "SignedExpiry",
        required: true,
        serializedName: "SignedExpiry",
        type: {
          name: "String"
        }
      },
      signedService: {
        xmlName: "SignedService",
        required: true,
        serializedName: "SignedService",
        type: {
          name: "String"
        }
      },
      signedVersion: {
        xmlName: "SignedVersion",
        required: true,
        serializedName: "SignedVersion",
        type: {
          name: "String"
        }
      },
      value: {
        xmlName: "Value",
        required: true,
        serializedName: "Value",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.UserDelegationKey = UserDelegationKey;
var StorageError = {
  serializedName: "StorageError",
  type: {
    name: "Composite",
    className: "StorageError",
    modelProperties: {
      message: {
        xmlName: "Message",
        serializedName: "Message",
        type: {
          name: "String"
        }
      },
      code: {
        xmlName: "Code",
        serializedName: "Code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.StorageError = StorageError;
var DataLakeStorageErrorError = {
  serializedName: "DataLakeStorageError_error",
  type: {
    name: "Composite",
    className: "DataLakeStorageErrorError",
    modelProperties: {
      code: {
        xmlName: "Code",
        serializedName: "Code",
        type: {
          name: "String"
        }
      },
      message: {
        xmlName: "Message",
        serializedName: "Message",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.DataLakeStorageErrorError = DataLakeStorageErrorError;
var DataLakeStorageError = {
  serializedName: "DataLakeStorageError",
  type: {
    name: "Composite",
    className: "DataLakeStorageError",
    modelProperties: {
      dataLakeStorageErrorDetails: {
        xmlName: "error",
        serializedName: "error",
        type: {
          name: "Composite",
          className: "DataLakeStorageErrorError"
        }
      }
    }
  }
};
exports.DataLakeStorageError = DataLakeStorageError;
var AccessPolicy = {
  serializedName: "AccessPolicy",
  type: {
    name: "Composite",
    className: "AccessPolicy",
    modelProperties: {
      startsOn: {
        xmlName: "Start",
        serializedName: "Start",
        type: {
          name: "String"
        }
      },
      expiresOn: {
        xmlName: "Expiry",
        serializedName: "Expiry",
        type: {
          name: "String"
        }
      },
      permissions: {
        xmlName: "Permission",
        serializedName: "Permission",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.AccessPolicy = AccessPolicy;
var BlobPropertiesInternal = {
  xmlName: "Properties",
  serializedName: "BlobPropertiesInternal",
  type: {
    name: "Composite",
    className: "BlobPropertiesInternal",
    modelProperties: {
      createdOn: {
        xmlName: "Creation-Time",
        serializedName: "Creation-Time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      lastModified: {
        xmlName: "Last-Modified",
        required: true,
        serializedName: "Last-Modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      etag: {
        xmlName: "Etag",
        required: true,
        serializedName: "Etag",
        type: {
          name: "String"
        }
      },
      contentLength: {
        xmlName: "Content-Length",
        serializedName: "Content-Length",
        type: {
          name: "Number"
        }
      },
      contentType: {
        xmlName: "Content-Type",
        serializedName: "Content-Type",
        type: {
          name: "String"
        }
      },
      contentEncoding: {
        xmlName: "Content-Encoding",
        serializedName: "Content-Encoding",
        type: {
          name: "String"
        }
      },
      contentLanguage: {
        xmlName: "Content-Language",
        serializedName: "Content-Language",
        type: {
          name: "String"
        }
      },
      contentMD5: {
        xmlName: "Content-MD5",
        serializedName: "Content-MD5",
        type: {
          name: "ByteArray"
        }
      },
      contentDisposition: {
        xmlName: "Content-Disposition",
        serializedName: "Content-Disposition",
        type: {
          name: "String"
        }
      },
      cacheControl: {
        xmlName: "Cache-Control",
        serializedName: "Cache-Control",
        type: {
          name: "String"
        }
      },
      blobSequenceNumber: {
        xmlName: "x-ms-blob-sequence-number",
        serializedName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      blobType: {
        xmlName: "BlobType",
        serializedName: "BlobType",
        type: {
          name: "Enum",
          allowedValues: ["BlockBlob", "PageBlob", "AppendBlob"]
        }
      },
      leaseStatus: {
        xmlName: "LeaseStatus",
        serializedName: "LeaseStatus",
        type: {
          name: "Enum",
          allowedValues: ["locked", "unlocked"]
        }
      },
      leaseState: {
        xmlName: "LeaseState",
        serializedName: "LeaseState",
        type: {
          name: "Enum",
          allowedValues: ["available", "leased", "expired", "breaking", "broken"]
        }
      },
      leaseDuration: {
        xmlName: "LeaseDuration",
        serializedName: "LeaseDuration",
        type: {
          name: "Enum",
          allowedValues: ["infinite", "fixed"]
        }
      },
      copyId: {
        xmlName: "CopyId",
        serializedName: "CopyId",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        xmlName: "CopyStatus",
        serializedName: "CopyStatus",
        type: {
          name: "Enum",
          allowedValues: ["pending", "success", "aborted", "failed"]
        }
      },
      copySource: {
        xmlName: "CopySource",
        serializedName: "CopySource",
        type: {
          name: "String"
        }
      },
      copyProgress: {
        xmlName: "CopyProgress",
        serializedName: "CopyProgress",
        type: {
          name: "String"
        }
      },
      copyCompletedOn: {
        xmlName: "CopyCompletionTime",
        serializedName: "CopyCompletionTime",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyStatusDescription: {
        xmlName: "CopyStatusDescription",
        serializedName: "CopyStatusDescription",
        type: {
          name: "String"
        }
      },
      serverEncrypted: {
        xmlName: "ServerEncrypted",
        serializedName: "ServerEncrypted",
        type: {
          name: "Boolean"
        }
      },
      incrementalCopy: {
        xmlName: "IncrementalCopy",
        serializedName: "IncrementalCopy",
        type: {
          name: "Boolean"
        }
      },
      destinationSnapshot: {
        xmlName: "DestinationSnapshot",
        serializedName: "DestinationSnapshot",
        type: {
          name: "String"
        }
      },
      deletedOn: {
        xmlName: "DeletedTime",
        serializedName: "DeletedTime",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      remainingRetentionDays: {
        xmlName: "RemainingRetentionDays",
        serializedName: "RemainingRetentionDays",
        type: {
          name: "Number"
        }
      },
      accessTier: {
        xmlName: "AccessTier",
        serializedName: "AccessTier",
        type: {
          name: "String"
        }
      },
      accessTierInferred: {
        xmlName: "AccessTierInferred",
        serializedName: "AccessTierInferred",
        type: {
          name: "Boolean"
        }
      },
      archiveStatus: {
        xmlName: "ArchiveStatus",
        serializedName: "ArchiveStatus",
        type: {
          name: "String"
        }
      },
      customerProvidedKeySha256: {
        xmlName: "CustomerProvidedKeySha256",
        serializedName: "CustomerProvidedKeySha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        xmlName: "EncryptionScope",
        serializedName: "EncryptionScope",
        type: {
          name: "String"
        }
      },
      accessTierChangedOn: {
        xmlName: "AccessTierChangeTime",
        serializedName: "AccessTierChangeTime",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      tagCount: {
        xmlName: "TagCount",
        serializedName: "TagCount",
        type: {
          name: "Number"
        }
      },
      expiresOn: {
        xmlName: "Expiry-Time",
        serializedName: "Expiry-Time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isSealed: {
        xmlName: "Sealed",
        serializedName: "Sealed",
        type: {
          name: "Boolean"
        }
      },
      rehydratePriority: {
        xmlName: "RehydratePriority",
        serializedName: "RehydratePriority",
        type: {
          name: "String"
        }
      },
      lastAccessedOn: {
        xmlName: "LastAccessTime",
        serializedName: "LastAccessTime",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
exports.BlobPropertiesInternal = BlobPropertiesInternal;
var BlobTag = {
  xmlName: "Tag",
  serializedName: "BlobTag",
  type: {
    name: "Composite",
    className: "BlobTag",
    modelProperties: {
      key: {
        xmlName: "Key",
        required: true,
        serializedName: "Key",
        type: {
          name: "String"
        }
      },
      value: {
        xmlName: "Value",
        required: true,
        serializedName: "Value",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlobTag = BlobTag;
var BlobTags = {
  xmlName: "Tags",
  serializedName: "BlobTags",
  type: {
    name: "Composite",
    className: "BlobTags",
    modelProperties: {
      blobTagSet: {
        xmlIsWrapped: true,
        xmlName: "TagSet",
        xmlElementName: "Tag",
        required: true,
        serializedName: "BlobTagSet",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BlobTag"
            }
          }
        }
      }
    }
  }
};
exports.BlobTags = BlobTags;
var BlobItemInternal = {
  xmlName: "Blob",
  serializedName: "BlobItemInternal",
  type: {
    name: "Composite",
    className: "BlobItemInternal",
    modelProperties: {
      name: {
        xmlName: "Name",
        required: true,
        serializedName: "Name",
        type: {
          name: "String"
        }
      },
      deleted: {
        xmlName: "Deleted",
        required: true,
        serializedName: "Deleted",
        type: {
          name: "Boolean"
        }
      },
      snapshot: {
        xmlName: "Snapshot",
        required: true,
        serializedName: "Snapshot",
        type: {
          name: "String"
        }
      },
      versionId: {
        xmlName: "VersionId",
        serializedName: "VersionId",
        type: {
          name: "String"
        }
      },
      isCurrentVersion: {
        xmlName: "IsCurrentVersion",
        serializedName: "IsCurrentVersion",
        type: {
          name: "Boolean"
        }
      },
      properties: {
        xmlName: "Properties",
        required: true,
        serializedName: "Properties",
        type: {
          name: "Composite",
          className: "BlobPropertiesInternal"
        }
      },
      metadata: {
        xmlName: "Metadata",
        serializedName: "Metadata",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      blobTags: {
        xmlName: "Tags",
        serializedName: "BlobTags",
        type: {
          name: "Composite",
          className: "BlobTags"
        }
      },
      objectReplicationMetadata: {
        xmlName: "OrMetadata",
        serializedName: "ObjectReplicationMetadata",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};
exports.BlobItemInternal = BlobItemInternal;
var BlobFlatListSegment = {
  xmlName: "Blobs",
  serializedName: "BlobFlatListSegment",
  type: {
    name: "Composite",
    className: "BlobFlatListSegment",
    modelProperties: {
      blobItems: {
        xmlName: "BlobItems",
        xmlElementName: "Blob",
        required: true,
        serializedName: "BlobItems",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BlobItemInternal"
            }
          }
        }
      }
    }
  }
};
exports.BlobFlatListSegment = BlobFlatListSegment;
var ListBlobsFlatSegmentResponse = {
  xmlName: "EnumerationResults",
  serializedName: "ListBlobsFlatSegmentResponse",
  type: {
    name: "Composite",
    className: "ListBlobsFlatSegmentResponse",
    modelProperties: {
      serviceEndpoint: {
        xmlIsAttribute: true,
        xmlName: "ServiceEndpoint",
        required: true,
        serializedName: "ServiceEndpoint",
        type: {
          name: "String"
        }
      },
      containerName: {
        xmlIsAttribute: true,
        xmlName: "ContainerName",
        required: true,
        serializedName: "ContainerName",
        type: {
          name: "String"
        }
      },
      prefix: {
        xmlName: "Prefix",
        serializedName: "Prefix",
        type: {
          name: "String"
        }
      },
      marker: {
        xmlName: "Marker",
        serializedName: "Marker",
        type: {
          name: "String"
        }
      },
      maxPageSize: {
        xmlName: "MaxResults",
        serializedName: "MaxResults",
        type: {
          name: "Number"
        }
      },
      segment: {
        xmlName: "Blobs",
        required: true,
        serializedName: "Segment",
        type: {
          name: "Composite",
          className: "BlobFlatListSegment"
        }
      },
      continuationToken: {
        xmlName: "NextMarker",
        serializedName: "NextMarker",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.ListBlobsFlatSegmentResponse = ListBlobsFlatSegmentResponse;
var BlobPrefix = {
  serializedName: "BlobPrefix",
  type: {
    name: "Composite",
    className: "BlobPrefix",
    modelProperties: {
      name: {
        xmlName: "Name",
        required: true,
        serializedName: "Name",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlobPrefix = BlobPrefix;
var BlobHierarchyListSegment = {
  xmlName: "Blobs",
  serializedName: "BlobHierarchyListSegment",
  type: {
    name: "Composite",
    className: "BlobHierarchyListSegment",
    modelProperties: {
      blobPrefixes: {
        xmlName: "BlobPrefixes",
        xmlElementName: "BlobPrefix",
        serializedName: "BlobPrefixes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BlobPrefix"
            }
          }
        }
      },
      blobItems: {
        xmlName: "BlobItems",
        xmlElementName: "Blob",
        required: true,
        serializedName: "BlobItems",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BlobItemInternal"
            }
          }
        }
      }
    }
  }
};
exports.BlobHierarchyListSegment = BlobHierarchyListSegment;
var ListBlobsHierarchySegmentResponse = {
  xmlName: "EnumerationResults",
  serializedName: "ListBlobsHierarchySegmentResponse",
  type: {
    name: "Composite",
    className: "ListBlobsHierarchySegmentResponse",
    modelProperties: {
      serviceEndpoint: {
        xmlIsAttribute: true,
        xmlName: "ServiceEndpoint",
        required: true,
        serializedName: "ServiceEndpoint",
        type: {
          name: "String"
        }
      },
      containerName: {
        xmlIsAttribute: true,
        xmlName: "ContainerName",
        required: true,
        serializedName: "ContainerName",
        type: {
          name: "String"
        }
      },
      prefix: {
        xmlName: "Prefix",
        serializedName: "Prefix",
        type: {
          name: "String"
        }
      },
      marker: {
        xmlName: "Marker",
        serializedName: "Marker",
        type: {
          name: "String"
        }
      },
      maxPageSize: {
        xmlName: "MaxResults",
        serializedName: "MaxResults",
        type: {
          name: "Number"
        }
      },
      delimiter: {
        xmlName: "Delimiter",
        serializedName: "Delimiter",
        type: {
          name: "String"
        }
      },
      segment: {
        xmlName: "Blobs",
        required: true,
        serializedName: "Segment",
        type: {
          name: "Composite",
          className: "BlobHierarchyListSegment"
        }
      },
      continuationToken: {
        xmlName: "NextMarker",
        serializedName: "NextMarker",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.ListBlobsHierarchySegmentResponse = ListBlobsHierarchySegmentResponse;
var Block = {
  serializedName: "Block",
  type: {
    name: "Composite",
    className: "Block",
    modelProperties: {
      name: {
        xmlName: "Name",
        required: true,
        serializedName: "Name",
        type: {
          name: "String"
        }
      },
      size: {
        xmlName: "Size",
        required: true,
        serializedName: "Size",
        type: {
          name: "Number"
        }
      }
    }
  }
};
exports.Block = Block;
var BlockList = {
  serializedName: "BlockList",
  type: {
    name: "Composite",
    className: "BlockList",
    modelProperties: {
      committedBlocks: {
        xmlIsWrapped: true,
        xmlName: "CommittedBlocks",
        xmlElementName: "Block",
        serializedName: "CommittedBlocks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Block"
            }
          }
        }
      },
      uncommittedBlocks: {
        xmlIsWrapped: true,
        xmlName: "UncommittedBlocks",
        xmlElementName: "Block",
        serializedName: "UncommittedBlocks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Block"
            }
          }
        }
      }
    }
  }
};
exports.BlockList = BlockList;
var BlockLookupList = {
  xmlName: "BlockList",
  serializedName: "BlockLookupList",
  type: {
    name: "Composite",
    className: "BlockLookupList",
    modelProperties: {
      committed: {
        xmlName: "Committed",
        xmlElementName: "Committed",
        serializedName: "Committed",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      uncommitted: {
        xmlName: "Uncommitted",
        xmlElementName: "Uncommitted",
        serializedName: "Uncommitted",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      latest: {
        xmlName: "Latest",
        xmlElementName: "Latest",
        serializedName: "Latest",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};
exports.BlockLookupList = BlockLookupList;
var ContainerProperties = {
  serializedName: "ContainerProperties",
  type: {
    name: "Composite",
    className: "ContainerProperties",
    modelProperties: {
      lastModified: {
        xmlName: "Last-Modified",
        required: true,
        serializedName: "Last-Modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      etag: {
        xmlName: "Etag",
        required: true,
        serializedName: "Etag",
        type: {
          name: "String"
        }
      },
      leaseStatus: {
        xmlName: "LeaseStatus",
        serializedName: "LeaseStatus",
        type: {
          name: "Enum",
          allowedValues: ["locked", "unlocked"]
        }
      },
      leaseState: {
        xmlName: "LeaseState",
        serializedName: "LeaseState",
        type: {
          name: "Enum",
          allowedValues: ["available", "leased", "expired", "breaking", "broken"]
        }
      },
      leaseDuration: {
        xmlName: "LeaseDuration",
        serializedName: "LeaseDuration",
        type: {
          name: "Enum",
          allowedValues: ["infinite", "fixed"]
        }
      },
      publicAccess: {
        xmlName: "PublicAccess",
        serializedName: "PublicAccess",
        type: {
          name: "String"
        }
      },
      hasImmutabilityPolicy: {
        xmlName: "HasImmutabilityPolicy",
        serializedName: "HasImmutabilityPolicy",
        type: {
          name: "Boolean"
        }
      },
      hasLegalHold: {
        xmlName: "HasLegalHold",
        serializedName: "HasLegalHold",
        type: {
          name: "Boolean"
        }
      },
      defaultEncryptionScope: {
        xmlName: "DefaultEncryptionScope",
        serializedName: "DefaultEncryptionScope",
        type: {
          name: "String"
        }
      },
      preventEncryptionScopeOverride: {
        xmlName: "DenyEncryptionScopeOverride",
        serializedName: "DenyEncryptionScopeOverride",
        type: {
          name: "Boolean"
        }
      },
      deletedOn: {
        xmlName: "DeletedTime",
        serializedName: "DeletedTime",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      remainingRetentionDays: {
        xmlName: "RemainingRetentionDays",
        serializedName: "RemainingRetentionDays",
        type: {
          name: "Number"
        }
      }
    }
  }
};
exports.ContainerProperties = ContainerProperties;
var ContainerItem = {
  xmlName: "Container",
  serializedName: "ContainerItem",
  type: {
    name: "Composite",
    className: "ContainerItem",
    modelProperties: {
      name: {
        xmlName: "Name",
        required: true,
        serializedName: "Name",
        type: {
          name: "String"
        }
      },
      deleted: {
        xmlName: "Deleted",
        serializedName: "Deleted",
        type: {
          name: "Boolean"
        }
      },
      version: {
        xmlName: "Version",
        serializedName: "Version",
        type: {
          name: "String"
        }
      },
      properties: {
        xmlName: "Properties",
        required: true,
        serializedName: "Properties",
        type: {
          name: "Composite",
          className: "ContainerProperties"
        }
      },
      metadata: {
        xmlName: "Metadata",
        serializedName: "Metadata",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};
exports.ContainerItem = ContainerItem;
var DelimitedTextConfiguration = {
  serializedName: "DelimitedTextConfiguration",
  type: {
    name: "Composite",
    className: "DelimitedTextConfiguration",
    modelProperties: {
      columnSeparator: {
        xmlName: "ColumnSeparator",
        required: true,
        serializedName: "ColumnSeparator",
        type: {
          name: "String"
        }
      },
      fieldQuote: {
        xmlName: "FieldQuote",
        required: true,
        serializedName: "FieldQuote",
        type: {
          name: "String"
        }
      },
      recordSeparator: {
        xmlName: "RecordSeparator",
        required: true,
        serializedName: "RecordSeparator",
        type: {
          name: "String"
        }
      },
      escapeChar: {
        xmlName: "EscapeChar",
        required: true,
        serializedName: "EscapeChar",
        type: {
          name: "String"
        }
      },
      headersPresent: {
        xmlName: "HasHeaders",
        required: true,
        serializedName: "HeadersPresent",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
exports.DelimitedTextConfiguration = DelimitedTextConfiguration;
var JsonTextConfiguration = {
  serializedName: "JsonTextConfiguration",
  type: {
    name: "Composite",
    className: "JsonTextConfiguration",
    modelProperties: {
      recordSeparator: {
        xmlName: "RecordSeparator",
        required: true,
        serializedName: "RecordSeparator",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.JsonTextConfiguration = JsonTextConfiguration;
var ArrowField = {
  xmlName: "Field",
  serializedName: "ArrowField",
  type: {
    name: "Composite",
    className: "ArrowField",
    modelProperties: {
      type: {
        xmlName: "Type",
        required: true,
        serializedName: "Type",
        type: {
          name: "String"
        }
      },
      name: {
        xmlName: "Name",
        serializedName: "Name",
        type: {
          name: "String"
        }
      },
      precision: {
        xmlName: "Precision",
        serializedName: "Precision",
        type: {
          name: "Number"
        }
      },
      scale: {
        xmlName: "Scale",
        serializedName: "Scale",
        type: {
          name: "Number"
        }
      }
    }
  }
};
exports.ArrowField = ArrowField;
var ArrowConfiguration = {
  serializedName: "ArrowConfiguration",
  type: {
    name: "Composite",
    className: "ArrowConfiguration",
    modelProperties: {
      schema: {
        xmlIsWrapped: true,
        xmlName: "Schema",
        xmlElementName: "Field",
        required: true,
        serializedName: "Schema",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ArrowField"
            }
          }
        }
      }
    }
  }
};
exports.ArrowConfiguration = ArrowConfiguration;
var ListContainersSegmentResponse = {
  xmlName: "EnumerationResults",
  serializedName: "ListContainersSegmentResponse",
  type: {
    name: "Composite",
    className: "ListContainersSegmentResponse",
    modelProperties: {
      serviceEndpoint: {
        xmlIsAttribute: true,
        xmlName: "ServiceEndpoint",
        required: true,
        serializedName: "ServiceEndpoint",
        type: {
          name: "String"
        }
      },
      prefix: {
        xmlName: "Prefix",
        serializedName: "Prefix",
        type: {
          name: "String"
        }
      },
      marker: {
        xmlName: "Marker",
        serializedName: "Marker",
        type: {
          name: "String"
        }
      },
      maxPageSize: {
        xmlName: "MaxResults",
        serializedName: "MaxResults",
        type: {
          name: "Number"
        }
      },
      containerItems: {
        xmlIsWrapped: true,
        xmlName: "Containers",
        xmlElementName: "Container",
        required: true,
        serializedName: "ContainerItems",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerItem"
            }
          }
        }
      },
      continuationToken: {
        xmlName: "NextMarker",
        serializedName: "NextMarker",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.ListContainersSegmentResponse = ListContainersSegmentResponse;
var CorsRule = {
  serializedName: "CorsRule",
  type: {
    name: "Composite",
    className: "CorsRule",
    modelProperties: {
      allowedOrigins: {
        xmlName: "AllowedOrigins",
        required: true,
        serializedName: "AllowedOrigins",
        type: {
          name: "String"
        }
      },
      allowedMethods: {
        xmlName: "AllowedMethods",
        required: true,
        serializedName: "AllowedMethods",
        type: {
          name: "String"
        }
      },
      allowedHeaders: {
        xmlName: "AllowedHeaders",
        required: true,
        serializedName: "AllowedHeaders",
        type: {
          name: "String"
        }
      },
      exposedHeaders: {
        xmlName: "ExposedHeaders",
        required: true,
        serializedName: "ExposedHeaders",
        type: {
          name: "String"
        }
      },
      maxAgeInSeconds: {
        xmlName: "MaxAgeInSeconds",
        required: true,
        serializedName: "MaxAgeInSeconds",
        constraints: {
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};
exports.CorsRule = CorsRule;
var FilterBlobItem = {
  xmlName: "Blob",
  serializedName: "FilterBlobItem",
  type: {
    name: "Composite",
    className: "FilterBlobItem",
    modelProperties: {
      name: {
        xmlName: "Name",
        required: true,
        serializedName: "Name",
        type: {
          name: "String"
        }
      },
      containerName: {
        xmlName: "ContainerName",
        required: true,
        serializedName: "ContainerName",
        type: {
          name: "String"
        }
      },
      tags: {
        xmlName: "Tags",
        serializedName: "Tags",
        type: {
          name: "Composite",
          className: "BlobTags"
        }
      }
    }
  }
};
exports.FilterBlobItem = FilterBlobItem;
var FilterBlobSegment = {
  xmlName: "EnumerationResults",
  serializedName: "FilterBlobSegment",
  type: {
    name: "Composite",
    className: "FilterBlobSegment",
    modelProperties: {
      serviceEndpoint: {
        xmlIsAttribute: true,
        xmlName: "ServiceEndpoint",
        required: true,
        serializedName: "ServiceEndpoint",
        type: {
          name: "String"
        }
      },
      where: {
        xmlName: "Where",
        required: true,
        serializedName: "Where",
        type: {
          name: "String"
        }
      },
      blobs: {
        xmlIsWrapped: true,
        xmlName: "Blobs",
        xmlElementName: "Blob",
        required: true,
        serializedName: "Blobs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FilterBlobItem"
            }
          }
        }
      },
      continuationToken: {
        xmlName: "NextMarker",
        serializedName: "NextMarker",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.FilterBlobSegment = FilterBlobSegment;
var GeoReplication = {
  serializedName: "GeoReplication",
  type: {
    name: "Composite",
    className: "GeoReplication",
    modelProperties: {
      status: {
        xmlName: "Status",
        required: true,
        serializedName: "Status",
        type: {
          name: "String"
        }
      },
      lastSyncOn: {
        xmlName: "LastSyncTime",
        required: true,
        serializedName: "LastSyncTime",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
exports.GeoReplication = GeoReplication;
var RetentionPolicy = {
  serializedName: "RetentionPolicy",
  type: {
    name: "Composite",
    className: "RetentionPolicy",
    modelProperties: {
      enabled: {
        xmlName: "Enabled",
        required: true,
        serializedName: "Enabled",
        type: {
          name: "Boolean"
        }
      },
      days: {
        xmlName: "Days",
        serializedName: "Days",
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};
exports.RetentionPolicy = RetentionPolicy;
var Logging = {
  serializedName: "Logging",
  type: {
    name: "Composite",
    className: "Logging",
    modelProperties: {
      version: {
        xmlName: "Version",
        required: true,
        serializedName: "Version",
        type: {
          name: "String"
        }
      },
      deleteProperty: {
        xmlName: "Delete",
        required: true,
        serializedName: "Delete",
        type: {
          name: "Boolean"
        }
      },
      read: {
        xmlName: "Read",
        required: true,
        serializedName: "Read",
        type: {
          name: "Boolean"
        }
      },
      write: {
        xmlName: "Write",
        required: true,
        serializedName: "Write",
        type: {
          name: "Boolean"
        }
      },
      retentionPolicy: {
        xmlName: "RetentionPolicy",
        required: true,
        serializedName: "RetentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      }
    }
  }
};
exports.Logging = Logging;
var Metrics = {
  serializedName: "Metrics",
  type: {
    name: "Composite",
    className: "Metrics",
    modelProperties: {
      version: {
        xmlName: "Version",
        serializedName: "Version",
        type: {
          name: "String"
        }
      },
      enabled: {
        xmlName: "Enabled",
        required: true,
        serializedName: "Enabled",
        type: {
          name: "Boolean"
        }
      },
      includeAPIs: {
        xmlName: "IncludeAPIs",
        serializedName: "IncludeAPIs",
        type: {
          name: "Boolean"
        }
      },
      retentionPolicy: {
        xmlName: "RetentionPolicy",
        serializedName: "RetentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      }
    }
  }
};
exports.Metrics = Metrics;
var PageRange = {
  serializedName: "PageRange",
  type: {
    name: "Composite",
    className: "PageRange",
    modelProperties: {
      start: {
        xmlName: "Start",
        required: true,
        serializedName: "Start",
        type: {
          name: "Number"
        }
      },
      end: {
        xmlName: "End",
        required: true,
        serializedName: "End",
        type: {
          name: "Number"
        }
      }
    }
  }
};
exports.PageRange = PageRange;
var ClearRange = {
  serializedName: "ClearRange",
  type: {
    name: "Composite",
    className: "ClearRange",
    modelProperties: {
      start: {
        xmlName: "Start",
        required: true,
        serializedName: "Start",
        type: {
          name: "Number"
        }
      },
      end: {
        xmlName: "End",
        required: true,
        serializedName: "End",
        type: {
          name: "Number"
        }
      }
    }
  }
};
exports.ClearRange = ClearRange;
var PageList = {
  serializedName: "PageList",
  type: {
    name: "Composite",
    className: "PageList",
    modelProperties: {
      pageRange: {
        xmlName: "PageRange",
        xmlElementName: "PageRange",
        serializedName: "PageRange",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PageRange"
            }
          }
        }
      },
      clearRange: {
        xmlName: "ClearRange",
        xmlElementName: "ClearRange",
        serializedName: "ClearRange",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClearRange"
            }
          }
        }
      }
    }
  }
};
exports.PageList = PageList;
var QueryFormat = {
  serializedName: "QueryFormat",
  type: {
    name: "Composite",
    className: "QueryFormat",
    modelProperties: {
      type: {
        xmlName: "Type",
        serializedName: "Type",
        type: {
          name: "Enum",
          allowedValues: ["delimited", "json", "arrow"]
        }
      },
      delimitedTextConfiguration: {
        xmlName: "DelimitedTextConfiguration",
        serializedName: "DelimitedTextConfiguration",
        type: {
          name: "Composite",
          className: "DelimitedTextConfiguration"
        }
      },
      jsonTextConfiguration: {
        xmlName: "JsonTextConfiguration",
        serializedName: "JsonTextConfiguration",
        type: {
          name: "Composite",
          className: "JsonTextConfiguration"
        }
      },
      arrowConfiguration: {
        xmlName: "ArrowConfiguration",
        serializedName: "ArrowConfiguration",
        type: {
          name: "Composite",
          className: "ArrowConfiguration"
        }
      }
    }
  }
};
exports.QueryFormat = QueryFormat;
var QuerySerialization = {
  serializedName: "QuerySerialization",
  type: {
    name: "Composite",
    className: "QuerySerialization",
    modelProperties: {
      format: {
        xmlName: "Format",
        required: true,
        serializedName: "Format",
        type: {
          name: "Composite",
          className: "QueryFormat"
        }
      }
    }
  }
};
exports.QuerySerialization = QuerySerialization;
var QueryRequest = {
  serializedName: "QueryRequest",
  type: {
    name: "Composite",
    className: "QueryRequest",
    modelProperties: {
      queryType: {
        xmlName: "QueryType",
        required: true,
        isConstant: true,
        serializedName: "QueryType",
        defaultValue: 'SQL',
        type: {
          name: "String"
        }
      },
      expression: {
        xmlName: "Expression",
        required: true,
        serializedName: "Expression",
        type: {
          name: "String"
        }
      },
      inputSerialization: {
        xmlName: "InputSerialization",
        serializedName: "InputSerialization",
        type: {
          name: "Composite",
          className: "QuerySerialization"
        }
      },
      outputSerialization: {
        xmlName: "OutputSerialization",
        serializedName: "OutputSerialization",
        type: {
          name: "Composite",
          className: "QuerySerialization"
        }
      }
    }
  }
};
exports.QueryRequest = QueryRequest;
var SignedIdentifier = {
  serializedName: "SignedIdentifier",
  type: {
    name: "Composite",
    className: "SignedIdentifier",
    modelProperties: {
      id: {
        xmlName: "Id",
        required: true,
        serializedName: "Id",
        type: {
          name: "String"
        }
      },
      accessPolicy: {
        xmlName: "AccessPolicy",
        required: true,
        serializedName: "AccessPolicy",
        type: {
          name: "Composite",
          className: "AccessPolicy"
        }
      }
    }
  }
};
exports.SignedIdentifier = SignedIdentifier;
var StaticWebsite = {
  serializedName: "StaticWebsite",
  type: {
    name: "Composite",
    className: "StaticWebsite",
    modelProperties: {
      enabled: {
        xmlName: "Enabled",
        required: true,
        serializedName: "Enabled",
        type: {
          name: "Boolean"
        }
      },
      indexDocument: {
        xmlName: "IndexDocument",
        serializedName: "IndexDocument",
        type: {
          name: "String"
        }
      },
      errorDocument404Path: {
        xmlName: "ErrorDocument404Path",
        serializedName: "ErrorDocument404Path",
        type: {
          name: "String"
        }
      },
      defaultIndexDocumentPath: {
        xmlName: "DefaultIndexDocumentPath",
        serializedName: "DefaultIndexDocumentPath",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.StaticWebsite = StaticWebsite;
var BlobServiceProperties = {
  xmlName: "StorageServiceProperties",
  serializedName: "BlobServiceProperties",
  type: {
    name: "Composite",
    className: "BlobServiceProperties",
    modelProperties: {
      blobAnalyticsLogging: {
        xmlName: "Logging",
        serializedName: "Logging",
        type: {
          name: "Composite",
          className: "Logging"
        }
      },
      hourMetrics: {
        xmlName: "HourMetrics",
        serializedName: "HourMetrics",
        type: {
          name: "Composite",
          className: "Metrics"
        }
      },
      minuteMetrics: {
        xmlName: "MinuteMetrics",
        serializedName: "MinuteMetrics",
        type: {
          name: "Composite",
          className: "Metrics"
        }
      },
      cors: {
        xmlIsWrapped: true,
        xmlName: "Cors",
        xmlElementName: "CorsRule",
        serializedName: "Cors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CorsRule"
            }
          }
        }
      },
      defaultServiceVersion: {
        xmlName: "DefaultServiceVersion",
        serializedName: "DefaultServiceVersion",
        type: {
          name: "String"
        }
      },
      deleteRetentionPolicy: {
        xmlName: "DeleteRetentionPolicy",
        serializedName: "DeleteRetentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      },
      staticWebsite: {
        xmlName: "StaticWebsite",
        serializedName: "StaticWebsite",
        type: {
          name: "Composite",
          className: "StaticWebsite"
        }
      }
    }
  }
};
exports.BlobServiceProperties = BlobServiceProperties;
var BlobServiceStatistics = {
  xmlName: "StorageServiceStats",
  serializedName: "BlobServiceStatistics",
  type: {
    name: "Composite",
    className: "BlobServiceStatistics",
    modelProperties: {
      geoReplication: {
        xmlName: "GeoReplication",
        serializedName: "GeoReplication",
        type: {
          name: "Composite",
          className: "GeoReplication"
        }
      }
    }
  }
};
exports.BlobServiceStatistics = BlobServiceStatistics;
var ContainerEncryptionScope = {
  xmlName: "container-encryption-scope",
  type: {
    name: "Composite",
    className: "ContainerEncryptionScope",
    modelProperties: {
      defaultEncryptionScope: {
        xmlName: "defaultEncryptionScope",
        type: {
          name: "String"
        }
      },
      preventEncryptionScopeOverride: {
        xmlName: "preventEncryptionScopeOverride",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
exports.ContainerEncryptionScope = ContainerEncryptionScope;
var LeaseAccessConditions = {
  xmlName: "lease-access-conditions",
  type: {
    name: "Composite",
    className: "LeaseAccessConditions",
    modelProperties: {
      leaseId: {
        xmlName: "leaseId",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.LeaseAccessConditions = LeaseAccessConditions;
var ModifiedAccessConditions = {
  xmlName: "modified-access-conditions",
  type: {
    name: "Composite",
    className: "ModifiedAccessConditions",
    modelProperties: {
      ifModifiedSince: {
        xmlName: "ifModifiedSince",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifUnmodifiedSince: {
        xmlName: "ifUnmodifiedSince",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      ifMatch: {
        xmlName: "ifMatch",
        type: {
          name: "String"
        }
      },
      ifNoneMatch: {
        xmlName: "ifNoneMatch",
        type: {
          name: "String"
        }
      },
      ifTags: {
        xmlName: "ifTags",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.ModifiedAccessConditions = ModifiedAccessConditions;
var DirectoryHttpHeaders = {
  xmlName: "directory-http-headers",
  type: {
    name: "Composite",
    className: "DirectoryHttpHeaders",
    modelProperties: {
      cacheControl: {
        xmlName: "cacheControl",
        type: {
          name: "String"
        }
      },
      contentType: {
        xmlName: "contentType",
        type: {
          name: "String"
        }
      },
      contentEncoding: {
        xmlName: "contentEncoding",
        type: {
          name: "String"
        }
      },
      contentLanguage: {
        xmlName: "contentLanguage",
        type: {
          name: "String"
        }
      },
      contentDisposition: {
        xmlName: "contentDisposition",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.DirectoryHttpHeaders = DirectoryHttpHeaders;
var SourceModifiedAccessConditions = {
  xmlName: "source-modified-access-conditions",
  type: {
    name: "Composite",
    className: "SourceModifiedAccessConditions",
    modelProperties: {
      sourceIfModifiedSince: {
        xmlName: "sourceIfModifiedSince",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      sourceIfUnmodifiedSince: {
        xmlName: "sourceIfUnmodifiedSince",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      sourceIfMatch: {
        xmlName: "sourceIfMatch",
        type: {
          name: "String"
        }
      },
      sourceIfNoneMatch: {
        xmlName: "sourceIfNoneMatch",
        type: {
          name: "String"
        }
      },
      sourceIfTags: {
        xmlName: "sourceIfTags",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.SourceModifiedAccessConditions = SourceModifiedAccessConditions;
var CpkInfo = {
  xmlName: "cpk-info",
  type: {
    name: "Composite",
    className: "CpkInfo",
    modelProperties: {
      encryptionKey: {
        xmlName: "encryptionKey",
        type: {
          name: "String"
        }
      },
      encryptionKeySha256: {
        xmlName: "encryptionKeySha256",
        type: {
          name: "String"
        }
      },
      encryptionAlgorithm: {
        xmlName: "encryptionAlgorithm",
        type: {
          name: "Enum",
          allowedValues: ["AES256"]
        }
      }
    }
  }
};
exports.CpkInfo = CpkInfo;
var BlobHTTPHeaders = {
  xmlName: "blob-HTTP-headers",
  type: {
    name: "Composite",
    className: "BlobHTTPHeaders",
    modelProperties: {
      blobCacheControl: {
        xmlName: "blobCacheControl",
        type: {
          name: "String"
        }
      },
      blobContentType: {
        xmlName: "blobContentType",
        type: {
          name: "String"
        }
      },
      blobContentMD5: {
        xmlName: "blobContentMD5",
        type: {
          name: "ByteArray"
        }
      },
      blobContentEncoding: {
        xmlName: "blobContentEncoding",
        type: {
          name: "String"
        }
      },
      blobContentLanguage: {
        xmlName: "blobContentLanguage",
        type: {
          name: "String"
        }
      },
      blobContentDisposition: {
        xmlName: "blobContentDisposition",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlobHTTPHeaders = BlobHTTPHeaders;
var SequenceNumberAccessConditions = {
  xmlName: "sequence-number-access-conditions",
  type: {
    name: "Composite",
    className: "SequenceNumberAccessConditions",
    modelProperties: {
      ifSequenceNumberLessThanOrEqualTo: {
        xmlName: "ifSequenceNumberLessThanOrEqualTo",
        type: {
          name: "Number"
        }
      },
      ifSequenceNumberLessThan: {
        xmlName: "ifSequenceNumberLessThan",
        type: {
          name: "Number"
        }
      },
      ifSequenceNumberEqualTo: {
        xmlName: "ifSequenceNumberEqualTo",
        type: {
          name: "Number"
        }
      }
    }
  }
};
exports.SequenceNumberAccessConditions = SequenceNumberAccessConditions;
var AppendPositionAccessConditions = {
  xmlName: "append-position-access-conditions",
  type: {
    name: "Composite",
    className: "AppendPositionAccessConditions",
    modelProperties: {
      maxSize: {
        xmlName: "maxSize",
        type: {
          name: "Number"
        }
      },
      appendPosition: {
        xmlName: "appendPosition",
        type: {
          name: "Number"
        }
      }
    }
  }
};
exports.AppendPositionAccessConditions = AppendPositionAccessConditions;
var ServiceSetPropertiesHeaders = {
  serializedName: "service-setproperties-headers",
  type: {
    name: "Composite",
    className: "ServiceSetPropertiesHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.ServiceSetPropertiesHeaders = ServiceSetPropertiesHeaders;
var ServiceGetPropertiesHeaders = {
  serializedName: "service-getproperties-headers",
  type: {
    name: "Composite",
    className: "ServiceGetPropertiesHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.ServiceGetPropertiesHeaders = ServiceGetPropertiesHeaders;
var ServiceGetStatisticsHeaders = {
  serializedName: "service-getstatistics-headers",
  type: {
    name: "Composite",
    className: "ServiceGetStatisticsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.ServiceGetStatisticsHeaders = ServiceGetStatisticsHeaders;
var ServiceListContainersSegmentHeaders = {
  serializedName: "service-listcontainerssegment-headers",
  type: {
    name: "Composite",
    className: "ServiceListContainersSegmentHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.ServiceListContainersSegmentHeaders = ServiceListContainersSegmentHeaders;
var ServiceGetUserDelegationKeyHeaders = {
  serializedName: "service-getuserdelegationkey-headers",
  type: {
    name: "Composite",
    className: "ServiceGetUserDelegationKeyHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.ServiceGetUserDelegationKeyHeaders = ServiceGetUserDelegationKeyHeaders;
var ServiceGetAccountInfoHeaders = {
  serializedName: "service-getaccountinfo-headers",
  type: {
    name: "Composite",
    className: "ServiceGetAccountInfoHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      skuName: {
        serializedName: "x-ms-sku-name",
        type: {
          name: "Enum",
          allowedValues: ["Standard_LRS", "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS"]
        }
      },
      accountKind: {
        serializedName: "x-ms-account-kind",
        type: {
          name: "Enum",
          allowedValues: ["Storage", "BlobStorage", "StorageV2", "FileStorage", "BlockBlobStorage"]
        }
      },
      isHierarchicalNamespaceEnabled: {
        serializedName: "x-ms-is-hns-enabled",
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.ServiceGetAccountInfoHeaders = ServiceGetAccountInfoHeaders;
var ServiceSubmitBatchHeaders = {
  serializedName: "service-submitbatch-headers",
  type: {
    name: "Composite",
    className: "ServiceSubmitBatchHeaders",
    modelProperties: {
      contentType: {
        serializedName: "content-type",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.ServiceSubmitBatchHeaders = ServiceSubmitBatchHeaders;
var ServiceFilterBlobsHeaders = {
  serializedName: "service-filterblobs-headers",
  type: {
    name: "Composite",
    className: "ServiceFilterBlobsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.ServiceFilterBlobsHeaders = ServiceFilterBlobsHeaders;
var ContainerCreateHeaders = {
  serializedName: "container-create-headers",
  type: {
    name: "Composite",
    className: "ContainerCreateHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.ContainerCreateHeaders = ContainerCreateHeaders;
var ContainerGetPropertiesHeaders = {
  serializedName: "container-getproperties-headers",
  type: {
    name: "Composite",
    className: "ContainerGetPropertiesHeaders",
    modelProperties: {
      metadata: {
        serializedName: "x-ms-meta",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        },
        headerCollectionPrefix: "x-ms-meta-"
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseDuration: {
        serializedName: "x-ms-lease-duration",
        type: {
          name: "Enum",
          allowedValues: ["infinite", "fixed"]
        }
      },
      leaseState: {
        serializedName: "x-ms-lease-state",
        type: {
          name: "Enum",
          allowedValues: ["available", "leased", "expired", "breaking", "broken"]
        }
      },
      leaseStatus: {
        serializedName: "x-ms-lease-status",
        type: {
          name: "Enum",
          allowedValues: ["locked", "unlocked"]
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobPublicAccess: {
        serializedName: "x-ms-blob-public-access",
        type: {
          name: "String"
        }
      },
      hasImmutabilityPolicy: {
        serializedName: "x-ms-has-immutability-policy",
        type: {
          name: "Boolean"
        }
      },
      hasLegalHold: {
        serializedName: "x-ms-has-legal-hold",
        type: {
          name: "Boolean"
        }
      },
      defaultEncryptionScope: {
        serializedName: "x-ms-default-encryption-scope",
        type: {
          name: "String"
        }
      },
      denyEncryptionScopeOverride: {
        serializedName: "x-ms-deny-encryption-scope-override",
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.ContainerGetPropertiesHeaders = ContainerGetPropertiesHeaders;
var ContainerDeleteHeaders = {
  serializedName: "container-delete-headers",
  type: {
    name: "Composite",
    className: "ContainerDeleteHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.ContainerDeleteHeaders = ContainerDeleteHeaders;
var ContainerSetMetadataHeaders = {
  serializedName: "container-setmetadata-headers",
  type: {
    name: "Composite",
    className: "ContainerSetMetadataHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.ContainerSetMetadataHeaders = ContainerSetMetadataHeaders;
var ContainerGetAccessPolicyHeaders = {
  serializedName: "container-getaccesspolicy-headers",
  type: {
    name: "Composite",
    className: "ContainerGetAccessPolicyHeaders",
    modelProperties: {
      blobPublicAccess: {
        serializedName: "x-ms-blob-public-access",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.ContainerGetAccessPolicyHeaders = ContainerGetAccessPolicyHeaders;
var ContainerSetAccessPolicyHeaders = {
  serializedName: "container-setaccesspolicy-headers",
  type: {
    name: "Composite",
    className: "ContainerSetAccessPolicyHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.ContainerSetAccessPolicyHeaders = ContainerSetAccessPolicyHeaders;
var ContainerRestoreHeaders = {
  serializedName: "container-restore-headers",
  type: {
    name: "Composite",
    className: "ContainerRestoreHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.ContainerRestoreHeaders = ContainerRestoreHeaders;
var ContainerRenameHeaders = {
  serializedName: "container-rename-headers",
  type: {
    name: "Composite",
    className: "ContainerRenameHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.ContainerRenameHeaders = ContainerRenameHeaders;
var ContainerSubmitBatchHeaders = {
  serializedName: "container-submitbatch-headers",
  type: {
    name: "Composite",
    className: "ContainerSubmitBatchHeaders",
    modelProperties: {
      contentType: {
        serializedName: "content-type",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.ContainerSubmitBatchHeaders = ContainerSubmitBatchHeaders;
var ContainerAcquireLeaseHeaders = {
  serializedName: "container-acquirelease-headers",
  type: {
    name: "Composite",
    className: "ContainerAcquireLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseId: {
        serializedName: "x-ms-lease-id",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.ContainerAcquireLeaseHeaders = ContainerAcquireLeaseHeaders;
var ContainerReleaseLeaseHeaders = {
  serializedName: "container-releaselease-headers",
  type: {
    name: "Composite",
    className: "ContainerReleaseLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.ContainerReleaseLeaseHeaders = ContainerReleaseLeaseHeaders;
var ContainerRenewLeaseHeaders = {
  serializedName: "container-renewlease-headers",
  type: {
    name: "Composite",
    className: "ContainerRenewLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseId: {
        serializedName: "x-ms-lease-id",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.ContainerRenewLeaseHeaders = ContainerRenewLeaseHeaders;
var ContainerBreakLeaseHeaders = {
  serializedName: "container-breaklease-headers",
  type: {
    name: "Composite",
    className: "ContainerBreakLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseTime: {
        serializedName: "x-ms-lease-time",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.ContainerBreakLeaseHeaders = ContainerBreakLeaseHeaders;
var ContainerChangeLeaseHeaders = {
  serializedName: "container-changelease-headers",
  type: {
    name: "Composite",
    className: "ContainerChangeLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseId: {
        serializedName: "x-ms-lease-id",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.ContainerChangeLeaseHeaders = ContainerChangeLeaseHeaders;
var ContainerListBlobFlatSegmentHeaders = {
  serializedName: "container-listblobflatsegment-headers",
  type: {
    name: "Composite",
    className: "ContainerListBlobFlatSegmentHeaders",
    modelProperties: {
      contentType: {
        serializedName: "content-type",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.ContainerListBlobFlatSegmentHeaders = ContainerListBlobFlatSegmentHeaders;
var ContainerListBlobHierarchySegmentHeaders = {
  serializedName: "container-listblobhierarchysegment-headers",
  type: {
    name: "Composite",
    className: "ContainerListBlobHierarchySegmentHeaders",
    modelProperties: {
      contentType: {
        serializedName: "content-type",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.ContainerListBlobHierarchySegmentHeaders = ContainerListBlobHierarchySegmentHeaders;
var ContainerGetAccountInfoHeaders = {
  serializedName: "container-getaccountinfo-headers",
  type: {
    name: "Composite",
    className: "ContainerGetAccountInfoHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      skuName: {
        serializedName: "x-ms-sku-name",
        type: {
          name: "Enum",
          allowedValues: ["Standard_LRS", "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS"]
        }
      },
      accountKind: {
        serializedName: "x-ms-account-kind",
        type: {
          name: "Enum",
          allowedValues: ["Storage", "BlobStorage", "StorageV2", "FileStorage", "BlockBlobStorage"]
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.ContainerGetAccountInfoHeaders = ContainerGetAccountInfoHeaders;
var DirectoryCreateHeaders = {
  serializedName: "directory-create-headers",
  type: {
    name: "Composite",
    className: "DirectoryCreateHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      contentLength: {
        serializedName: "content-length",
        type: {
          name: "Number"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
exports.DirectoryCreateHeaders = DirectoryCreateHeaders;
var DirectoryRenameHeaders = {
  serializedName: "directory-rename-headers",
  type: {
    name: "Composite",
    className: "DirectoryRenameHeaders",
    modelProperties: {
      marker: {
        serializedName: "x-ms-continuation",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      contentLength: {
        serializedName: "content-length",
        type: {
          name: "Number"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
exports.DirectoryRenameHeaders = DirectoryRenameHeaders;
var DirectoryDeleteHeaders = {
  serializedName: "directory-delete-headers",
  type: {
    name: "Composite",
    className: "DirectoryDeleteHeaders",
    modelProperties: {
      marker: {
        serializedName: "x-ms-continuation",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
exports.DirectoryDeleteHeaders = DirectoryDeleteHeaders;
var DirectorySetAccessControlHeaders = {
  serializedName: "directory-setaccesscontrol-headers",
  type: {
    name: "Composite",
    className: "DirectorySetAccessControlHeaders",
    modelProperties: {
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.DirectorySetAccessControlHeaders = DirectorySetAccessControlHeaders;
var DirectoryGetAccessControlHeaders = {
  serializedName: "directory-getaccesscontrol-headers",
  type: {
    name: "Composite",
    className: "DirectoryGetAccessControlHeaders",
    modelProperties: {
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      xMsOwner: {
        serializedName: "x-ms-owner",
        type: {
          name: "String"
        }
      },
      xMsGroup: {
        serializedName: "x-ms-group",
        type: {
          name: "String"
        }
      },
      xMsPermissions: {
        serializedName: "x-ms-permissions",
        type: {
          name: "String"
        }
      },
      xMsAcl: {
        serializedName: "x-ms-acl",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.DirectoryGetAccessControlHeaders = DirectoryGetAccessControlHeaders;
var BlobDownloadHeaders = {
  serializedName: "blob-download-headers",
  type: {
    name: "Composite",
    className: "BlobDownloadHeaders",
    modelProperties: {
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      metadata: {
        serializedName: "x-ms-meta",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        },
        headerCollectionPrefix: "x-ms-meta-"
      },
      objectReplicationPolicyId: {
        serializedName: "x-ms-or-policy-id",
        type: {
          name: "String"
        }
      },
      objectReplicationRules: {
        serializedName: "x-ms-or",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        },
        headerCollectionPrefix: "x-ms-or-"
      },
      contentLength: {
        serializedName: "content-length",
        type: {
          name: "Number"
        }
      },
      contentType: {
        serializedName: "content-type",
        type: {
          name: "String"
        }
      },
      contentRange: {
        serializedName: "content-range",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      contentEncoding: {
        serializedName: "content-encoding",
        type: {
          name: "String"
        }
      },
      cacheControl: {
        serializedName: "cache-control",
        type: {
          name: "String"
        }
      },
      contentDisposition: {
        serializedName: "content-disposition",
        type: {
          name: "String"
        }
      },
      contentLanguage: {
        serializedName: "content-language",
        type: {
          name: "String"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      blobType: {
        serializedName: "x-ms-blob-type",
        type: {
          name: "Enum",
          allowedValues: ["BlockBlob", "PageBlob", "AppendBlob"]
        }
      },
      copyCompletedOn: {
        serializedName: "x-ms-copy-completion-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyStatusDescription: {
        serializedName: "x-ms-copy-status-description",
        type: {
          name: "String"
        }
      },
      copyId: {
        serializedName: "x-ms-copy-id",
        type: {
          name: "String"
        }
      },
      copyProgress: {
        serializedName: "x-ms-copy-progress",
        type: {
          name: "String"
        }
      },
      copySource: {
        serializedName: "x-ms-copy-source",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        serializedName: "x-ms-copy-status",
        type: {
          name: "Enum",
          allowedValues: ["pending", "success", "aborted", "failed"]
        }
      },
      leaseDuration: {
        serializedName: "x-ms-lease-duration",
        type: {
          name: "Enum",
          allowedValues: ["infinite", "fixed"]
        }
      },
      leaseState: {
        serializedName: "x-ms-lease-state",
        type: {
          name: "Enum",
          allowedValues: ["available", "leased", "expired", "breaking", "broken"]
        }
      },
      leaseStatus: {
        serializedName: "x-ms-lease-status",
        type: {
          name: "Enum",
          allowedValues: ["locked", "unlocked"]
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      isCurrentVersion: {
        serializedName: "x-ms-is-current-version",
        type: {
          name: "Boolean"
        }
      },
      acceptRanges: {
        serializedName: "accept-ranges",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobCommittedBlockCount: {
        serializedName: "x-ms-blob-committed-block-count",
        type: {
          name: "Number"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      blobContentMD5: {
        serializedName: "x-ms-blob-content-md5",
        type: {
          name: "ByteArray"
        }
      },
      tagCount: {
        serializedName: "x-ms-tag-count",
        type: {
          name: "Number"
        }
      },
      isSealed: {
        serializedName: "x-ms-blob-sealed",
        type: {
          name: "Boolean"
        }
      },
      lastAccessed: {
        serializedName: "x-ms-last-access-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentCrc64: {
        serializedName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlobDownloadHeaders = BlobDownloadHeaders;
var BlobGetPropertiesHeaders = {
  serializedName: "blob-getproperties-headers",
  type: {
    name: "Composite",
    className: "BlobGetPropertiesHeaders",
    modelProperties: {
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      createdOn: {
        serializedName: "x-ms-creation-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      metadata: {
        serializedName: "x-ms-meta",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        },
        headerCollectionPrefix: "x-ms-meta-"
      },
      objectReplicationPolicyId: {
        serializedName: "x-ms-or-policy-id",
        type: {
          name: "String"
        }
      },
      objectReplicationRules: {
        serializedName: "x-ms-or",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        },
        headerCollectionPrefix: "x-ms-or-"
      },
      blobType: {
        serializedName: "x-ms-blob-type",
        type: {
          name: "Enum",
          allowedValues: ["BlockBlob", "PageBlob", "AppendBlob"]
        }
      },
      copyCompletedOn: {
        serializedName: "x-ms-copy-completion-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyStatusDescription: {
        serializedName: "x-ms-copy-status-description",
        type: {
          name: "String"
        }
      },
      copyId: {
        serializedName: "x-ms-copy-id",
        type: {
          name: "String"
        }
      },
      copyProgress: {
        serializedName: "x-ms-copy-progress",
        type: {
          name: "String"
        }
      },
      copySource: {
        serializedName: "x-ms-copy-source",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        serializedName: "x-ms-copy-status",
        type: {
          name: "Enum",
          allowedValues: ["pending", "success", "aborted", "failed"]
        }
      },
      isIncrementalCopy: {
        serializedName: "x-ms-incremental-copy",
        type: {
          name: "Boolean"
        }
      },
      destinationSnapshot: {
        serializedName: "x-ms-copy-destination-snapshot",
        type: {
          name: "String"
        }
      },
      leaseDuration: {
        serializedName: "x-ms-lease-duration",
        type: {
          name: "Enum",
          allowedValues: ["infinite", "fixed"]
        }
      },
      leaseState: {
        serializedName: "x-ms-lease-state",
        type: {
          name: "Enum",
          allowedValues: ["available", "leased", "expired", "breaking", "broken"]
        }
      },
      leaseStatus: {
        serializedName: "x-ms-lease-status",
        type: {
          name: "Enum",
          allowedValues: ["locked", "unlocked"]
        }
      },
      contentLength: {
        serializedName: "content-length",
        type: {
          name: "Number"
        }
      },
      contentType: {
        serializedName: "content-type",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      contentEncoding: {
        serializedName: "content-encoding",
        type: {
          name: "String"
        }
      },
      contentDisposition: {
        serializedName: "content-disposition",
        type: {
          name: "String"
        }
      },
      contentLanguage: {
        serializedName: "content-language",
        type: {
          name: "String"
        }
      },
      cacheControl: {
        serializedName: "cache-control",
        type: {
          name: "String"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      acceptRanges: {
        serializedName: "accept-ranges",
        type: {
          name: "String"
        }
      },
      blobCommittedBlockCount: {
        serializedName: "x-ms-blob-committed-block-count",
        type: {
          name: "Number"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      accessTier: {
        serializedName: "x-ms-access-tier",
        type: {
          name: "String"
        }
      },
      accessTierInferred: {
        serializedName: "x-ms-access-tier-inferred",
        type: {
          name: "Boolean"
        }
      },
      archiveStatus: {
        serializedName: "x-ms-archive-status",
        type: {
          name: "String"
        }
      },
      accessTierChangedOn: {
        serializedName: "x-ms-access-tier-change-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      isCurrentVersion: {
        serializedName: "x-ms-is-current-version",
        type: {
          name: "Boolean"
        }
      },
      tagCount: {
        serializedName: "x-ms-tag-count",
        type: {
          name: "Number"
        }
      },
      expiresOn: {
        serializedName: "x-ms-expiry-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isSealed: {
        serializedName: "x-ms-blob-sealed",
        type: {
          name: "Boolean"
        }
      },
      rehydratePriority: {
        serializedName: "x-ms-rehydrate-priority",
        type: {
          name: "String"
        }
      },
      lastAccessed: {
        serializedName: "x-ms-last-access-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlobGetPropertiesHeaders = BlobGetPropertiesHeaders;
var BlobDeleteHeaders = {
  serializedName: "blob-delete-headers",
  type: {
    name: "Composite",
    className: "BlobDeleteHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlobDeleteHeaders = BlobDeleteHeaders;
var BlobSetAccessControlHeaders = {
  serializedName: "blob-setaccesscontrol-headers",
  type: {
    name: "Composite",
    className: "BlobSetAccessControlHeaders",
    modelProperties: {
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlobSetAccessControlHeaders = BlobSetAccessControlHeaders;
var BlobGetAccessControlHeaders = {
  serializedName: "blob-getaccesscontrol-headers",
  type: {
    name: "Composite",
    className: "BlobGetAccessControlHeaders",
    modelProperties: {
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      xMsOwner: {
        serializedName: "x-ms-owner",
        type: {
          name: "String"
        }
      },
      xMsGroup: {
        serializedName: "x-ms-group",
        type: {
          name: "String"
        }
      },
      xMsPermissions: {
        serializedName: "x-ms-permissions",
        type: {
          name: "String"
        }
      },
      xMsAcl: {
        serializedName: "x-ms-acl",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlobGetAccessControlHeaders = BlobGetAccessControlHeaders;
var BlobRenameHeaders = {
  serializedName: "blob-rename-headers",
  type: {
    name: "Composite",
    className: "BlobRenameHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      contentLength: {
        serializedName: "content-length",
        type: {
          name: "Number"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
exports.BlobRenameHeaders = BlobRenameHeaders;
var PageBlobCreateHeaders = {
  serializedName: "pageblob-create-headers",
  type: {
    name: "Composite",
    className: "PageBlobCreateHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.PageBlobCreateHeaders = PageBlobCreateHeaders;
var AppendBlobCreateHeaders = {
  serializedName: "appendblob-create-headers",
  type: {
    name: "Composite",
    className: "AppendBlobCreateHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.AppendBlobCreateHeaders = AppendBlobCreateHeaders;
var BlockBlobUploadHeaders = {
  serializedName: "blockblob-upload-headers",
  type: {
    name: "Composite",
    className: "BlockBlobUploadHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlockBlobUploadHeaders = BlockBlobUploadHeaders;
var BlockBlobPutBlobFromUrlHeaders = {
  serializedName: "blockblob-putblobfromurl-headers",
  type: {
    name: "Composite",
    className: "BlockBlobPutBlobFromUrlHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlockBlobPutBlobFromUrlHeaders = BlockBlobPutBlobFromUrlHeaders;
var BlobUndeleteHeaders = {
  serializedName: "blob-undelete-headers",
  type: {
    name: "Composite",
    className: "BlobUndeleteHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlobUndeleteHeaders = BlobUndeleteHeaders;
var BlobSetExpiryHeaders = {
  serializedName: "blob-setexpiry-headers",
  type: {
    name: "Composite",
    className: "BlobSetExpiryHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlobSetExpiryHeaders = BlobSetExpiryHeaders;
var BlobSetHTTPHeadersHeaders = {
  serializedName: "blob-sethttpheaders-headers",
  type: {
    name: "Composite",
    className: "BlobSetHTTPHeadersHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlobSetHTTPHeadersHeaders = BlobSetHTTPHeadersHeaders;
var BlobSetMetadataHeaders = {
  serializedName: "blob-setmetadata-headers",
  type: {
    name: "Composite",
    className: "BlobSetMetadataHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlobSetMetadataHeaders = BlobSetMetadataHeaders;
var BlobAcquireLeaseHeaders = {
  serializedName: "blob-acquirelease-headers",
  type: {
    name: "Composite",
    className: "BlobAcquireLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseId: {
        serializedName: "x-ms-lease-id",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlobAcquireLeaseHeaders = BlobAcquireLeaseHeaders;
var BlobReleaseLeaseHeaders = {
  serializedName: "blob-releaselease-headers",
  type: {
    name: "Composite",
    className: "BlobReleaseLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlobReleaseLeaseHeaders = BlobReleaseLeaseHeaders;
var BlobRenewLeaseHeaders = {
  serializedName: "blob-renewlease-headers",
  type: {
    name: "Composite",
    className: "BlobRenewLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseId: {
        serializedName: "x-ms-lease-id",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlobRenewLeaseHeaders = BlobRenewLeaseHeaders;
var BlobChangeLeaseHeaders = {
  serializedName: "blob-changelease-headers",
  type: {
    name: "Composite",
    className: "BlobChangeLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      leaseId: {
        serializedName: "x-ms-lease-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlobChangeLeaseHeaders = BlobChangeLeaseHeaders;
var BlobBreakLeaseHeaders = {
  serializedName: "blob-breaklease-headers",
  type: {
    name: "Composite",
    className: "BlobBreakLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseTime: {
        serializedName: "x-ms-lease-time",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlobBreakLeaseHeaders = BlobBreakLeaseHeaders;
var BlobCreateSnapshotHeaders = {
  serializedName: "blob-createsnapshot-headers",
  type: {
    name: "Composite",
    className: "BlobCreateSnapshotHeaders",
    modelProperties: {
      snapshot: {
        serializedName: "x-ms-snapshot",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlobCreateSnapshotHeaders = BlobCreateSnapshotHeaders;
var BlobStartCopyFromURLHeaders = {
  serializedName: "blob-startcopyfromurl-headers",
  type: {
    name: "Composite",
    className: "BlobStartCopyFromURLHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyId: {
        serializedName: "x-ms-copy-id",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        serializedName: "x-ms-copy-status",
        type: {
          name: "Enum",
          allowedValues: ["pending", "success", "aborted", "failed"]
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlobStartCopyFromURLHeaders = BlobStartCopyFromURLHeaders;
var BlobCopyFromURLHeaders = {
  serializedName: "blob-copyfromurl-headers",
  type: {
    name: "Composite",
    className: "BlobCopyFromURLHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyId: {
        serializedName: "x-ms-copy-id",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        serializedName: "x-ms-copy-status",
        type: {
          name: "Enum",
          allowedValues: ["success"]
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlobCopyFromURLHeaders = BlobCopyFromURLHeaders;
var BlobAbortCopyFromURLHeaders = {
  serializedName: "blob-abortcopyfromurl-headers",
  type: {
    name: "Composite",
    className: "BlobAbortCopyFromURLHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlobAbortCopyFromURLHeaders = BlobAbortCopyFromURLHeaders;
var BlobSetTierHeaders = {
  serializedName: "blob-settier-headers",
  type: {
    name: "Composite",
    className: "BlobSetTierHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlobSetTierHeaders = BlobSetTierHeaders;
var BlobGetAccountInfoHeaders = {
  serializedName: "blob-getaccountinfo-headers",
  type: {
    name: "Composite",
    className: "BlobGetAccountInfoHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      skuName: {
        serializedName: "x-ms-sku-name",
        type: {
          name: "Enum",
          allowedValues: ["Standard_LRS", "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS"]
        }
      },
      accountKind: {
        serializedName: "x-ms-account-kind",
        type: {
          name: "Enum",
          allowedValues: ["Storage", "BlobStorage", "StorageV2", "FileStorage", "BlockBlobStorage"]
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlobGetAccountInfoHeaders = BlobGetAccountInfoHeaders;
var BlockBlobStageBlockHeaders = {
  serializedName: "blockblob-stageblock-headers",
  type: {
    name: "Composite",
    className: "BlockBlobStageBlockHeaders",
    modelProperties: {
      contentMD5: {
        serializedName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlockBlobStageBlockHeaders = BlockBlobStageBlockHeaders;
var BlockBlobStageBlockFromURLHeaders = {
  serializedName: "blockblob-stageblockfromurl-headers",
  type: {
    name: "Composite",
    className: "BlockBlobStageBlockFromURLHeaders",
    modelProperties: {
      contentMD5: {
        serializedName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlockBlobStageBlockFromURLHeaders = BlockBlobStageBlockFromURLHeaders;
var BlockBlobCommitBlockListHeaders = {
  serializedName: "blockblob-commitblocklist-headers",
  type: {
    name: "Composite",
    className: "BlockBlobCommitBlockListHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlockBlobCommitBlockListHeaders = BlockBlobCommitBlockListHeaders;
var BlockBlobGetBlockListHeaders = {
  serializedName: "blockblob-getblocklist-headers",
  type: {
    name: "Composite",
    className: "BlockBlobGetBlockListHeaders",
    modelProperties: {
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      contentType: {
        serializedName: "content-type",
        type: {
          name: "String"
        }
      },
      blobContentLength: {
        serializedName: "x-ms-blob-content-length",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlockBlobGetBlockListHeaders = BlockBlobGetBlockListHeaders;
var PageBlobUploadPagesHeaders = {
  serializedName: "pageblob-uploadpages-headers",
  type: {
    name: "Composite",
    className: "PageBlobUploadPagesHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.PageBlobUploadPagesHeaders = PageBlobUploadPagesHeaders;
var PageBlobClearPagesHeaders = {
  serializedName: "pageblob-clearpages-headers",
  type: {
    name: "Composite",
    className: "PageBlobClearPagesHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.PageBlobClearPagesHeaders = PageBlobClearPagesHeaders;
var PageBlobUploadPagesFromURLHeaders = {
  serializedName: "pageblob-uploadpagesfromurl-headers",
  type: {
    name: "Composite",
    className: "PageBlobUploadPagesFromURLHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.PageBlobUploadPagesFromURLHeaders = PageBlobUploadPagesFromURLHeaders;
var PageBlobGetPageRangesHeaders = {
  serializedName: "pageblob-getpageranges-headers",
  type: {
    name: "Composite",
    className: "PageBlobGetPageRangesHeaders",
    modelProperties: {
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      blobContentLength: {
        serializedName: "x-ms-blob-content-length",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.PageBlobGetPageRangesHeaders = PageBlobGetPageRangesHeaders;
var PageBlobGetPageRangesDiffHeaders = {
  serializedName: "pageblob-getpagerangesdiff-headers",
  type: {
    name: "Composite",
    className: "PageBlobGetPageRangesDiffHeaders",
    modelProperties: {
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      blobContentLength: {
        serializedName: "x-ms-blob-content-length",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.PageBlobGetPageRangesDiffHeaders = PageBlobGetPageRangesDiffHeaders;
var PageBlobResizeHeaders = {
  serializedName: "pageblob-resize-headers",
  type: {
    name: "Composite",
    className: "PageBlobResizeHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.PageBlobResizeHeaders = PageBlobResizeHeaders;
var PageBlobUpdateSequenceNumberHeaders = {
  serializedName: "pageblob-updatesequencenumber-headers",
  type: {
    name: "Composite",
    className: "PageBlobUpdateSequenceNumberHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.PageBlobUpdateSequenceNumberHeaders = PageBlobUpdateSequenceNumberHeaders;
var PageBlobCopyIncrementalHeaders = {
  serializedName: "pageblob-copyincremental-headers",
  type: {
    name: "Composite",
    className: "PageBlobCopyIncrementalHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyId: {
        serializedName: "x-ms-copy-id",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        serializedName: "x-ms-copy-status",
        type: {
          name: "Enum",
          allowedValues: ["pending", "success", "aborted", "failed"]
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.PageBlobCopyIncrementalHeaders = PageBlobCopyIncrementalHeaders;
var AppendBlobAppendBlockHeaders = {
  serializedName: "appendblob-appendblock-headers",
  type: {
    name: "Composite",
    className: "AppendBlobAppendBlockHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobAppendOffset: {
        serializedName: "x-ms-blob-append-offset",
        type: {
          name: "String"
        }
      },
      blobCommittedBlockCount: {
        serializedName: "x-ms-blob-committed-block-count",
        type: {
          name: "Number"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.AppendBlobAppendBlockHeaders = AppendBlobAppendBlockHeaders;
var AppendBlobAppendBlockFromUrlHeaders = {
  serializedName: "appendblob-appendblockfromurl-headers",
  type: {
    name: "Composite",
    className: "AppendBlobAppendBlockFromUrlHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobAppendOffset: {
        serializedName: "x-ms-blob-append-offset",
        type: {
          name: "String"
        }
      },
      blobCommittedBlockCount: {
        serializedName: "x-ms-blob-committed-block-count",
        type: {
          name: "Number"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.AppendBlobAppendBlockFromUrlHeaders = AppendBlobAppendBlockFromUrlHeaders;
var AppendBlobSealHeaders = {
  serializedName: "appendblob-seal-headers",
  type: {
    name: "Composite",
    className: "AppendBlobSealHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isSealed: {
        serializedName: "x-ms-blob-sealed",
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.AppendBlobSealHeaders = AppendBlobSealHeaders;
var BlobQueryHeaders = {
  serializedName: "blob-query-headers",
  type: {
    name: "Composite",
    className: "BlobQueryHeaders",
    modelProperties: {
      lastModified: {
        serializedName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      metadata: {
        serializedName: "x-ms-meta",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        },
        headerCollectionPrefix: "x-ms-meta-"
      },
      contentLength: {
        serializedName: "content-length",
        type: {
          name: "Number"
        }
      },
      contentType: {
        serializedName: "content-type",
        type: {
          name: "String"
        }
      },
      contentRange: {
        serializedName: "content-range",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      contentEncoding: {
        serializedName: "content-encoding",
        type: {
          name: "String"
        }
      },
      cacheControl: {
        serializedName: "cache-control",
        type: {
          name: "String"
        }
      },
      contentDisposition: {
        serializedName: "content-disposition",
        type: {
          name: "String"
        }
      },
      contentLanguage: {
        serializedName: "content-language",
        type: {
          name: "String"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      blobType: {
        serializedName: "x-ms-blob-type",
        type: {
          name: "Enum",
          allowedValues: ["BlockBlob", "PageBlob", "AppendBlob"]
        }
      },
      copyCompletionTime: {
        serializedName: "x-ms-copy-completion-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyStatusDescription: {
        serializedName: "x-ms-copy-status-description",
        type: {
          name: "String"
        }
      },
      copyId: {
        serializedName: "x-ms-copy-id",
        type: {
          name: "String"
        }
      },
      copyProgress: {
        serializedName: "x-ms-copy-progress",
        type: {
          name: "String"
        }
      },
      copySource: {
        serializedName: "x-ms-copy-source",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        serializedName: "x-ms-copy-status",
        type: {
          name: "Enum",
          allowedValues: ["pending", "success", "aborted", "failed"]
        }
      },
      leaseDuration: {
        serializedName: "x-ms-lease-duration",
        type: {
          name: "Enum",
          allowedValues: ["infinite", "fixed"]
        }
      },
      leaseState: {
        serializedName: "x-ms-lease-state",
        type: {
          name: "Enum",
          allowedValues: ["available", "leased", "expired", "breaking", "broken"]
        }
      },
      leaseStatus: {
        serializedName: "x-ms-lease-status",
        type: {
          name: "Enum",
          allowedValues: ["locked", "unlocked"]
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      acceptRanges: {
        serializedName: "accept-ranges",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobCommittedBlockCount: {
        serializedName: "x-ms-blob-committed-block-count",
        type: {
          name: "Number"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      blobContentMD5: {
        serializedName: "x-ms-blob-content-md5",
        type: {
          name: "ByteArray"
        }
      },
      contentCrc64: {
        serializedName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlobQueryHeaders = BlobQueryHeaders;
var BlobGetTagsHeaders = {
  serializedName: "blob-gettags-headers",
  type: {
    name: "Composite",
    className: "BlobGetTagsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlobGetTagsHeaders = BlobGetTagsHeaders;
var BlobSetTagsHeaders = {
  serializedName: "blob-settags-headers",
  type: {
    name: "Composite",
    className: "BlobSetTagsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
exports.BlobSetTagsHeaders = BlobSetTagsHeaders;
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/serviceMappers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "BlobServiceProperties", {
  enumerable: true,
  get: function () {
    return _mappers.BlobServiceProperties;
  }
});
Object.defineProperty(exports, "BlobServiceStatistics", {
  enumerable: true,
  get: function () {
    return _mappers.BlobServiceStatistics;
  }
});
Object.defineProperty(exports, "BlobTag", {
  enumerable: true,
  get: function () {
    return _mappers.BlobTag;
  }
});
Object.defineProperty(exports, "BlobTags", {
  enumerable: true,
  get: function () {
    return _mappers.BlobTags;
  }
});
Object.defineProperty(exports, "ContainerItem", {
  enumerable: true,
  get: function () {
    return _mappers.ContainerItem;
  }
});
Object.defineProperty(exports, "ContainerProperties", {
  enumerable: true,
  get: function () {
    return _mappers.ContainerProperties;
  }
});
Object.defineProperty(exports, "CorsRule", {
  enumerable: true,
  get: function () {
    return _mappers.CorsRule;
  }
});
Object.defineProperty(exports, "FilterBlobItem", {
  enumerable: true,
  get: function () {
    return _mappers.FilterBlobItem;
  }
});
Object.defineProperty(exports, "FilterBlobSegment", {
  enumerable: true,
  get: function () {
    return _mappers.FilterBlobSegment;
  }
});
Object.defineProperty(exports, "GeoReplication", {
  enumerable: true,
  get: function () {
    return _mappers.GeoReplication;
  }
});
Object.defineProperty(exports, "KeyInfo", {
  enumerable: true,
  get: function () {
    return _mappers.KeyInfo;
  }
});
Object.defineProperty(exports, "ListContainersSegmentResponse", {
  enumerable: true,
  get: function () {
    return _mappers.ListContainersSegmentResponse;
  }
});
Object.defineProperty(exports, "Logging", {
  enumerable: true,
  get: function () {
    return _mappers.Logging;
  }
});
Object.defineProperty(exports, "Metrics", {
  enumerable: true,
  get: function () {
    return _mappers.Metrics;
  }
});
Object.defineProperty(exports, "RetentionPolicy", {
  enumerable: true,
  get: function () {
    return _mappers.RetentionPolicy;
  }
});
Object.defineProperty(exports, "ServiceFilterBlobsHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.ServiceFilterBlobsHeaders;
  }
});
Object.defineProperty(exports, "ServiceGetAccountInfoHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.ServiceGetAccountInfoHeaders;
  }
});
Object.defineProperty(exports, "ServiceGetPropertiesHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.ServiceGetPropertiesHeaders;
  }
});
Object.defineProperty(exports, "ServiceGetStatisticsHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.ServiceGetStatisticsHeaders;
  }
});
Object.defineProperty(exports, "ServiceGetUserDelegationKeyHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.ServiceGetUserDelegationKeyHeaders;
  }
});
Object.defineProperty(exports, "ServiceListContainersSegmentHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.ServiceListContainersSegmentHeaders;
  }
});
Object.defineProperty(exports, "ServiceSetPropertiesHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.ServiceSetPropertiesHeaders;
  }
});
Object.defineProperty(exports, "ServiceSubmitBatchHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.ServiceSubmitBatchHeaders;
  }
});
Object.defineProperty(exports, "StaticWebsite", {
  enumerable: true,
  get: function () {
    return _mappers.StaticWebsite;
  }
});
Object.defineProperty(exports, "StorageError", {
  enumerable: true,
  get: function () {
    return _mappers.StorageError;
  }
});
Object.defineProperty(exports, "UserDelegationKey", {
  enumerable: true,
  get: function () {
    return _mappers.UserDelegationKey;
  }
});

var _mappers = require("../models/mappers");
},{"../models/mappers":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.preventEncryptionScopeOverride = exports.prefix = exports.posixUmask = exports.posixPermissions = exports.posixAcl = exports.pathRenameMode = exports.pageWrite1 = exports.pageWrite0 = exports.owner = exports.multipartContentType = exports.metadata = exports.maxSize = exports.maxPageSize = exports.marker1 = exports.marker0 = exports.listType = exports.leaseId1 = exports.leaseId0 = exports.include1 = exports.include0 = exports.ifUnmodifiedSince = exports.ifTags = exports.ifSequenceNumberLessThanOrEqualTo = exports.ifSequenceNumberLessThan = exports.ifSequenceNumberEqualTo = exports.ifNoneMatch = exports.ifModifiedSince = exports.ifMatch = exports.group = exports.expiryOptions = exports.expiresOn = exports.encryptionScope = exports.encryptionKeySha256 = exports.encryptionKey = exports.encryptionAlgorithm = exports.duration = exports.directoryProperties = exports.delimiter = exports.deleteSnapshots = exports.deletedContainerVersion = exports.deletedContainerName = exports.defaultEncryptionScope = exports.copySourceBlobProperties = exports.copySource = exports.copyId = exports.copyActionAbortConstant = exports.contentType = exports.contentLength = exports.contentLanguage = exports.contentEncoding = exports.contentDisposition = exports.comp9 = exports.comp8 = exports.comp7 = exports.comp6 = exports.comp5 = exports.comp4 = exports.comp3 = exports.comp23 = exports.comp22 = exports.comp21 = exports.comp20 = exports.comp2 = exports.comp19 = exports.comp18 = exports.comp17 = exports.comp16 = exports.comp15 = exports.comp14 = exports.comp13 = exports.comp12 = exports.comp11 = exports.comp10 = exports.comp1 = exports.comp0 = exports.cacheControl = exports.breakPeriod = exports.blockId = exports.blobType2 = exports.blobType1 = exports.blobType0 = exports.blobTagsString = exports.blobSequenceNumber = exports.blobDeleteType = exports.blobContentType = exports.blobContentMD5 = exports.blobContentLength = exports.blobContentLanguage = exports.blobContentEncoding = exports.blobContentDisposition = exports.blobCacheControl = exports.appendPosition = exports.action6 = exports.action5 = exports.action4 = exports.action3 = exports.action2 = exports.action1 = exports.action0 = exports.access = void 0;
exports.xMsRequiresSync = exports.where = exports.versionId = exports.version = exports.url = exports.upn = exports.transactionalContentMD5 = exports.transactionalContentCrc64 = exports.timeoutInSeconds = exports.tier1 = exports.tier0 = exports.sourceUrl = exports.sourceRange1 = exports.sourceRange0 = exports.sourceLeaseId = exports.sourceIfUnmodifiedSince = exports.sourceIfTags = exports.sourceIfNoneMatch = exports.sourceIfModifiedSince = exports.sourceIfMatch = exports.sourceContentMD5 = exports.sourceContentCrc64 = exports.sourceContainerName = exports.snapshot = exports.sequenceNumberAction = exports.sealBlob = exports.restype2 = exports.restype1 = exports.restype0 = exports.resource = exports.requestId = exports.renameSource = exports.rehydratePriority = exports.recursiveDirectoryDelete = exports.rangeGetContentMD5 = exports.rangeGetContentCRC64 = exports.range1 = exports.range0 = exports.proposedLeaseId1 = exports.proposedLeaseId0 = exports.prevSnapshotUrl = exports.prevsnapshot = void 0;

var coreHttp = _interopRequireWildcard(require("@azure/core-http"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var access = {
  parameterPath: ["options", "access"],
  mapper: {
    serializedName: "x-ms-blob-public-access",
    type: {
      name: "String"
    }
  }
};
exports.access = access;
var action0 = {
  parameterPath: "action",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "x-ms-lease-action",
    defaultValue: 'acquire',
    type: {
      name: "String"
    }
  }
};
exports.action0 = action0;
var action1 = {
  parameterPath: "action",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "x-ms-lease-action",
    defaultValue: 'release',
    type: {
      name: "String"
    }
  }
};
exports.action1 = action1;
var action2 = {
  parameterPath: "action",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "x-ms-lease-action",
    defaultValue: 'renew',
    type: {
      name: "String"
    }
  }
};
exports.action2 = action2;
var action3 = {
  parameterPath: "action",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "x-ms-lease-action",
    defaultValue: 'break',
    type: {
      name: "String"
    }
  }
};
exports.action3 = action3;
var action4 = {
  parameterPath: "action",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "x-ms-lease-action",
    defaultValue: 'change',
    type: {
      name: "String"
    }
  }
};
exports.action4 = action4;
var action5 = {
  parameterPath: "action",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "action",
    defaultValue: 'setAccessControl',
    type: {
      name: "String"
    }
  }
};
exports.action5 = action5;
var action6 = {
  parameterPath: "action",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "action",
    defaultValue: 'getAccessControl',
    type: {
      name: "String"
    }
  }
};
exports.action6 = action6;
var appendPosition = {
  parameterPath: ["options", "appendPositionAccessConditions", "appendPosition"],
  mapper: {
    serializedName: "x-ms-blob-condition-appendpos",
    type: {
      name: "Number"
    }
  }
};
exports.appendPosition = appendPosition;
var blobCacheControl = {
  parameterPath: ["options", "blobHTTPHeaders", "blobCacheControl"],
  mapper: {
    serializedName: "x-ms-blob-cache-control",
    type: {
      name: "String"
    }
  }
};
exports.blobCacheControl = blobCacheControl;
var blobContentDisposition = {
  parameterPath: ["options", "blobHTTPHeaders", "blobContentDisposition"],
  mapper: {
    serializedName: "x-ms-blob-content-disposition",
    type: {
      name: "String"
    }
  }
};
exports.blobContentDisposition = blobContentDisposition;
var blobContentEncoding = {
  parameterPath: ["options", "blobHTTPHeaders", "blobContentEncoding"],
  mapper: {
    serializedName: "x-ms-blob-content-encoding",
    type: {
      name: "String"
    }
  }
};
exports.blobContentEncoding = blobContentEncoding;
var blobContentLanguage = {
  parameterPath: ["options", "blobHTTPHeaders", "blobContentLanguage"],
  mapper: {
    serializedName: "x-ms-blob-content-language",
    type: {
      name: "String"
    }
  }
};
exports.blobContentLanguage = blobContentLanguage;
var blobContentLength = {
  parameterPath: "blobContentLength",
  mapper: {
    required: true,
    serializedName: "x-ms-blob-content-length",
    type: {
      name: "Number"
    }
  }
};
exports.blobContentLength = blobContentLength;
var blobContentMD5 = {
  parameterPath: ["options", "blobHTTPHeaders", "blobContentMD5"],
  mapper: {
    serializedName: "x-ms-blob-content-md5",
    type: {
      name: "ByteArray"
    }
  }
};
exports.blobContentMD5 = blobContentMD5;
var blobContentType = {
  parameterPath: ["options", "blobHTTPHeaders", "blobContentType"],
  mapper: {
    serializedName: "x-ms-blob-content-type",
    type: {
      name: "String"
    }
  }
};
exports.blobContentType = blobContentType;
var blobDeleteType = {
  parameterPath: ["options", "blobDeleteType"],
  mapper: {
    serializedName: "deletetype",
    type: {
      name: "Enum",
      allowedValues: ["Permanent"]
    }
  }
};
exports.blobDeleteType = blobDeleteType;
var blobSequenceNumber = {
  parameterPath: ["options", "blobSequenceNumber"],
  mapper: {
    serializedName: "x-ms-blob-sequence-number",
    defaultValue: 0,
    type: {
      name: "Number"
    }
  }
};
exports.blobSequenceNumber = blobSequenceNumber;
var blobTagsString = {
  parameterPath: ["options", "blobTagsString"],
  mapper: {
    serializedName: "x-ms-tags",
    type: {
      name: "String"
    }
  }
};
exports.blobTagsString = blobTagsString;
var blobType0 = {
  parameterPath: "blobType",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "x-ms-blob-type",
    defaultValue: 'PageBlob',
    type: {
      name: "String"
    }
  }
};
exports.blobType0 = blobType0;
var blobType1 = {
  parameterPath: "blobType",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "x-ms-blob-type",
    defaultValue: 'AppendBlob',
    type: {
      name: "String"
    }
  }
};
exports.blobType1 = blobType1;
var blobType2 = {
  parameterPath: "blobType",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "x-ms-blob-type",
    defaultValue: 'BlockBlob',
    type: {
      name: "String"
    }
  }
};
exports.blobType2 = blobType2;
var blockId = {
  parameterPath: "blockId",
  mapper: {
    required: true,
    serializedName: "blockid",
    type: {
      name: "String"
    }
  }
};
exports.blockId = blockId;
var breakPeriod = {
  parameterPath: ["options", "breakPeriod"],
  mapper: {
    serializedName: "x-ms-lease-break-period",
    type: {
      name: "Number"
    }
  }
};
exports.breakPeriod = breakPeriod;
var cacheControl = {
  parameterPath: ["options", "directoryHttpHeaders", "cacheControl"],
  mapper: {
    serializedName: "x-ms-cache-control",
    type: {
      name: "String"
    }
  }
};
exports.cacheControl = cacheControl;
var comp0 = {
  parameterPath: "comp",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "comp",
    defaultValue: 'properties',
    type: {
      name: "String"
    }
  }
};
exports.comp0 = comp0;
var comp1 = {
  parameterPath: "comp",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "comp",
    defaultValue: 'stats',
    type: {
      name: "String"
    }
  }
};
exports.comp1 = comp1;
var comp10 = {
  parameterPath: "comp",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "comp",
    defaultValue: 'lease',
    type: {
      name: "String"
    }
  }
};
exports.comp10 = comp10;
var comp11 = {
  parameterPath: "comp",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "comp",
    defaultValue: 'expiry',
    type: {
      name: "String"
    }
  }
};
exports.comp11 = comp11;
var comp12 = {
  parameterPath: "comp",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "comp",
    defaultValue: 'snapshot',
    type: {
      name: "String"
    }
  }
};
exports.comp12 = comp12;
var comp13 = {
  parameterPath: "comp",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "comp",
    defaultValue: 'copy',
    type: {
      name: "String"
    }
  }
};
exports.comp13 = comp13;
var comp14 = {
  parameterPath: "comp",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "comp",
    defaultValue: 'tier',
    type: {
      name: "String"
    }
  }
};
exports.comp14 = comp14;
var comp15 = {
  parameterPath: "comp",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "comp",
    defaultValue: 'query',
    type: {
      name: "String"
    }
  }
};
exports.comp15 = comp15;
var comp16 = {
  parameterPath: "comp",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "comp",
    defaultValue: 'tags',
    type: {
      name: "String"
    }
  }
};
exports.comp16 = comp16;
var comp17 = {
  parameterPath: "comp",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "comp",
    defaultValue: 'page',
    type: {
      name: "String"
    }
  }
};
exports.comp17 = comp17;
var comp18 = {
  parameterPath: "comp",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "comp",
    defaultValue: 'pagelist',
    type: {
      name: "String"
    }
  }
};
exports.comp18 = comp18;
var comp19 = {
  parameterPath: "comp",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "comp",
    defaultValue: 'incrementalcopy',
    type: {
      name: "String"
    }
  }
};
exports.comp19 = comp19;
var comp2 = {
  parameterPath: "comp",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "comp",
    defaultValue: 'list',
    type: {
      name: "String"
    }
  }
};
exports.comp2 = comp2;
var comp20 = {
  parameterPath: "comp",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "comp",
    defaultValue: 'appendblock',
    type: {
      name: "String"
    }
  }
};
exports.comp20 = comp20;
var comp21 = {
  parameterPath: "comp",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "comp",
    defaultValue: 'seal',
    type: {
      name: "String"
    }
  }
};
exports.comp21 = comp21;
var comp22 = {
  parameterPath: "comp",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "comp",
    defaultValue: 'block',
    type: {
      name: "String"
    }
  }
};
exports.comp22 = comp22;
var comp23 = {
  parameterPath: "comp",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "comp",
    defaultValue: 'blocklist',
    type: {
      name: "String"
    }
  }
};
exports.comp23 = comp23;
var comp3 = {
  parameterPath: "comp",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "comp",
    defaultValue: 'userdelegationkey',
    type: {
      name: "String"
    }
  }
};
exports.comp3 = comp3;
var comp4 = {
  parameterPath: "comp",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "comp",
    defaultValue: 'batch',
    type: {
      name: "String"
    }
  }
};
exports.comp4 = comp4;
var comp5 = {
  parameterPath: "comp",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "comp",
    defaultValue: 'blobs',
    type: {
      name: "String"
    }
  }
};
exports.comp5 = comp5;
var comp6 = {
  parameterPath: "comp",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "comp",
    defaultValue: 'metadata',
    type: {
      name: "String"
    }
  }
};
exports.comp6 = comp6;
var comp7 = {
  parameterPath: "comp",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "comp",
    defaultValue: 'acl',
    type: {
      name: "String"
    }
  }
};
exports.comp7 = comp7;
var comp8 = {
  parameterPath: "comp",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "comp",
    defaultValue: 'undelete',
    type: {
      name: "String"
    }
  }
};
exports.comp8 = comp8;
var comp9 = {
  parameterPath: "comp",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "comp",
    defaultValue: 'rename',
    type: {
      name: "String"
    }
  }
};
exports.comp9 = comp9;
var contentDisposition = {
  parameterPath: ["options", "directoryHttpHeaders", "contentDisposition"],
  mapper: {
    serializedName: "x-ms-content-disposition",
    type: {
      name: "String"
    }
  }
};
exports.contentDisposition = contentDisposition;
var contentEncoding = {
  parameterPath: ["options", "directoryHttpHeaders", "contentEncoding"],
  mapper: {
    serializedName: "x-ms-content-encoding",
    type: {
      name: "String"
    }
  }
};
exports.contentEncoding = contentEncoding;
var contentLanguage = {
  parameterPath: ["options", "directoryHttpHeaders", "contentLanguage"],
  mapper: {
    serializedName: "x-ms-content-language",
    type: {
      name: "String"
    }
  }
};
exports.contentLanguage = contentLanguage;
var contentLength = {
  parameterPath: "contentLength",
  mapper: {
    required: true,
    serializedName: "Content-Length",
    type: {
      name: "Number"
    }
  }
};
exports.contentLength = contentLength;
var contentType = {
  parameterPath: ["options", "directoryHttpHeaders", "contentType"],
  mapper: {
    serializedName: "x-ms-content-type",
    type: {
      name: "String"
    }
  }
};
exports.contentType = contentType;
var copyActionAbortConstant = {
  parameterPath: "copyActionAbortConstant",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "x-ms-copy-action",
    defaultValue: 'abort',
    type: {
      name: "String"
    }
  }
};
exports.copyActionAbortConstant = copyActionAbortConstant;
var copyId = {
  parameterPath: "copyId",
  mapper: {
    required: true,
    serializedName: "copyid",
    type: {
      name: "String"
    }
  }
};
exports.copyId = copyId;
var copySource = {
  parameterPath: "copySource",
  mapper: {
    required: true,
    serializedName: "x-ms-copy-source",
    type: {
      name: "String"
    }
  }
};
exports.copySource = copySource;
var copySourceBlobProperties = {
  parameterPath: ["options", "copySourceBlobProperties"],
  mapper: {
    serializedName: "x-ms-copy-source-blob-properties",
    type: {
      name: "Boolean"
    }
  }
};
exports.copySourceBlobProperties = copySourceBlobProperties;
var defaultEncryptionScope = {
  parameterPath: ["options", "containerEncryptionScope", "defaultEncryptionScope"],
  mapper: {
    serializedName: "x-ms-default-encryption-scope",
    type: {
      name: "String"
    }
  }
};
exports.defaultEncryptionScope = defaultEncryptionScope;
var deletedContainerName = {
  parameterPath: ["options", "deletedContainerName"],
  mapper: {
    serializedName: "x-ms-deleted-container-name",
    type: {
      name: "String"
    }
  }
};
exports.deletedContainerName = deletedContainerName;
var deletedContainerVersion = {
  parameterPath: ["options", "deletedContainerVersion"],
  mapper: {
    serializedName: "x-ms-deleted-container-version",
    type: {
      name: "String"
    }
  }
};
exports.deletedContainerVersion = deletedContainerVersion;
var deleteSnapshots = {
  parameterPath: ["options", "deleteSnapshots"],
  mapper: {
    serializedName: "x-ms-delete-snapshots",
    type: {
      name: "Enum",
      allowedValues: ["include", "only"]
    }
  }
};
exports.deleteSnapshots = deleteSnapshots;
var delimiter = {
  parameterPath: "delimiter",
  mapper: {
    required: true,
    serializedName: "delimiter",
    type: {
      name: "String"
    }
  }
};
exports.delimiter = delimiter;
var directoryProperties = {
  parameterPath: ["options", "directoryProperties"],
  mapper: {
    serializedName: "x-ms-properties",
    type: {
      name: "String"
    }
  }
};
exports.directoryProperties = directoryProperties;
var duration = {
  parameterPath: ["options", "duration"],
  mapper: {
    serializedName: "x-ms-lease-duration",
    type: {
      name: "Number"
    }
  }
};
exports.duration = duration;
var encryptionAlgorithm = {
  parameterPath: ["options", "cpkInfo", "encryptionAlgorithm"],
  mapper: {
    serializedName: "x-ms-encryption-algorithm",
    type: {
      name: "Enum",
      allowedValues: ["AES256"]
    }
  }
};
exports.encryptionAlgorithm = encryptionAlgorithm;
var encryptionKey = {
  parameterPath: ["options", "cpkInfo", "encryptionKey"],
  mapper: {
    serializedName: "x-ms-encryption-key",
    type: {
      name: "String"
    }
  }
};
exports.encryptionKey = encryptionKey;
var encryptionKeySha256 = {
  parameterPath: ["options", "cpkInfo", "encryptionKeySha256"],
  mapper: {
    serializedName: "x-ms-encryption-key-sha256",
    type: {
      name: "String"
    }
  }
};
exports.encryptionKeySha256 = encryptionKeySha256;
var encryptionScope = {
  parameterPath: ["options", "encryptionScope"],
  mapper: {
    serializedName: "x-ms-encryption-scope",
    type: {
      name: "String"
    }
  }
};
exports.encryptionScope = encryptionScope;
var expiresOn = {
  parameterPath: ["options", "expiresOn"],
  mapper: {
    serializedName: "x-ms-expiry-time",
    type: {
      name: "String"
    }
  }
};
exports.expiresOn = expiresOn;
var expiryOptions = {
  parameterPath: "expiryOptions",
  mapper: {
    required: true,
    serializedName: "x-ms-expiry-option",
    type: {
      name: "String"
    }
  }
};
exports.expiryOptions = expiryOptions;
var group = {
  parameterPath: ["options", "group"],
  mapper: {
    serializedName: "x-ms-group",
    type: {
      name: "String"
    }
  }
};
exports.group = group;
var ifMatch = {
  parameterPath: ["options", "modifiedAccessConditions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};
exports.ifMatch = ifMatch;
var ifModifiedSince = {
  parameterPath: ["options", "modifiedAccessConditions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};
exports.ifModifiedSince = ifModifiedSince;
var ifNoneMatch = {
  parameterPath: ["options", "modifiedAccessConditions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};
exports.ifNoneMatch = ifNoneMatch;
var ifSequenceNumberEqualTo = {
  parameterPath: ["options", "sequenceNumberAccessConditions", "ifSequenceNumberEqualTo"],
  mapper: {
    serializedName: "x-ms-if-sequence-number-eq",
    type: {
      name: "Number"
    }
  }
};
exports.ifSequenceNumberEqualTo = ifSequenceNumberEqualTo;
var ifSequenceNumberLessThan = {
  parameterPath: ["options", "sequenceNumberAccessConditions", "ifSequenceNumberLessThan"],
  mapper: {
    serializedName: "x-ms-if-sequence-number-lt",
    type: {
      name: "Number"
    }
  }
};
exports.ifSequenceNumberLessThan = ifSequenceNumberLessThan;
var ifSequenceNumberLessThanOrEqualTo = {
  parameterPath: ["options", "sequenceNumberAccessConditions", "ifSequenceNumberLessThanOrEqualTo"],
  mapper: {
    serializedName: "x-ms-if-sequence-number-le",
    type: {
      name: "Number"
    }
  }
};
exports.ifSequenceNumberLessThanOrEqualTo = ifSequenceNumberLessThanOrEqualTo;
var ifTags = {
  parameterPath: ["options", "modifiedAccessConditions", "ifTags"],
  mapper: {
    serializedName: "x-ms-if-tags",
    type: {
      name: "String"
    }
  }
};
exports.ifTags = ifTags;
var ifUnmodifiedSince = {
  parameterPath: ["options", "modifiedAccessConditions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};
exports.ifUnmodifiedSince = ifUnmodifiedSince;
var include0 = {
  parameterPath: ["options", "include"],
  mapper: {
    serializedName: "include",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "Enum",
          allowedValues: ["metadata", "deleted"]
        }
      }
    }
  },
  collectionFormat: coreHttp.QueryCollectionFormat.Csv
};
exports.include0 = include0;
var include1 = {
  parameterPath: ["options", "include"],
  mapper: {
    serializedName: "include",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "Enum",
          allowedValues: ["copy", "deleted", "metadata", "snapshots", "uncommittedblobs", "versions", "tags"]
        }
      }
    }
  },
  collectionFormat: coreHttp.QueryCollectionFormat.Csv
};
exports.include1 = include1;
var leaseId0 = {
  parameterPath: ["options", "leaseAccessConditions", "leaseId"],
  mapper: {
    serializedName: "x-ms-lease-id",
    type: {
      name: "String"
    }
  }
};
exports.leaseId0 = leaseId0;
var leaseId1 = {
  parameterPath: "leaseId",
  mapper: {
    required: true,
    serializedName: "x-ms-lease-id",
    type: {
      name: "String"
    }
  }
};
exports.leaseId1 = leaseId1;
var listType = {
  parameterPath: "listType",
  mapper: {
    required: true,
    serializedName: "blocklisttype",
    defaultValue: 'committed',
    type: {
      name: "Enum",
      allowedValues: ["committed", "uncommitted", "all"]
    }
  }
};
exports.listType = listType;
var marker0 = {
  parameterPath: ["options", "marker"],
  mapper: {
    serializedName: "marker",
    type: {
      name: "String"
    }
  }
};
exports.marker0 = marker0;
var marker1 = {
  parameterPath: ["options", "marker"],
  mapper: {
    serializedName: "continuation",
    type: {
      name: "String"
    }
  }
};
exports.marker1 = marker1;
var maxPageSize = {
  parameterPath: ["options", "maxPageSize"],
  mapper: {
    serializedName: "maxresults",
    constraints: {
      InclusiveMinimum: 1
    },
    type: {
      name: "Number"
    }
  }
};
exports.maxPageSize = maxPageSize;
var maxSize = {
  parameterPath: ["options", "appendPositionAccessConditions", "maxSize"],
  mapper: {
    serializedName: "x-ms-blob-condition-maxsize",
    type: {
      name: "Number"
    }
  }
};
exports.maxSize = maxSize;
var metadata = {
  parameterPath: ["options", "metadata"],
  mapper: {
    serializedName: "x-ms-meta",
    type: {
      name: "Dictionary",
      value: {
        type: {
          name: "String"
        }
      }
    },
    headerCollectionPrefix: "x-ms-meta-"
  }
};
exports.metadata = metadata;
var multipartContentType = {
  parameterPath: "multipartContentType",
  mapper: {
    required: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};
exports.multipartContentType = multipartContentType;
var owner = {
  parameterPath: ["options", "owner"],
  mapper: {
    serializedName: "x-ms-owner",
    type: {
      name: "String"
    }
  }
};
exports.owner = owner;
var pageWrite0 = {
  parameterPath: "pageWrite",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "x-ms-page-write",
    defaultValue: 'update',
    type: {
      name: "String"
    }
  }
};
exports.pageWrite0 = pageWrite0;
var pageWrite1 = {
  parameterPath: "pageWrite",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "x-ms-page-write",
    defaultValue: 'clear',
    type: {
      name: "String"
    }
  }
};
exports.pageWrite1 = pageWrite1;
var pathRenameMode = {
  parameterPath: ["options", "pathRenameMode"],
  mapper: {
    serializedName: "mode",
    type: {
      name: "Enum",
      allowedValues: ["legacy", "posix"]
    }
  }
};
exports.pathRenameMode = pathRenameMode;
var posixAcl = {
  parameterPath: ["options", "posixAcl"],
  mapper: {
    serializedName: "x-ms-acl",
    type: {
      name: "String"
    }
  }
};
exports.posixAcl = posixAcl;
var posixPermissions = {
  parameterPath: ["options", "posixPermissions"],
  mapper: {
    serializedName: "x-ms-permissions",
    type: {
      name: "String"
    }
  }
};
exports.posixPermissions = posixPermissions;
var posixUmask = {
  parameterPath: ["options", "posixUmask"],
  mapper: {
    serializedName: "x-ms-umask",
    type: {
      name: "String"
    }
  }
};
exports.posixUmask = posixUmask;
var prefix = {
  parameterPath: ["options", "prefix"],
  mapper: {
    serializedName: "prefix",
    type: {
      name: "String"
    }
  }
};
exports.prefix = prefix;
var preventEncryptionScopeOverride = {
  parameterPath: ["options", "containerEncryptionScope", "preventEncryptionScopeOverride"],
  mapper: {
    serializedName: "x-ms-deny-encryption-scope-override",
    type: {
      name: "Boolean"
    }
  }
};
exports.preventEncryptionScopeOverride = preventEncryptionScopeOverride;
var prevsnapshot = {
  parameterPath: ["options", "prevsnapshot"],
  mapper: {
    serializedName: "prevsnapshot",
    type: {
      name: "String"
    }
  }
};
exports.prevsnapshot = prevsnapshot;
var prevSnapshotUrl = {
  parameterPath: ["options", "prevSnapshotUrl"],
  mapper: {
    serializedName: "x-ms-previous-snapshot-url",
    type: {
      name: "String"
    }
  }
};
exports.prevSnapshotUrl = prevSnapshotUrl;
var proposedLeaseId0 = {
  parameterPath: ["options", "proposedLeaseId"],
  mapper: {
    serializedName: "x-ms-proposed-lease-id",
    type: {
      name: "String"
    }
  }
};
exports.proposedLeaseId0 = proposedLeaseId0;
var proposedLeaseId1 = {
  parameterPath: "proposedLeaseId",
  mapper: {
    required: true,
    serializedName: "x-ms-proposed-lease-id",
    type: {
      name: "String"
    }
  }
};
exports.proposedLeaseId1 = proposedLeaseId1;
var range0 = {
  parameterPath: ["options", "range"],
  mapper: {
    serializedName: "x-ms-range",
    type: {
      name: "String"
    }
  }
};
exports.range0 = range0;
var range1 = {
  parameterPath: "range",
  mapper: {
    required: true,
    serializedName: "x-ms-range",
    type: {
      name: "String"
    }
  }
};
exports.range1 = range1;
var rangeGetContentCRC64 = {
  parameterPath: ["options", "rangeGetContentCRC64"],
  mapper: {
    serializedName: "x-ms-range-get-content-crc64",
    type: {
      name: "Boolean"
    }
  }
};
exports.rangeGetContentCRC64 = rangeGetContentCRC64;
var rangeGetContentMD5 = {
  parameterPath: ["options", "rangeGetContentMD5"],
  mapper: {
    serializedName: "x-ms-range-get-content-md5",
    type: {
      name: "Boolean"
    }
  }
};
exports.rangeGetContentMD5 = rangeGetContentMD5;
var recursiveDirectoryDelete = {
  parameterPath: "recursiveDirectoryDelete",
  mapper: {
    required: true,
    serializedName: "recursive",
    type: {
      name: "Boolean"
    }
  }
};
exports.recursiveDirectoryDelete = recursiveDirectoryDelete;
var rehydratePriority = {
  parameterPath: ["options", "rehydratePriority"],
  mapper: {
    serializedName: "x-ms-rehydrate-priority",
    type: {
      name: "String"
    }
  }
};
exports.rehydratePriority = rehydratePriority;
var renameSource = {
  parameterPath: "renameSource",
  mapper: {
    required: true,
    serializedName: "x-ms-rename-source",
    type: {
      name: "String"
    }
  }
};
exports.renameSource = renameSource;
var requestId = {
  parameterPath: ["options", "requestId"],
  mapper: {
    serializedName: "x-ms-client-request-id",
    type: {
      name: "String"
    }
  }
};
exports.requestId = requestId;
var resource = {
  parameterPath: "resource",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "resource",
    defaultValue: 'directory',
    type: {
      name: "String"
    }
  }
};
exports.resource = resource;
var restype0 = {
  parameterPath: "restype",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "restype",
    defaultValue: 'service',
    type: {
      name: "String"
    }
  }
};
exports.restype0 = restype0;
var restype1 = {
  parameterPath: "restype",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "restype",
    defaultValue: 'account',
    type: {
      name: "String"
    }
  }
};
exports.restype1 = restype1;
var restype2 = {
  parameterPath: "restype",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "restype",
    defaultValue: 'container',
    type: {
      name: "String"
    }
  }
};
exports.restype2 = restype2;
var sealBlob = {
  parameterPath: ["options", "sealBlob"],
  mapper: {
    serializedName: "x-ms-seal-blob",
    type: {
      name: "Boolean"
    }
  }
};
exports.sealBlob = sealBlob;
var sequenceNumberAction = {
  parameterPath: "sequenceNumberAction",
  mapper: {
    required: true,
    serializedName: "x-ms-sequence-number-action",
    type: {
      name: "Enum",
      allowedValues: ["max", "update", "increment"]
    }
  }
};
exports.sequenceNumberAction = sequenceNumberAction;
var snapshot = {
  parameterPath: ["options", "snapshot"],
  mapper: {
    serializedName: "snapshot",
    type: {
      name: "String"
    }
  }
};
exports.snapshot = snapshot;
var sourceContainerName = {
  parameterPath: "sourceContainerName",
  mapper: {
    required: true,
    serializedName: "x-ms-source-container-name",
    type: {
      name: "String"
    }
  }
};
exports.sourceContainerName = sourceContainerName;
var sourceContentCrc64 = {
  parameterPath: ["options", "sourceContentCrc64"],
  mapper: {
    serializedName: "x-ms-source-content-crc64",
    type: {
      name: "ByteArray"
    }
  }
};
exports.sourceContentCrc64 = sourceContentCrc64;
var sourceContentMD5 = {
  parameterPath: ["options", "sourceContentMD5"],
  mapper: {
    serializedName: "x-ms-source-content-md5",
    type: {
      name: "ByteArray"
    }
  }
};
exports.sourceContentMD5 = sourceContentMD5;
var sourceIfMatch = {
  parameterPath: ["options", "sourceModifiedAccessConditions", "sourceIfMatch"],
  mapper: {
    serializedName: "x-ms-source-if-match",
    type: {
      name: "String"
    }
  }
};
exports.sourceIfMatch = sourceIfMatch;
var sourceIfModifiedSince = {
  parameterPath: ["options", "sourceModifiedAccessConditions", "sourceIfModifiedSince"],
  mapper: {
    serializedName: "x-ms-source-if-modified-since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};
exports.sourceIfModifiedSince = sourceIfModifiedSince;
var sourceIfNoneMatch = {
  parameterPath: ["options", "sourceModifiedAccessConditions", "sourceIfNoneMatch"],
  mapper: {
    serializedName: "x-ms-source-if-none-match",
    type: {
      name: "String"
    }
  }
};
exports.sourceIfNoneMatch = sourceIfNoneMatch;
var sourceIfTags = {
  parameterPath: ["options", "sourceModifiedAccessConditions", "sourceIfTags"],
  mapper: {
    serializedName: "x-ms-source-if-tags",
    type: {
      name: "String"
    }
  }
};
exports.sourceIfTags = sourceIfTags;
var sourceIfUnmodifiedSince = {
  parameterPath: ["options", "sourceModifiedAccessConditions", "sourceIfUnmodifiedSince"],
  mapper: {
    serializedName: "x-ms-source-if-unmodified-since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};
exports.sourceIfUnmodifiedSince = sourceIfUnmodifiedSince;
var sourceLeaseId = {
  parameterPath: ["options", "sourceLeaseId"],
  mapper: {
    serializedName: "x-ms-source-lease-id",
    type: {
      name: "String"
    }
  }
};
exports.sourceLeaseId = sourceLeaseId;
var sourceRange0 = {
  parameterPath: "sourceRange",
  mapper: {
    required: true,
    serializedName: "x-ms-source-range",
    type: {
      name: "String"
    }
  }
};
exports.sourceRange0 = sourceRange0;
var sourceRange1 = {
  parameterPath: ["options", "sourceRange"],
  mapper: {
    serializedName: "x-ms-source-range",
    type: {
      name: "String"
    }
  }
};
exports.sourceRange1 = sourceRange1;
var sourceUrl = {
  parameterPath: "sourceUrl",
  mapper: {
    required: true,
    serializedName: "x-ms-copy-source",
    type: {
      name: "String"
    }
  }
};
exports.sourceUrl = sourceUrl;
var tier0 = {
  parameterPath: ["options", "tier"],
  mapper: {
    serializedName: "x-ms-access-tier",
    type: {
      name: "String"
    }
  }
};
exports.tier0 = tier0;
var tier1 = {
  parameterPath: "tier",
  mapper: {
    required: true,
    serializedName: "x-ms-access-tier",
    type: {
      name: "String"
    }
  }
};
exports.tier1 = tier1;
var timeoutInSeconds = {
  parameterPath: ["options", "timeoutInSeconds"],
  mapper: {
    serializedName: "timeout",
    constraints: {
      InclusiveMinimum: 0
    },
    type: {
      name: "Number"
    }
  }
};
exports.timeoutInSeconds = timeoutInSeconds;
var transactionalContentCrc64 = {
  parameterPath: ["options", "transactionalContentCrc64"],
  mapper: {
    serializedName: "x-ms-content-crc64",
    type: {
      name: "ByteArray"
    }
  }
};
exports.transactionalContentCrc64 = transactionalContentCrc64;
var transactionalContentMD5 = {
  parameterPath: ["options", "transactionalContentMD5"],
  mapper: {
    serializedName: "Content-MD5",
    type: {
      name: "ByteArray"
    }
  }
};
exports.transactionalContentMD5 = transactionalContentMD5;
var upn = {
  parameterPath: ["options", "upn"],
  mapper: {
    serializedName: "upn",
    type: {
      name: "Boolean"
    }
  }
};
exports.upn = upn;
var url = {
  parameterPath: "url",
  mapper: {
    required: true,
    serializedName: "url",
    defaultValue: '',
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
exports.url = url;
var version = {
  parameterPath: "version",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "x-ms-version",
    defaultValue: '2020-06-12',
    type: {
      name: "String"
    }
  }
};
exports.version = version;
var versionId = {
  parameterPath: ["options", "versionId"],
  mapper: {
    serializedName: "versionid",
    type: {
      name: "String"
    }
  }
};
exports.versionId = versionId;
var where = {
  parameterPath: ["options", "where"],
  mapper: {
    serializedName: "where",
    type: {
      name: "String"
    }
  }
};
exports.where = where;
var xMsRequiresSync = {
  parameterPath: "xMsRequiresSync",
  mapper: {
    required: true,
    isConstant: true,
    serializedName: "x-ms-requires-sync",
    defaultValue: 'true',
    type: {
      name: "String"
    }
  }
};
exports.xMsRequiresSync = xMsRequiresSync;
},{"@azure/core-http":"node_modules/@azure/core-http/es/src/coreHttp.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/service.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Service = void 0;

var _tslib = require("tslib");

var coreHttp = _interopRequireWildcard(require("@azure/core-http"));

var Mappers = _interopRequireWildcard(require("../models/serviceMappers"));

var Parameters = _interopRequireWildcard(require("../models/parameters"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

/** Class representing a Service. */
var Service =
/** @class */
function () {
  /**
   * Create a Service.
   * @param {StorageClientContext} client Reference to the service client.
   */
  function Service(client) {
    this.client = client;
  }

  Service.prototype.setProperties = function (blobServiceProperties, options, callback) {
    return this.client.sendOperationRequest({
      blobServiceProperties: blobServiceProperties,
      options: options
    }, setPropertiesOperationSpec, callback);
  };

  Service.prototype.getProperties = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, getPropertiesOperationSpec, callback);
  };

  Service.prototype.getStatistics = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, getStatisticsOperationSpec, callback);
  };

  Service.prototype.listContainersSegment = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, listContainersSegmentOperationSpec, callback);
  };

  Service.prototype.getUserDelegationKey = function (keyInfo, options, callback) {
    return this.client.sendOperationRequest({
      keyInfo: keyInfo,
      options: options
    }, getUserDelegationKeyOperationSpec, callback);
  };

  Service.prototype.getAccountInfo = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, getAccountInfoOperationSpec, callback);
  };

  Service.prototype.submitBatch = function (body, contentLength, multipartContentType, options, callback) {
    return this.client.sendOperationRequest({
      body: body,
      contentLength: contentLength,
      multipartContentType: multipartContentType,
      options: options
    }, submitBatchOperationSpec, callback);
  };

  Service.prototype.filterBlobs = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, filterBlobsOperationSpec, callback);
  };

  return Service;
}();

exports.Service = Service;
// Operation Specifications
var serializer = new coreHttp.Serializer(Mappers, true);
var setPropertiesOperationSpec = {
  httpMethod: "PUT",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype0, Parameters.comp0],
  headerParameters: [Parameters.version, Parameters.requestId],
  requestBody: {
    parameterPath: "blobServiceProperties",
    mapper: (0, _tslib.__assign)((0, _tslib.__assign)({}, Mappers.BlobServiceProperties), {
      required: true
    })
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    202: {
      headersMapper: Mappers.ServiceSetPropertiesHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceSetPropertiesHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var getPropertiesOperationSpec = {
  httpMethod: "GET",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype0, Parameters.comp0],
  headerParameters: [Parameters.version, Parameters.requestId],
  responses: {
    200: {
      bodyMapper: Mappers.BlobServiceProperties,
      headersMapper: Mappers.ServiceGetPropertiesHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceGetPropertiesHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var getStatisticsOperationSpec = {
  httpMethod: "GET",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype0, Parameters.comp1],
  headerParameters: [Parameters.version, Parameters.requestId],
  responses: {
    200: {
      bodyMapper: Mappers.BlobServiceStatistics,
      headersMapper: Mappers.ServiceGetStatisticsHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceGetStatisticsHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var listContainersSegmentOperationSpec = {
  httpMethod: "GET",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.prefix, Parameters.marker0, Parameters.maxPageSize, Parameters.include0, Parameters.timeoutInSeconds, Parameters.comp2],
  headerParameters: [Parameters.version, Parameters.requestId],
  responses: {
    200: {
      bodyMapper: Mappers.ListContainersSegmentResponse,
      headersMapper: Mappers.ServiceListContainersSegmentHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceListContainersSegmentHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var getUserDelegationKeyOperationSpec = {
  httpMethod: "POST",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype0, Parameters.comp3],
  headerParameters: [Parameters.version, Parameters.requestId],
  requestBody: {
    parameterPath: "keyInfo",
    mapper: (0, _tslib.__assign)((0, _tslib.__assign)({}, Mappers.KeyInfo), {
      required: true
    })
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.UserDelegationKey,
      headersMapper: Mappers.ServiceGetUserDelegationKeyHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceGetUserDelegationKeyHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var getAccountInfoOperationSpec = {
  httpMethod: "GET",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.restype1, Parameters.comp0],
  headerParameters: [Parameters.version],
  responses: {
    200: {
      headersMapper: Mappers.ServiceGetAccountInfoHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceGetAccountInfoHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var submitBatchOperationSpec = {
  httpMethod: "POST",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp4],
  headerParameters: [Parameters.contentLength, Parameters.multipartContentType, Parameters.version, Parameters.requestId],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    202: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      },
      headersMapper: Mappers.ServiceSubmitBatchHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceSubmitBatchHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var filterBlobsOperationSpec = {
  httpMethod: "GET",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.where, Parameters.marker0, Parameters.maxPageSize, Parameters.comp5],
  headerParameters: [Parameters.version, Parameters.requestId],
  responses: {
    200: {
      bodyMapper: Mappers.FilterBlobSegment,
      headersMapper: Mappers.ServiceFilterBlobsHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ServiceFilterBlobsHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
},{"tslib":"node_modules/tslib/tslib.es6.js","@azure/core-http":"node_modules/@azure/core-http/es/src/coreHttp.js","../models/serviceMappers":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/serviceMappers.js","../models/parameters":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/containerMappers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AccessPolicy", {
  enumerable: true,
  get: function () {
    return _mappers.AccessPolicy;
  }
});
Object.defineProperty(exports, "BlobFlatListSegment", {
  enumerable: true,
  get: function () {
    return _mappers.BlobFlatListSegment;
  }
});
Object.defineProperty(exports, "BlobHierarchyListSegment", {
  enumerable: true,
  get: function () {
    return _mappers.BlobHierarchyListSegment;
  }
});
Object.defineProperty(exports, "BlobItemInternal", {
  enumerable: true,
  get: function () {
    return _mappers.BlobItemInternal;
  }
});
Object.defineProperty(exports, "BlobPrefix", {
  enumerable: true,
  get: function () {
    return _mappers.BlobPrefix;
  }
});
Object.defineProperty(exports, "BlobPropertiesInternal", {
  enumerable: true,
  get: function () {
    return _mappers.BlobPropertiesInternal;
  }
});
Object.defineProperty(exports, "BlobTag", {
  enumerable: true,
  get: function () {
    return _mappers.BlobTag;
  }
});
Object.defineProperty(exports, "BlobTags", {
  enumerable: true,
  get: function () {
    return _mappers.BlobTags;
  }
});
Object.defineProperty(exports, "ContainerAcquireLeaseHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.ContainerAcquireLeaseHeaders;
  }
});
Object.defineProperty(exports, "ContainerBreakLeaseHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.ContainerBreakLeaseHeaders;
  }
});
Object.defineProperty(exports, "ContainerChangeLeaseHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.ContainerChangeLeaseHeaders;
  }
});
Object.defineProperty(exports, "ContainerCreateHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.ContainerCreateHeaders;
  }
});
Object.defineProperty(exports, "ContainerDeleteHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.ContainerDeleteHeaders;
  }
});
Object.defineProperty(exports, "ContainerGetAccessPolicyHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.ContainerGetAccessPolicyHeaders;
  }
});
Object.defineProperty(exports, "ContainerGetAccountInfoHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.ContainerGetAccountInfoHeaders;
  }
});
Object.defineProperty(exports, "ContainerGetPropertiesHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.ContainerGetPropertiesHeaders;
  }
});
Object.defineProperty(exports, "ContainerListBlobFlatSegmentHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.ContainerListBlobFlatSegmentHeaders;
  }
});
Object.defineProperty(exports, "ContainerListBlobHierarchySegmentHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.ContainerListBlobHierarchySegmentHeaders;
  }
});
Object.defineProperty(exports, "ContainerReleaseLeaseHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.ContainerReleaseLeaseHeaders;
  }
});
Object.defineProperty(exports, "ContainerRenameHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.ContainerRenameHeaders;
  }
});
Object.defineProperty(exports, "ContainerRenewLeaseHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.ContainerRenewLeaseHeaders;
  }
});
Object.defineProperty(exports, "ContainerRestoreHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.ContainerRestoreHeaders;
  }
});
Object.defineProperty(exports, "ContainerSetAccessPolicyHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.ContainerSetAccessPolicyHeaders;
  }
});
Object.defineProperty(exports, "ContainerSetMetadataHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.ContainerSetMetadataHeaders;
  }
});
Object.defineProperty(exports, "ContainerSubmitBatchHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.ContainerSubmitBatchHeaders;
  }
});
Object.defineProperty(exports, "ListBlobsFlatSegmentResponse", {
  enumerable: true,
  get: function () {
    return _mappers.ListBlobsFlatSegmentResponse;
  }
});
Object.defineProperty(exports, "ListBlobsHierarchySegmentResponse", {
  enumerable: true,
  get: function () {
    return _mappers.ListBlobsHierarchySegmentResponse;
  }
});
Object.defineProperty(exports, "SignedIdentifier", {
  enumerable: true,
  get: function () {
    return _mappers.SignedIdentifier;
  }
});
Object.defineProperty(exports, "StorageError", {
  enumerable: true,
  get: function () {
    return _mappers.StorageError;
  }
});

var _mappers = require("../models/mappers");
},{"../models/mappers":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/container.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Container = void 0;

var coreHttp = _interopRequireWildcard(require("@azure/core-http"));

var Mappers = _interopRequireWildcard(require("../models/containerMappers"));

var Parameters = _interopRequireWildcard(require("../models/parameters"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

/** Class representing a Container. */
var Container =
/** @class */
function () {
  /**
   * Create a Container.
   * @param {StorageClientContext} client Reference to the service client.
   */
  function Container(client) {
    this.client = client;
  }

  Container.prototype.create = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, createOperationSpec, callback);
  };

  Container.prototype.getProperties = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, getPropertiesOperationSpec, callback);
  };

  Container.prototype.deleteMethod = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, deleteMethodOperationSpec, callback);
  };

  Container.prototype.setMetadata = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, setMetadataOperationSpec, callback);
  };

  Container.prototype.getAccessPolicy = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, getAccessPolicyOperationSpec, callback);
  };

  Container.prototype.setAccessPolicy = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, setAccessPolicyOperationSpec, callback);
  };

  Container.prototype.restore = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, restoreOperationSpec, callback);
  };

  Container.prototype.rename = function (sourceContainerName, options, callback) {
    return this.client.sendOperationRequest({
      sourceContainerName: sourceContainerName,
      options: options
    }, renameOperationSpec, callback);
  };

  Container.prototype.submitBatch = function (body, contentLength, multipartContentType, options, callback) {
    return this.client.sendOperationRequest({
      body: body,
      contentLength: contentLength,
      multipartContentType: multipartContentType,
      options: options
    }, submitBatchOperationSpec, callback);
  };

  Container.prototype.acquireLease = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, acquireLeaseOperationSpec, callback);
  };

  Container.prototype.releaseLease = function (leaseId, options, callback) {
    return this.client.sendOperationRequest({
      leaseId: leaseId,
      options: options
    }, releaseLeaseOperationSpec, callback);
  };

  Container.prototype.renewLease = function (leaseId, options, callback) {
    return this.client.sendOperationRequest({
      leaseId: leaseId,
      options: options
    }, renewLeaseOperationSpec, callback);
  };

  Container.prototype.breakLease = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, breakLeaseOperationSpec, callback);
  };

  Container.prototype.changeLease = function (leaseId, proposedLeaseId, options, callback) {
    return this.client.sendOperationRequest({
      leaseId: leaseId,
      proposedLeaseId: proposedLeaseId,
      options: options
    }, changeLeaseOperationSpec, callback);
  };

  Container.prototype.listBlobFlatSegment = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, listBlobFlatSegmentOperationSpec, callback);
  };

  Container.prototype.listBlobHierarchySegment = function (delimiter, options, callback) {
    return this.client.sendOperationRequest({
      delimiter: delimiter,
      options: options
    }, listBlobHierarchySegmentOperationSpec, callback);
  };

  Container.prototype.getAccountInfo = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, getAccountInfoOperationSpec, callback);
  };

  return Container;
}();

exports.Container = Container;
// Operation Specifications
var serializer = new coreHttp.Serializer(Mappers, true);
var createOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],
  headerParameters: [Parameters.metadata, Parameters.access, Parameters.version, Parameters.requestId, Parameters.defaultEncryptionScope, Parameters.preventEncryptionScopeOverride],
  responses: {
    201: {
      headersMapper: Mappers.ContainerCreateHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerCreateHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var getPropertiesOperationSpec = {
  httpMethod: "GET",
  path: "{containerName}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.leaseId0],
  responses: {
    200: {
      headersMapper: Mappers.ContainerGetPropertiesHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerGetPropertiesHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var deleteMethodOperationSpec = {
  httpMethod: "DELETE",
  path: "{containerName}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.leaseId0, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince],
  responses: {
    202: {
      headersMapper: Mappers.ContainerDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerDeleteHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var setMetadataOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp6],
  headerParameters: [Parameters.metadata, Parameters.version, Parameters.requestId, Parameters.leaseId0, Parameters.ifModifiedSince],
  responses: {
    200: {
      headersMapper: Mappers.ContainerSetMetadataHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerSetMetadataHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var getAccessPolicyOperationSpec = {
  httpMethod: "GET",
  path: "{containerName}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp7],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.leaseId0],
  responses: {
    200: {
      bodyMapper: {
        xmlElementName: "SignedIdentifier",
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SignedIdentifier"
            }
          }
        }
      },
      headersMapper: Mappers.ContainerGetAccessPolicyHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerGetAccessPolicyHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var setAccessPolicyOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp7],
  headerParameters: [Parameters.access, Parameters.version, Parameters.requestId, Parameters.leaseId0, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince],
  requestBody: {
    parameterPath: ["options", "containerAcl"],
    mapper: {
      xmlName: "SignedIdentifiers",
      xmlElementName: "SignedIdentifier",
      serializedName: "containerAcl",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "SignedIdentifier"
          }
        }
      }
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    200: {
      headersMapper: Mappers.ContainerSetAccessPolicyHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerSetAccessPolicyHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var restoreOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp8],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.deletedContainerName, Parameters.deletedContainerVersion],
  responses: {
    201: {
      headersMapper: Mappers.ContainerRestoreHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerRestoreHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var renameOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp9],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.sourceContainerName, Parameters.sourceLeaseId],
  responses: {
    200: {
      headersMapper: Mappers.ContainerRenameHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerRenameHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var submitBatchOperationSpec = {
  httpMethod: "POST",
  path: "{containerName}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp4],
  headerParameters: [Parameters.contentLength, Parameters.multipartContentType, Parameters.version, Parameters.requestId],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    202: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      },
      headersMapper: Mappers.ContainerSubmitBatchHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerSubmitBatchHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var acquireLeaseOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10, Parameters.restype2],
  headerParameters: [Parameters.duration, Parameters.proposedLeaseId0, Parameters.version, Parameters.requestId, Parameters.action0, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince],
  responses: {
    201: {
      headersMapper: Mappers.ContainerAcquireLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerAcquireLeaseHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var releaseLeaseOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10, Parameters.restype2],
  headerParameters: [Parameters.leaseId1, Parameters.version, Parameters.requestId, Parameters.action1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince],
  responses: {
    200: {
      headersMapper: Mappers.ContainerReleaseLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerReleaseLeaseHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var renewLeaseOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10, Parameters.restype2],
  headerParameters: [Parameters.leaseId1, Parameters.version, Parameters.requestId, Parameters.action2, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince],
  responses: {
    200: {
      headersMapper: Mappers.ContainerRenewLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerRenewLeaseHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var breakLeaseOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10, Parameters.restype2],
  headerParameters: [Parameters.breakPeriod, Parameters.version, Parameters.requestId, Parameters.action3, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince],
  responses: {
    202: {
      headersMapper: Mappers.ContainerBreakLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerBreakLeaseHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var changeLeaseOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10, Parameters.restype2],
  headerParameters: [Parameters.leaseId1, Parameters.proposedLeaseId1, Parameters.version, Parameters.requestId, Parameters.action4, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince],
  responses: {
    200: {
      headersMapper: Mappers.ContainerChangeLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerChangeLeaseHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var listBlobFlatSegmentOperationSpec = {
  httpMethod: "GET",
  path: "{containerName}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.prefix, Parameters.marker0, Parameters.maxPageSize, Parameters.include1, Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp2],
  headerParameters: [Parameters.version, Parameters.requestId],
  responses: {
    200: {
      bodyMapper: Mappers.ListBlobsFlatSegmentResponse,
      headersMapper: Mappers.ContainerListBlobFlatSegmentHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerListBlobFlatSegmentHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var listBlobHierarchySegmentOperationSpec = {
  httpMethod: "GET",
  path: "{containerName}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.prefix, Parameters.delimiter, Parameters.marker0, Parameters.maxPageSize, Parameters.include1, Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp2],
  headerParameters: [Parameters.version, Parameters.requestId],
  responses: {
    200: {
      bodyMapper: Mappers.ListBlobsHierarchySegmentResponse,
      headersMapper: Mappers.ContainerListBlobHierarchySegmentHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerListBlobHierarchySegmentHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var getAccountInfoOperationSpec = {
  httpMethod: "GET",
  path: "{containerName}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.restype1, Parameters.comp0],
  headerParameters: [Parameters.version],
  responses: {
    200: {
      headersMapper: Mappers.ContainerGetAccountInfoHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.ContainerGetAccountInfoHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
},{"@azure/core-http":"node_modules/@azure/core-http/es/src/coreHttp.js","../models/containerMappers":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/containerMappers.js","../models/parameters":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/directoryMappers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "DataLakeStorageError", {
  enumerable: true,
  get: function () {
    return _mappers.DataLakeStorageError;
  }
});
Object.defineProperty(exports, "DataLakeStorageErrorError", {
  enumerable: true,
  get: function () {
    return _mappers.DataLakeStorageErrorError;
  }
});
Object.defineProperty(exports, "DirectoryCreateHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.DirectoryCreateHeaders;
  }
});
Object.defineProperty(exports, "DirectoryDeleteHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.DirectoryDeleteHeaders;
  }
});
Object.defineProperty(exports, "DirectoryGetAccessControlHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.DirectoryGetAccessControlHeaders;
  }
});
Object.defineProperty(exports, "DirectoryRenameHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.DirectoryRenameHeaders;
  }
});
Object.defineProperty(exports, "DirectorySetAccessControlHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.DirectorySetAccessControlHeaders;
  }
});

var _mappers = require("../models/mappers");
},{"../models/mappers":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/directory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Directory = void 0;

var coreHttp = _interopRequireWildcard(require("@azure/core-http"));

var Mappers = _interopRequireWildcard(require("../models/directoryMappers"));

var Parameters = _interopRequireWildcard(require("../models/parameters"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

/** Class representing a Directory. */
var Directory =
/** @class */
function () {
  /**
   * Create a Directory.
   * @param {StorageClientContext} client Reference to the service client.
   */
  function Directory(client) {
    this.client = client;
  }

  Directory.prototype.create = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, createOperationSpec, callback);
  };

  Directory.prototype.rename = function (renameSource, options, callback) {
    return this.client.sendOperationRequest({
      renameSource: renameSource,
      options: options
    }, renameOperationSpec, callback);
  };

  Directory.prototype.deleteMethod = function (recursiveDirectoryDelete, options, callback) {
    return this.client.sendOperationRequest({
      recursiveDirectoryDelete: recursiveDirectoryDelete,
      options: options
    }, deleteMethodOperationSpec, callback);
  };

  Directory.prototype.setAccessControl = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, setAccessControlOperationSpec, callback);
  };

  Directory.prototype.getAccessControl = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, getAccessControlOperationSpec, callback);
  };

  return Directory;
}();

exports.Directory = Directory;
// Operation Specifications
var serializer = new coreHttp.Serializer(Mappers, true);
var createOperationSpec = {
  httpMethod: "PUT",
  path: "{filesystem}/{path}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.resource],
  headerParameters: [Parameters.directoryProperties, Parameters.posixPermissions, Parameters.posixUmask, Parameters.version, Parameters.requestId, Parameters.cacheControl, Parameters.contentType, Parameters.contentEncoding, Parameters.contentLanguage, Parameters.contentDisposition, Parameters.leaseId0, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch],
  responses: {
    201: {
      headersMapper: Mappers.DirectoryCreateHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError,
      headersMapper: Mappers.DirectoryCreateHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var renameOperationSpec = {
  httpMethod: "PUT",
  path: "{filesystem}/{path}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.marker1, Parameters.pathRenameMode],
  headerParameters: [Parameters.renameSource, Parameters.directoryProperties, Parameters.posixPermissions, Parameters.posixUmask, Parameters.sourceLeaseId, Parameters.version, Parameters.requestId, Parameters.cacheControl, Parameters.contentType, Parameters.contentEncoding, Parameters.contentLanguage, Parameters.contentDisposition, Parameters.leaseId0, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch],
  responses: {
    201: {
      headersMapper: Mappers.DirectoryRenameHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError,
      headersMapper: Mappers.DirectoryRenameHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var deleteMethodOperationSpec = {
  httpMethod: "DELETE",
  path: "{filesystem}/{path}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.recursiveDirectoryDelete, Parameters.marker1],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.leaseId0, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch],
  responses: {
    200: {
      headersMapper: Mappers.DirectoryDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError,
      headersMapper: Mappers.DirectoryDeleteHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var setAccessControlOperationSpec = {
  httpMethod: "PATCH",
  path: "{filesystem}/{path}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.action5],
  headerParameters: [Parameters.owner, Parameters.group, Parameters.posixPermissions, Parameters.posixAcl, Parameters.requestId, Parameters.version, Parameters.leaseId0, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince],
  responses: {
    200: {
      headersMapper: Mappers.DirectorySetAccessControlHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError,
      headersMapper: Mappers.DirectorySetAccessControlHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var getAccessControlOperationSpec = {
  httpMethod: "HEAD",
  path: "{filesystem}/{path}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.upn, Parameters.action6],
  headerParameters: [Parameters.requestId, Parameters.version, Parameters.leaseId0, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince],
  responses: {
    200: {
      headersMapper: Mappers.DirectoryGetAccessControlHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError,
      headersMapper: Mappers.DirectoryGetAccessControlHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
},{"@azure/core-http":"node_modules/@azure/core-http/es/src/coreHttp.js","../models/directoryMappers":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/directoryMappers.js","../models/parameters":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/blobMappers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ArrowConfiguration", {
  enumerable: true,
  get: function () {
    return _mappers.ArrowConfiguration;
  }
});
Object.defineProperty(exports, "ArrowField", {
  enumerable: true,
  get: function () {
    return _mappers.ArrowField;
  }
});
Object.defineProperty(exports, "BlobAbortCopyFromURLHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlobAbortCopyFromURLHeaders;
  }
});
Object.defineProperty(exports, "BlobAcquireLeaseHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlobAcquireLeaseHeaders;
  }
});
Object.defineProperty(exports, "BlobBreakLeaseHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlobBreakLeaseHeaders;
  }
});
Object.defineProperty(exports, "BlobChangeLeaseHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlobChangeLeaseHeaders;
  }
});
Object.defineProperty(exports, "BlobCopyFromURLHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlobCopyFromURLHeaders;
  }
});
Object.defineProperty(exports, "BlobCreateSnapshotHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlobCreateSnapshotHeaders;
  }
});
Object.defineProperty(exports, "BlobDeleteHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlobDeleteHeaders;
  }
});
Object.defineProperty(exports, "BlobDownloadHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlobDownloadHeaders;
  }
});
Object.defineProperty(exports, "BlobGetAccessControlHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlobGetAccessControlHeaders;
  }
});
Object.defineProperty(exports, "BlobGetAccountInfoHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlobGetAccountInfoHeaders;
  }
});
Object.defineProperty(exports, "BlobGetPropertiesHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlobGetPropertiesHeaders;
  }
});
Object.defineProperty(exports, "BlobGetTagsHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlobGetTagsHeaders;
  }
});
Object.defineProperty(exports, "BlobQueryHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlobQueryHeaders;
  }
});
Object.defineProperty(exports, "BlobReleaseLeaseHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlobReleaseLeaseHeaders;
  }
});
Object.defineProperty(exports, "BlobRenameHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlobRenameHeaders;
  }
});
Object.defineProperty(exports, "BlobRenewLeaseHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlobRenewLeaseHeaders;
  }
});
Object.defineProperty(exports, "BlobSetAccessControlHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlobSetAccessControlHeaders;
  }
});
Object.defineProperty(exports, "BlobSetExpiryHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlobSetExpiryHeaders;
  }
});
Object.defineProperty(exports, "BlobSetHTTPHeadersHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlobSetHTTPHeadersHeaders;
  }
});
Object.defineProperty(exports, "BlobSetMetadataHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlobSetMetadataHeaders;
  }
});
Object.defineProperty(exports, "BlobSetTagsHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlobSetTagsHeaders;
  }
});
Object.defineProperty(exports, "BlobSetTierHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlobSetTierHeaders;
  }
});
Object.defineProperty(exports, "BlobStartCopyFromURLHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlobStartCopyFromURLHeaders;
  }
});
Object.defineProperty(exports, "BlobTag", {
  enumerable: true,
  get: function () {
    return _mappers.BlobTag;
  }
});
Object.defineProperty(exports, "BlobTags", {
  enumerable: true,
  get: function () {
    return _mappers.BlobTags;
  }
});
Object.defineProperty(exports, "BlobUndeleteHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlobUndeleteHeaders;
  }
});
Object.defineProperty(exports, "DataLakeStorageError", {
  enumerable: true,
  get: function () {
    return _mappers.DataLakeStorageError;
  }
});
Object.defineProperty(exports, "DataLakeStorageErrorError", {
  enumerable: true,
  get: function () {
    return _mappers.DataLakeStorageErrorError;
  }
});
Object.defineProperty(exports, "DelimitedTextConfiguration", {
  enumerable: true,
  get: function () {
    return _mappers.DelimitedTextConfiguration;
  }
});
Object.defineProperty(exports, "JsonTextConfiguration", {
  enumerable: true,
  get: function () {
    return _mappers.JsonTextConfiguration;
  }
});
Object.defineProperty(exports, "QueryFormat", {
  enumerable: true,
  get: function () {
    return _mappers.QueryFormat;
  }
});
Object.defineProperty(exports, "QueryRequest", {
  enumerable: true,
  get: function () {
    return _mappers.QueryRequest;
  }
});
Object.defineProperty(exports, "QuerySerialization", {
  enumerable: true,
  get: function () {
    return _mappers.QuerySerialization;
  }
});
Object.defineProperty(exports, "StorageError", {
  enumerable: true,
  get: function () {
    return _mappers.StorageError;
  }
});

var _mappers = require("../models/mappers");
},{"../models/mappers":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blob.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Blob = void 0;

var coreHttp = _interopRequireWildcard(require("@azure/core-http"));

var Mappers = _interopRequireWildcard(require("../models/blobMappers"));

var Parameters = _interopRequireWildcard(require("../models/parameters"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

/** Class representing a Blob. */
var Blob =
/** @class */
function () {
  /**
   * Create a Blob.
   * @param {StorageClientContext} client Reference to the service client.
   */
  function Blob(client) {
    this.client = client;
  }

  Blob.prototype.download = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, downloadOperationSpec, callback);
  };

  Blob.prototype.getProperties = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, getPropertiesOperationSpec, callback);
  };

  Blob.prototype.deleteMethod = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, deleteMethodOperationSpec, callback);
  };

  Blob.prototype.setAccessControl = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, setAccessControlOperationSpec, callback);
  };

  Blob.prototype.getAccessControl = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, getAccessControlOperationSpec, callback);
  };

  Blob.prototype.rename = function (renameSource, options, callback) {
    return this.client.sendOperationRequest({
      renameSource: renameSource,
      options: options
    }, renameOperationSpec, callback);
  };

  Blob.prototype.undelete = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, undeleteOperationSpec, callback);
  };

  Blob.prototype.setExpiry = function (expiryOptions, options, callback) {
    return this.client.sendOperationRequest({
      expiryOptions: expiryOptions,
      options: options
    }, setExpiryOperationSpec, callback);
  };

  Blob.prototype.setHTTPHeaders = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, setHTTPHeadersOperationSpec, callback);
  };

  Blob.prototype.setMetadata = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, setMetadataOperationSpec, callback);
  };

  Blob.prototype.acquireLease = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, acquireLeaseOperationSpec, callback);
  };

  Blob.prototype.releaseLease = function (leaseId, options, callback) {
    return this.client.sendOperationRequest({
      leaseId: leaseId,
      options: options
    }, releaseLeaseOperationSpec, callback);
  };

  Blob.prototype.renewLease = function (leaseId, options, callback) {
    return this.client.sendOperationRequest({
      leaseId: leaseId,
      options: options
    }, renewLeaseOperationSpec, callback);
  };

  Blob.prototype.changeLease = function (leaseId, proposedLeaseId, options, callback) {
    return this.client.sendOperationRequest({
      leaseId: leaseId,
      proposedLeaseId: proposedLeaseId,
      options: options
    }, changeLeaseOperationSpec, callback);
  };

  Blob.prototype.breakLease = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, breakLeaseOperationSpec, callback);
  };

  Blob.prototype.createSnapshot = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, createSnapshotOperationSpec, callback);
  };

  Blob.prototype.startCopyFromURL = function (copySource, options, callback) {
    return this.client.sendOperationRequest({
      copySource: copySource,
      options: options
    }, startCopyFromURLOperationSpec, callback);
  };

  Blob.prototype.copyFromURL = function (copySource, options, callback) {
    return this.client.sendOperationRequest({
      copySource: copySource,
      options: options
    }, copyFromURLOperationSpec, callback);
  };

  Blob.prototype.abortCopyFromURL = function (copyId, options, callback) {
    return this.client.sendOperationRequest({
      copyId: copyId,
      options: options
    }, abortCopyFromURLOperationSpec, callback);
  };

  Blob.prototype.setTier = function (tier, options, callback) {
    return this.client.sendOperationRequest({
      tier: tier,
      options: options
    }, setTierOperationSpec, callback);
  };

  Blob.prototype.getAccountInfo = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, getAccountInfoOperationSpec, callback);
  };

  Blob.prototype.query = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, queryOperationSpec, callback);
  };

  Blob.prototype.getTags = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, getTagsOperationSpec, callback);
  };

  Blob.prototype.setTags = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, setTagsOperationSpec, callback);
  };

  return Blob;
}();

exports.Blob = Blob;
// Operation Specifications
var serializer = new coreHttp.Serializer(Mappers, true);
var downloadOperationSpec = {
  httpMethod: "GET",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.snapshot, Parameters.versionId, Parameters.timeoutInSeconds],
  headerParameters: [Parameters.range0, Parameters.rangeGetContentMD5, Parameters.rangeGetContentCRC64, Parameters.version, Parameters.requestId, Parameters.leaseId0, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      },
      headersMapper: Mappers.BlobDownloadHeaders
    },
    206: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      },
      headersMapper: Mappers.BlobDownloadHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobDownloadHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var getPropertiesOperationSpec = {
  httpMethod: "HEAD",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.snapshot, Parameters.versionId, Parameters.timeoutInSeconds],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.leaseId0, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  responses: {
    200: {
      headersMapper: Mappers.BlobGetPropertiesHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobGetPropertiesHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var deleteMethodOperationSpec = {
  httpMethod: "DELETE",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.snapshot, Parameters.versionId, Parameters.timeoutInSeconds, Parameters.blobDeleteType],
  headerParameters: [Parameters.deleteSnapshots, Parameters.version, Parameters.requestId, Parameters.leaseId0, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  responses: {
    202: {
      headersMapper: Mappers.BlobDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobDeleteHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var setAccessControlOperationSpec = {
  httpMethod: "PATCH",
  path: "{filesystem}/{path}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.action5],
  headerParameters: [Parameters.owner, Parameters.group, Parameters.posixPermissions, Parameters.posixAcl, Parameters.requestId, Parameters.version, Parameters.leaseId0, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince],
  responses: {
    200: {
      headersMapper: Mappers.BlobSetAccessControlHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError,
      headersMapper: Mappers.BlobSetAccessControlHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var getAccessControlOperationSpec = {
  httpMethod: "HEAD",
  path: "{filesystem}/{path}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.upn, Parameters.action6],
  headerParameters: [Parameters.requestId, Parameters.version, Parameters.leaseId0, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince],
  responses: {
    200: {
      headersMapper: Mappers.BlobGetAccessControlHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError,
      headersMapper: Mappers.BlobGetAccessControlHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var renameOperationSpec = {
  httpMethod: "PUT",
  path: "{filesystem}/{path}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.pathRenameMode],
  headerParameters: [Parameters.renameSource, Parameters.directoryProperties, Parameters.posixPermissions, Parameters.posixUmask, Parameters.sourceLeaseId, Parameters.version, Parameters.requestId, Parameters.cacheControl, Parameters.contentType, Parameters.contentEncoding, Parameters.contentLanguage, Parameters.contentDisposition, Parameters.leaseId0, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch],
  responses: {
    201: {
      headersMapper: Mappers.BlobRenameHeaders
    },
    default: {
      bodyMapper: Mappers.DataLakeStorageError,
      headersMapper: Mappers.BlobRenameHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var undeleteOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp8],
  headerParameters: [Parameters.version, Parameters.requestId],
  responses: {
    200: {
      headersMapper: Mappers.BlobUndeleteHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobUndeleteHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var setExpiryOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp11],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.expiryOptions, Parameters.expiresOn],
  responses: {
    200: {
      headersMapper: Mappers.BlobSetExpiryHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobSetExpiryHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var setHTTPHeadersOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp0],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentMD5, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentDisposition, Parameters.leaseId0, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  responses: {
    200: {
      headersMapper: Mappers.BlobSetHTTPHeadersHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobSetHTTPHeadersHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var setMetadataOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp6],
  headerParameters: [Parameters.metadata, Parameters.encryptionScope, Parameters.version, Parameters.requestId, Parameters.leaseId0, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  responses: {
    200: {
      headersMapper: Mappers.BlobSetMetadataHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobSetMetadataHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var acquireLeaseOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],
  headerParameters: [Parameters.duration, Parameters.proposedLeaseId0, Parameters.version, Parameters.requestId, Parameters.action0, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  responses: {
    201: {
      headersMapper: Mappers.BlobAcquireLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobAcquireLeaseHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var releaseLeaseOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],
  headerParameters: [Parameters.leaseId1, Parameters.version, Parameters.requestId, Parameters.action1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  responses: {
    200: {
      headersMapper: Mappers.BlobReleaseLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobReleaseLeaseHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var renewLeaseOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],
  headerParameters: [Parameters.leaseId1, Parameters.version, Parameters.requestId, Parameters.action2, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  responses: {
    200: {
      headersMapper: Mappers.BlobRenewLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobRenewLeaseHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var changeLeaseOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],
  headerParameters: [Parameters.leaseId1, Parameters.proposedLeaseId1, Parameters.version, Parameters.requestId, Parameters.action4, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  responses: {
    200: {
      headersMapper: Mappers.BlobChangeLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobChangeLeaseHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var breakLeaseOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp10],
  headerParameters: [Parameters.breakPeriod, Parameters.version, Parameters.requestId, Parameters.action3, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  responses: {
    202: {
      headersMapper: Mappers.BlobBreakLeaseHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobBreakLeaseHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var createSnapshotOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp12],
  headerParameters: [Parameters.metadata, Parameters.encryptionScope, Parameters.version, Parameters.requestId, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.leaseId0],
  responses: {
    201: {
      headersMapper: Mappers.BlobCreateSnapshotHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobCreateSnapshotHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var startCopyFromURLOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds],
  headerParameters: [Parameters.metadata, Parameters.tier0, Parameters.rehydratePriority, Parameters.copySource, Parameters.version, Parameters.requestId, Parameters.blobTagsString, Parameters.sealBlob, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.sourceIfTags, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.leaseId0],
  responses: {
    202: {
      headersMapper: Mappers.BlobStartCopyFromURLHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobStartCopyFromURLHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var copyFromURLOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds],
  headerParameters: [Parameters.metadata, Parameters.tier0, Parameters.copySource, Parameters.version, Parameters.requestId, Parameters.sourceContentMD5, Parameters.blobTagsString, Parameters.xMsRequiresSync, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.leaseId0],
  responses: {
    202: {
      headersMapper: Mappers.BlobCopyFromURLHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobCopyFromURLHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var abortCopyFromURLOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.copyId, Parameters.timeoutInSeconds, Parameters.comp13],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.copyActionAbortConstant, Parameters.leaseId0],
  responses: {
    204: {
      headersMapper: Mappers.BlobAbortCopyFromURLHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobAbortCopyFromURLHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var setTierOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.snapshot, Parameters.versionId, Parameters.timeoutInSeconds, Parameters.comp14],
  headerParameters: [Parameters.tier1, Parameters.rehydratePriority, Parameters.version, Parameters.requestId, Parameters.leaseId0, Parameters.ifTags],
  responses: {
    200: {
      headersMapper: Mappers.BlobSetTierHeaders
    },
    202: {
      headersMapper: Mappers.BlobSetTierHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobSetTierHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var getAccountInfoOperationSpec = {
  httpMethod: "GET",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.restype1, Parameters.comp0],
  headerParameters: [Parameters.version],
  responses: {
    200: {
      headersMapper: Mappers.BlobGetAccountInfoHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobGetAccountInfoHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var queryOperationSpec = {
  httpMethod: "POST",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.snapshot, Parameters.timeoutInSeconds, Parameters.comp15],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.leaseId0, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  requestBody: {
    parameterPath: ["options", "queryRequest"],
    mapper: Mappers.QueryRequest
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      },
      headersMapper: Mappers.BlobQueryHeaders
    },
    206: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      },
      headersMapper: Mappers.BlobQueryHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobQueryHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var getTagsOperationSpec = {
  httpMethod: "GET",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.snapshot, Parameters.versionId, Parameters.comp16],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.ifTags, Parameters.leaseId0],
  responses: {
    200: {
      bodyMapper: Mappers.BlobTags,
      headersMapper: Mappers.BlobGetTagsHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobGetTagsHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var setTagsOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.versionId, Parameters.comp16],
  headerParameters: [Parameters.version, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64, Parameters.requestId, Parameters.ifTags, Parameters.leaseId0],
  requestBody: {
    parameterPath: ["options", "tags"],
    mapper: Mappers.BlobTags
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    204: {
      headersMapper: Mappers.BlobSetTagsHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlobSetTagsHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
},{"@azure/core-http":"node_modules/@azure/core-http/es/src/coreHttp.js","../models/blobMappers":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/blobMappers.js","../models/parameters":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/pageBlobMappers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ClearRange", {
  enumerable: true,
  get: function () {
    return _mappers.ClearRange;
  }
});
Object.defineProperty(exports, "PageBlobClearPagesHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.PageBlobClearPagesHeaders;
  }
});
Object.defineProperty(exports, "PageBlobCopyIncrementalHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.PageBlobCopyIncrementalHeaders;
  }
});
Object.defineProperty(exports, "PageBlobCreateHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.PageBlobCreateHeaders;
  }
});
Object.defineProperty(exports, "PageBlobGetPageRangesDiffHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.PageBlobGetPageRangesDiffHeaders;
  }
});
Object.defineProperty(exports, "PageBlobGetPageRangesHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.PageBlobGetPageRangesHeaders;
  }
});
Object.defineProperty(exports, "PageBlobResizeHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.PageBlobResizeHeaders;
  }
});
Object.defineProperty(exports, "PageBlobUpdateSequenceNumberHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.PageBlobUpdateSequenceNumberHeaders;
  }
});
Object.defineProperty(exports, "PageBlobUploadPagesFromURLHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.PageBlobUploadPagesFromURLHeaders;
  }
});
Object.defineProperty(exports, "PageBlobUploadPagesHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.PageBlobUploadPagesHeaders;
  }
});
Object.defineProperty(exports, "PageList", {
  enumerable: true,
  get: function () {
    return _mappers.PageList;
  }
});
Object.defineProperty(exports, "PageRange", {
  enumerable: true,
  get: function () {
    return _mappers.PageRange;
  }
});
Object.defineProperty(exports, "StorageError", {
  enumerable: true,
  get: function () {
    return _mappers.StorageError;
  }
});

var _mappers = require("../models/mappers");
},{"../models/mappers":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/pageBlob.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PageBlob = void 0;

var coreHttp = _interopRequireWildcard(require("@azure/core-http"));

var Mappers = _interopRequireWildcard(require("../models/pageBlobMappers"));

var Parameters = _interopRequireWildcard(require("../models/parameters"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

/** Class representing a PageBlob. */
var PageBlob =
/** @class */
function () {
  /**
   * Create a PageBlob.
   * @param {StorageClientContext} client Reference to the service client.
   */
  function PageBlob(client) {
    this.client = client;
  }

  PageBlob.prototype.create = function (contentLength, blobContentLength, options, callback) {
    return this.client.sendOperationRequest({
      contentLength: contentLength,
      blobContentLength: blobContentLength,
      options: options
    }, createOperationSpec, callback);
  };

  PageBlob.prototype.uploadPages = function (body, contentLength, options, callback) {
    return this.client.sendOperationRequest({
      body: body,
      contentLength: contentLength,
      options: options
    }, uploadPagesOperationSpec, callback);
  };

  PageBlob.prototype.clearPages = function (contentLength, options, callback) {
    return this.client.sendOperationRequest({
      contentLength: contentLength,
      options: options
    }, clearPagesOperationSpec, callback);
  };

  PageBlob.prototype.uploadPagesFromURL = function (sourceUrl, sourceRange, contentLength, range, options, callback) {
    return this.client.sendOperationRequest({
      sourceUrl: sourceUrl,
      sourceRange: sourceRange,
      contentLength: contentLength,
      range: range,
      options: options
    }, uploadPagesFromURLOperationSpec, callback);
  };

  PageBlob.prototype.getPageRanges = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, getPageRangesOperationSpec, callback);
  };

  PageBlob.prototype.getPageRangesDiff = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, getPageRangesDiffOperationSpec, callback);
  };

  PageBlob.prototype.resize = function (blobContentLength, options, callback) {
    return this.client.sendOperationRequest({
      blobContentLength: blobContentLength,
      options: options
    }, resizeOperationSpec, callback);
  };

  PageBlob.prototype.updateSequenceNumber = function (sequenceNumberAction, options, callback) {
    return this.client.sendOperationRequest({
      sequenceNumberAction: sequenceNumberAction,
      options: options
    }, updateSequenceNumberOperationSpec, callback);
  };

  PageBlob.prototype.copyIncremental = function (copySource, options, callback) {
    return this.client.sendOperationRequest({
      copySource: copySource,
      options: options
    }, copyIncrementalOperationSpec, callback);
  };

  return PageBlob;
}();

exports.PageBlob = PageBlob;
// Operation Specifications
var serializer = new coreHttp.Serializer(Mappers, true);
var createOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds],
  headerParameters: [Parameters.contentLength, Parameters.tier0, Parameters.metadata, Parameters.encryptionScope, Parameters.blobContentLength, Parameters.blobSequenceNumber, Parameters.version, Parameters.requestId, Parameters.blobTagsString, Parameters.blobType0, Parameters.blobContentType, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentMD5, Parameters.blobCacheControl, Parameters.blobContentDisposition, Parameters.leaseId0, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  responses: {
    201: {
      headersMapper: Mappers.PageBlobCreateHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.PageBlobCreateHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var uploadPagesOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp17],
  headerParameters: [Parameters.contentLength, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64, Parameters.range0, Parameters.encryptionScope, Parameters.version, Parameters.requestId, Parameters.pageWrite0, Parameters.leaseId0, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifSequenceNumberLessThanOrEqualTo, Parameters.ifSequenceNumberLessThan, Parameters.ifSequenceNumberEqualTo, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "application/octet-stream",
  responses: {
    201: {
      headersMapper: Mappers.PageBlobUploadPagesHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.PageBlobUploadPagesHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var clearPagesOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp17],
  headerParameters: [Parameters.contentLength, Parameters.range0, Parameters.encryptionScope, Parameters.version, Parameters.requestId, Parameters.pageWrite1, Parameters.leaseId0, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifSequenceNumberLessThanOrEqualTo, Parameters.ifSequenceNumberLessThan, Parameters.ifSequenceNumberEqualTo, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  responses: {
    201: {
      headersMapper: Mappers.PageBlobClearPagesHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.PageBlobClearPagesHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var uploadPagesFromURLOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp17],
  headerParameters: [Parameters.sourceUrl, Parameters.sourceRange0, Parameters.sourceContentMD5, Parameters.sourceContentCrc64, Parameters.contentLength, Parameters.range1, Parameters.encryptionScope, Parameters.version, Parameters.requestId, Parameters.pageWrite0, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.leaseId0, Parameters.ifSequenceNumberLessThanOrEqualTo, Parameters.ifSequenceNumberLessThan, Parameters.ifSequenceNumberEqualTo, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch],
  responses: {
    201: {
      headersMapper: Mappers.PageBlobUploadPagesFromURLHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.PageBlobUploadPagesFromURLHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var getPageRangesOperationSpec = {
  httpMethod: "GET",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.snapshot, Parameters.timeoutInSeconds, Parameters.comp18],
  headerParameters: [Parameters.range0, Parameters.version, Parameters.requestId, Parameters.leaseId0, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  responses: {
    200: {
      bodyMapper: Mappers.PageList,
      headersMapper: Mappers.PageBlobGetPageRangesHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.PageBlobGetPageRangesHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var getPageRangesDiffOperationSpec = {
  httpMethod: "GET",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.snapshot, Parameters.timeoutInSeconds, Parameters.prevsnapshot, Parameters.comp18],
  headerParameters: [Parameters.prevSnapshotUrl, Parameters.range0, Parameters.version, Parameters.requestId, Parameters.leaseId0, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  responses: {
    200: {
      bodyMapper: Mappers.PageList,
      headersMapper: Mappers.PageBlobGetPageRangesDiffHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.PageBlobGetPageRangesDiffHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var resizeOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp0],
  headerParameters: [Parameters.encryptionScope, Parameters.blobContentLength, Parameters.version, Parameters.requestId, Parameters.leaseId0, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  responses: {
    200: {
      headersMapper: Mappers.PageBlobResizeHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.PageBlobResizeHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var updateSequenceNumberOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp0],
  headerParameters: [Parameters.sequenceNumberAction, Parameters.blobSequenceNumber, Parameters.version, Parameters.requestId, Parameters.leaseId0, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  responses: {
    200: {
      headersMapper: Mappers.PageBlobUpdateSequenceNumberHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.PageBlobUpdateSequenceNumberHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var copyIncrementalOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp19],
  headerParameters: [Parameters.copySource, Parameters.version, Parameters.requestId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  responses: {
    202: {
      headersMapper: Mappers.PageBlobCopyIncrementalHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.PageBlobCopyIncrementalHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
},{"@azure/core-http":"node_modules/@azure/core-http/es/src/coreHttp.js","../models/pageBlobMappers":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/pageBlobMappers.js","../models/parameters":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/appendBlobMappers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AppendBlobAppendBlockFromUrlHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.AppendBlobAppendBlockFromUrlHeaders;
  }
});
Object.defineProperty(exports, "AppendBlobAppendBlockHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.AppendBlobAppendBlockHeaders;
  }
});
Object.defineProperty(exports, "AppendBlobCreateHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.AppendBlobCreateHeaders;
  }
});
Object.defineProperty(exports, "AppendBlobSealHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.AppendBlobSealHeaders;
  }
});
Object.defineProperty(exports, "StorageError", {
  enumerable: true,
  get: function () {
    return _mappers.StorageError;
  }
});

var _mappers = require("../models/mappers");
},{"../models/mappers":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/appendBlob.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AppendBlob = void 0;

var coreHttp = _interopRequireWildcard(require("@azure/core-http"));

var Mappers = _interopRequireWildcard(require("../models/appendBlobMappers"));

var Parameters = _interopRequireWildcard(require("../models/parameters"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

/** Class representing a AppendBlob. */
var AppendBlob =
/** @class */
function () {
  /**
   * Create a AppendBlob.
   * @param {StorageClientContext} client Reference to the service client.
   */
  function AppendBlob(client) {
    this.client = client;
  }

  AppendBlob.prototype.create = function (contentLength, options, callback) {
    return this.client.sendOperationRequest({
      contentLength: contentLength,
      options: options
    }, createOperationSpec, callback);
  };

  AppendBlob.prototype.appendBlock = function (body, contentLength, options, callback) {
    return this.client.sendOperationRequest({
      body: body,
      contentLength: contentLength,
      options: options
    }, appendBlockOperationSpec, callback);
  };

  AppendBlob.prototype.appendBlockFromUrl = function (sourceUrl, contentLength, options, callback) {
    return this.client.sendOperationRequest({
      sourceUrl: sourceUrl,
      contentLength: contentLength,
      options: options
    }, appendBlockFromUrlOperationSpec, callback);
  };

  AppendBlob.prototype.seal = function (options, callback) {
    return this.client.sendOperationRequest({
      options: options
    }, sealOperationSpec, callback);
  };

  return AppendBlob;
}();

exports.AppendBlob = AppendBlob;
// Operation Specifications
var serializer = new coreHttp.Serializer(Mappers, true);
var createOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds],
  headerParameters: [Parameters.contentLength, Parameters.metadata, Parameters.encryptionScope, Parameters.version, Parameters.requestId, Parameters.blobTagsString, Parameters.blobType1, Parameters.blobContentType, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentMD5, Parameters.blobCacheControl, Parameters.blobContentDisposition, Parameters.leaseId0, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  responses: {
    201: {
      headersMapper: Mappers.AppendBlobCreateHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.AppendBlobCreateHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var appendBlockOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp20],
  headerParameters: [Parameters.contentLength, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64, Parameters.encryptionScope, Parameters.version, Parameters.requestId, Parameters.leaseId0, Parameters.maxSize, Parameters.appendPosition, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "application/octet-stream",
  responses: {
    201: {
      headersMapper: Mappers.AppendBlobAppendBlockHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.AppendBlobAppendBlockHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var appendBlockFromUrlOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp20],
  headerParameters: [Parameters.sourceUrl, Parameters.sourceRange1, Parameters.sourceContentMD5, Parameters.sourceContentCrc64, Parameters.contentLength, Parameters.transactionalContentMD5, Parameters.encryptionScope, Parameters.version, Parameters.requestId, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.leaseId0, Parameters.maxSize, Parameters.appendPosition, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch],
  responses: {
    201: {
      headersMapper: Mappers.AppendBlobAppendBlockFromUrlHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.AppendBlobAppendBlockFromUrlHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var sealOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp21],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.leaseId0, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.appendPosition],
  responses: {
    200: {
      headersMapper: Mappers.AppendBlobSealHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.AppendBlobSealHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
},{"@azure/core-http":"node_modules/@azure/core-http/es/src/coreHttp.js","../models/appendBlobMappers":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/appendBlobMappers.js","../models/parameters":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/blockBlobMappers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Block", {
  enumerable: true,
  get: function () {
    return _mappers.Block;
  }
});
Object.defineProperty(exports, "BlockBlobCommitBlockListHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlockBlobCommitBlockListHeaders;
  }
});
Object.defineProperty(exports, "BlockBlobGetBlockListHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlockBlobGetBlockListHeaders;
  }
});
Object.defineProperty(exports, "BlockBlobPutBlobFromUrlHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlockBlobPutBlobFromUrlHeaders;
  }
});
Object.defineProperty(exports, "BlockBlobStageBlockFromURLHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlockBlobStageBlockFromURLHeaders;
  }
});
Object.defineProperty(exports, "BlockBlobStageBlockHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlockBlobStageBlockHeaders;
  }
});
Object.defineProperty(exports, "BlockBlobUploadHeaders", {
  enumerable: true,
  get: function () {
    return _mappers.BlockBlobUploadHeaders;
  }
});
Object.defineProperty(exports, "BlockList", {
  enumerable: true,
  get: function () {
    return _mappers.BlockList;
  }
});
Object.defineProperty(exports, "BlockLookupList", {
  enumerable: true,
  get: function () {
    return _mappers.BlockLookupList;
  }
});
Object.defineProperty(exports, "StorageError", {
  enumerable: true,
  get: function () {
    return _mappers.StorageError;
  }
});

var _mappers = require("../models/mappers");
},{"../models/mappers":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blockBlob.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockBlob = void 0;

var _tslib = require("tslib");

var coreHttp = _interopRequireWildcard(require("@azure/core-http"));

var Mappers = _interopRequireWildcard(require("../models/blockBlobMappers"));

var Parameters = _interopRequireWildcard(require("../models/parameters"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

/** Class representing a BlockBlob. */
var BlockBlob =
/** @class */
function () {
  /**
   * Create a BlockBlob.
   * @param {StorageClientContext} client Reference to the service client.
   */
  function BlockBlob(client) {
    this.client = client;
  }

  BlockBlob.prototype.upload = function (body, contentLength, options, callback) {
    return this.client.sendOperationRequest({
      body: body,
      contentLength: contentLength,
      options: options
    }, uploadOperationSpec, callback);
  };

  BlockBlob.prototype.putBlobFromUrl = function (contentLength, copySource, options, callback) {
    return this.client.sendOperationRequest({
      contentLength: contentLength,
      copySource: copySource,
      options: options
    }, putBlobFromUrlOperationSpec, callback);
  };

  BlockBlob.prototype.stageBlock = function (blockId, contentLength, body, options, callback) {
    return this.client.sendOperationRequest({
      blockId: blockId,
      contentLength: contentLength,
      body: body,
      options: options
    }, stageBlockOperationSpec, callback);
  };

  BlockBlob.prototype.stageBlockFromURL = function (blockId, contentLength, sourceUrl, options, callback) {
    return this.client.sendOperationRequest({
      blockId: blockId,
      contentLength: contentLength,
      sourceUrl: sourceUrl,
      options: options
    }, stageBlockFromURLOperationSpec, callback);
  };

  BlockBlob.prototype.commitBlockList = function (blocks, options, callback) {
    return this.client.sendOperationRequest({
      blocks: blocks,
      options: options
    }, commitBlockListOperationSpec, callback);
  };

  BlockBlob.prototype.getBlockList = function (listType, options, callback) {
    return this.client.sendOperationRequest({
      listType: listType,
      options: options
    }, getBlockListOperationSpec, callback);
  };

  return BlockBlob;
}();

exports.BlockBlob = BlockBlob;
// Operation Specifications
var serializer = new coreHttp.Serializer(Mappers, true);
var uploadOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds],
  headerParameters: [Parameters.transactionalContentMD5, Parameters.contentLength, Parameters.metadata, Parameters.encryptionScope, Parameters.tier0, Parameters.version, Parameters.requestId, Parameters.blobTagsString, Parameters.blobType2, Parameters.blobContentType, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentMD5, Parameters.blobCacheControl, Parameters.blobContentDisposition, Parameters.leaseId0, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "application/octet-stream",
  responses: {
    201: {
      headersMapper: Mappers.BlockBlobUploadHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlockBlobUploadHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var putBlobFromUrlOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds],
  headerParameters: [Parameters.transactionalContentMD5, Parameters.contentLength, Parameters.metadata, Parameters.encryptionScope, Parameters.tier0, Parameters.version, Parameters.requestId, Parameters.sourceContentMD5, Parameters.blobTagsString, Parameters.copySource, Parameters.copySourceBlobProperties, Parameters.blobType2, Parameters.blobContentType, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentMD5, Parameters.blobCacheControl, Parameters.blobContentDisposition, Parameters.leaseId0, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch, Parameters.sourceIfTags],
  responses: {
    201: {
      headersMapper: Mappers.BlockBlobPutBlobFromUrlHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlockBlobPutBlobFromUrlHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var stageBlockOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.blockId, Parameters.timeoutInSeconds, Parameters.comp22],
  headerParameters: [Parameters.contentLength, Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64, Parameters.encryptionScope, Parameters.version, Parameters.requestId, Parameters.leaseId0, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm],
  requestBody: {
    parameterPath: "body",
    mapper: {
      required: true,
      serializedName: "body",
      type: {
        name: "Stream"
      }
    }
  },
  contentType: "application/octet-stream",
  responses: {
    201: {
      headersMapper: Mappers.BlockBlobStageBlockHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlockBlobStageBlockHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var stageBlockFromURLOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.blockId, Parameters.timeoutInSeconds, Parameters.comp22],
  headerParameters: [Parameters.contentLength, Parameters.sourceUrl, Parameters.sourceRange1, Parameters.sourceContentMD5, Parameters.sourceContentCrc64, Parameters.encryptionScope, Parameters.version, Parameters.requestId, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.leaseId0, Parameters.sourceIfModifiedSince, Parameters.sourceIfUnmodifiedSince, Parameters.sourceIfMatch, Parameters.sourceIfNoneMatch],
  responses: {
    201: {
      headersMapper: Mappers.BlockBlobStageBlockFromURLHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlockBlobStageBlockFromURLHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var commitBlockListOperationSpec = {
  httpMethod: "PUT",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp23],
  headerParameters: [Parameters.transactionalContentMD5, Parameters.transactionalContentCrc64, Parameters.metadata, Parameters.encryptionScope, Parameters.tier0, Parameters.version, Parameters.requestId, Parameters.blobTagsString, Parameters.blobCacheControl, Parameters.blobContentType, Parameters.blobContentEncoding, Parameters.blobContentLanguage, Parameters.blobContentMD5, Parameters.blobContentDisposition, Parameters.leaseId0, Parameters.encryptionKey, Parameters.encryptionKeySha256, Parameters.encryptionAlgorithm, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.ifTags],
  requestBody: {
    parameterPath: "blocks",
    mapper: (0, _tslib.__assign)((0, _tslib.__assign)({}, Mappers.BlockLookupList), {
      required: true
    })
  },
  contentType: "application/xml; charset=utf-8",
  responses: {
    201: {
      headersMapper: Mappers.BlockBlobCommitBlockListHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlockBlobCommitBlockListHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
var getBlockListOperationSpec = {
  httpMethod: "GET",
  path: "{containerName}/{blob}",
  urlParameters: [Parameters.url],
  queryParameters: [Parameters.snapshot, Parameters.listType, Parameters.timeoutInSeconds, Parameters.comp23],
  headerParameters: [Parameters.version, Parameters.requestId, Parameters.leaseId0, Parameters.ifTags],
  responses: {
    200: {
      bodyMapper: Mappers.BlockList,
      headersMapper: Mappers.BlockBlobGetBlockListHeaders
    },
    default: {
      bodyMapper: Mappers.StorageError,
      headersMapper: Mappers.BlockBlobGetBlockListHeaders
    }
  },
  isXML: true,
  serializer: serializer
};
},{"tslib":"node_modules/tslib/tslib.es6.js","@azure/core-http":"node_modules/@azure/core-http/es/src/coreHttp.js","../models/blockBlobMappers":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/blockBlobMappers.js","../models/parameters":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _service = require("./service");

Object.keys(_service).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _service[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _service[key];
    }
  });
});

var _container = require("./container");

Object.keys(_container).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _container[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _container[key];
    }
  });
});

var _directory = require("./directory");

Object.keys(_directory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _directory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _directory[key];
    }
  });
});

var _blob = require("./blob");

Object.keys(_blob).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _blob[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _blob[key];
    }
  });
});

var _pageBlob = require("./pageBlob");

Object.keys(_pageBlob).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _pageBlob[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _pageBlob[key];
    }
  });
});

var _appendBlob = require("./appendBlob");

Object.keys(_appendBlob).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _appendBlob[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _appendBlob[key];
    }
  });
});

var _blockBlob = require("./blockBlob");

Object.keys(_blockBlob).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _blockBlob[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _blockBlob[key];
    }
  });
});
},{"./service":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/service.js","./container":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/container.js","./directory":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/directory.js","./blob":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blob.js","./pageBlob":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/pageBlob.js","./appendBlob":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/appendBlob.js","./blockBlob":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blockBlob.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logger = void 0;

var _logger = require("@azure/logger");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * The `@azure/logger` configuration for this package.
 */
var logger = (0, _logger.createClientLogger)("storage-blob");
exports.logger = logger;
},{"@azure/logger":"node_modules/@azure/logger/dist-esm/src/index.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StorageBlobLoggingAllowedQueryParameters = exports.StorageBlobLoggingAllowedHeaderNames = exports.DevelopmentConnectionString = exports.EncryptionAlgorithmAES25 = exports.HTTP_VERSION_1_1 = exports.HTTP_LINE_ENDING = exports.BATCH_MAX_PAYLOAD_IN_BYTES = exports.BATCH_MAX_REQUEST = exports.SIZE_1_MB = exports.ETagAny = exports.ETagNone = exports.HeaderConstants = exports.HTTPURLConnection = exports.URLConstants = exports.StorageOAuthScopes = exports.DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS = exports.DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES = exports.DEFAULT_BLOCK_BUFFER_SIZE_BYTES = exports.BLOCK_BLOB_MAX_BLOCKS = exports.BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES = exports.BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES = exports.SERVICE_VERSION = exports.SDK_VERSION = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var SDK_VERSION = "12.5.0";
exports.SDK_VERSION = SDK_VERSION;
var SERVICE_VERSION = "2020-06-12";
exports.SERVICE_VERSION = SERVICE_VERSION;
var BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES = 256 * 1024 * 1024; // 256MB

exports.BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES = BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES;
var BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES = 4000 * 1024 * 1024; // 4000MB

exports.BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES = BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES;
var BLOCK_BLOB_MAX_BLOCKS = 50000;
exports.BLOCK_BLOB_MAX_BLOCKS = BLOCK_BLOB_MAX_BLOCKS;
var DEFAULT_BLOCK_BUFFER_SIZE_BYTES = 8 * 1024 * 1024; // 8MB

exports.DEFAULT_BLOCK_BUFFER_SIZE_BYTES = DEFAULT_BLOCK_BUFFER_SIZE_BYTES;
var DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES = 4 * 1024 * 1024; // 4MB

exports.DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES = DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;
var DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS = 5;
/**
 * The OAuth scope to use with Azure Storage.
 */

exports.DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS = DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS;
var StorageOAuthScopes = "https://storage.azure.com/.default";
exports.StorageOAuthScopes = StorageOAuthScopes;
var URLConstants = {
  Parameters: {
    FORCE_BROWSER_NO_CACHE: "_",
    SIGNATURE: "sig",
    SNAPSHOT: "snapshot",
    VERSIONID: "versionid",
    TIMEOUT: "timeout"
  }
};
exports.URLConstants = URLConstants;
var HTTPURLConnection = {
  HTTP_ACCEPTED: 202,
  HTTP_CONFLICT: 409,
  HTTP_NOT_FOUND: 404,
  HTTP_PRECON_FAILED: 412,
  HTTP_RANGE_NOT_SATISFIABLE: 416
};
exports.HTTPURLConnection = HTTPURLConnection;
var HeaderConstants = {
  AUTHORIZATION: "Authorization",
  AUTHORIZATION_SCHEME: "Bearer",
  CONTENT_ENCODING: "Content-Encoding",
  CONTENT_ID: "Content-ID",
  CONTENT_LANGUAGE: "Content-Language",
  CONTENT_LENGTH: "Content-Length",
  CONTENT_MD5: "Content-Md5",
  CONTENT_TRANSFER_ENCODING: "Content-Transfer-Encoding",
  CONTENT_TYPE: "Content-Type",
  COOKIE: "Cookie",
  DATE: "date",
  IF_MATCH: "if-match",
  IF_MODIFIED_SINCE: "if-modified-since",
  IF_NONE_MATCH: "if-none-match",
  IF_UNMODIFIED_SINCE: "if-unmodified-since",
  PREFIX_FOR_STORAGE: "x-ms-",
  RANGE: "Range",
  USER_AGENT: "User-Agent",
  X_MS_CLIENT_REQUEST_ID: "x-ms-client-request-id",
  X_MS_COPY_SOURCE: "x-ms-copy-source",
  X_MS_DATE: "x-ms-date",
  X_MS_ERROR_CODE: "x-ms-error-code",
  X_MS_VERSION: "x-ms-version"
};
exports.HeaderConstants = HeaderConstants;
var ETagNone = "";
exports.ETagNone = ETagNone;
var ETagAny = "*";
exports.ETagAny = ETagAny;
var SIZE_1_MB = 1 * 1024 * 1024;
exports.SIZE_1_MB = SIZE_1_MB;
var BATCH_MAX_REQUEST = 256;
exports.BATCH_MAX_REQUEST = BATCH_MAX_REQUEST;
var BATCH_MAX_PAYLOAD_IN_BYTES = 4 * SIZE_1_MB;
exports.BATCH_MAX_PAYLOAD_IN_BYTES = BATCH_MAX_PAYLOAD_IN_BYTES;
var HTTP_LINE_ENDING = "\r\n";
exports.HTTP_LINE_ENDING = HTTP_LINE_ENDING;
var HTTP_VERSION_1_1 = "HTTP/1.1";
exports.HTTP_VERSION_1_1 = HTTP_VERSION_1_1;
var EncryptionAlgorithmAES25 = "AES256";
exports.EncryptionAlgorithmAES25 = EncryptionAlgorithmAES25;
var DevelopmentConnectionString = "DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;";
exports.DevelopmentConnectionString = DevelopmentConnectionString;
var StorageBlobLoggingAllowedHeaderNames = ["Access-Control-Allow-Origin", "Cache-Control", "Content-Length", "Content-Type", "Date", "Request-Id", "traceparent", "Transfer-Encoding", "User-Agent", "x-ms-client-request-id", "x-ms-date", "x-ms-error-code", "x-ms-request-id", "x-ms-return-client-request-id", "x-ms-version", "Accept-Ranges", "Content-Disposition", "Content-Encoding", "Content-Language", "Content-MD5", "Content-Range", "ETag", "Last-Modified", "Server", "Vary", "x-ms-content-crc64", "x-ms-copy-action", "x-ms-copy-completion-time", "x-ms-copy-id", "x-ms-copy-progress", "x-ms-copy-status", "x-ms-has-immutability-policy", "x-ms-has-legal-hold", "x-ms-lease-state", "x-ms-lease-status", "x-ms-range", "x-ms-request-server-encrypted", "x-ms-server-encrypted", "x-ms-snapshot", "x-ms-source-range", "If-Match", "If-Modified-Since", "If-None-Match", "If-Unmodified-Since", "x-ms-access-tier", "x-ms-access-tier-change-time", "x-ms-access-tier-inferred", "x-ms-account-kind", "x-ms-archive-status", "x-ms-blob-append-offset", "x-ms-blob-cache-control", "x-ms-blob-committed-block-count", "x-ms-blob-condition-appendpos", "x-ms-blob-condition-maxsize", "x-ms-blob-content-disposition", "x-ms-blob-content-encoding", "x-ms-blob-content-language", "x-ms-blob-content-length", "x-ms-blob-content-md5", "x-ms-blob-content-type", "x-ms-blob-public-access", "x-ms-blob-sequence-number", "x-ms-blob-type", "x-ms-copy-destination-snapshot", "x-ms-creation-time", "x-ms-default-encryption-scope", "x-ms-delete-snapshots", "x-ms-delete-type-permanent", "x-ms-deny-encryption-scope-override", "x-ms-encryption-algorithm", "x-ms-if-sequence-number-eq", "x-ms-if-sequence-number-le", "x-ms-if-sequence-number-lt", "x-ms-incremental-copy", "x-ms-lease-action", "x-ms-lease-break-period", "x-ms-lease-duration", "x-ms-lease-id", "x-ms-lease-time", "x-ms-page-write", "x-ms-proposed-lease-id", "x-ms-range-get-content-md5", "x-ms-rehydrate-priority", "x-ms-sequence-number-action", "x-ms-sku-name", "x-ms-source-content-md5", "x-ms-source-if-match", "x-ms-source-if-modified-since", "x-ms-source-if-none-match", "x-ms-source-if-unmodified-since", "x-ms-tag-count", "x-ms-encryption-key-sha256", "x-ms-if-tags", "x-ms-source-if-tags"];
exports.StorageBlobLoggingAllowedHeaderNames = StorageBlobLoggingAllowedHeaderNames;
var StorageBlobLoggingAllowedQueryParameters = ["comp", "maxresults", "rscc", "rscd", "rsce", "rscl", "rsct", "se", "si", "sip", "sp", "spr", "sr", "srt", "ss", "st", "sv", "include", "marker", "prefix", "copyid", "restype", "blockid", "blocklisttype", "delimiter", "prevsnapshot", "ske", "skoid", "sks", "skt", "sktid", "skv", "snapshot"];
exports.StorageBlobLoggingAllowedQueryParameters = StorageBlobLoggingAllowedQueryParameters;
},{}],"../../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/base64-js/index.js":[function(require,module,exports) {
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],"../../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/ieee754/index.js":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],"../../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/isarray/index.js":[function(require,module,exports) {
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],"../../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/buffer/index.js":[function(require,module,exports) {

var global = arguments[3];
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

},{"base64-js":"../../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/base64-js/index.js","ieee754":"../../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/ieee754/index.js","isarray":"../../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/isarray/index.js","buffer":"../../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.escapeURLPath = escapeURLPath;
exports.getValueInConnString = getValueInConnString;
exports.extractConnectionStringParts = extractConnectionStringParts;
exports.appendToURLPath = appendToURLPath;
exports.setURLParameter = setURLParameter;
exports.getURLParameter = getURLParameter;
exports.setURLHost = setURLHost;
exports.getURLPath = getURLPath;
exports.getURLScheme = getURLScheme;
exports.getURLPathAndQuery = getURLPathAndQuery;
exports.getURLQueries = getURLQueries;
exports.appendToURLQuery = appendToURLQuery;
exports.truncatedISO8061Date = truncatedISO8061Date;
exports.base64encode = base64encode;
exports.base64decode = base64decode;
exports.generateBlockID = generateBlockID;
exports.delay = delay;
exports.padStart = padStart;
exports.sanitizeURL = sanitizeURL;
exports.sanitizeHeaders = sanitizeHeaders;
exports.iEqual = iEqual;
exports.getAccountNameFromUrl = getAccountNameFromUrl;
exports.isIpEndpointStyle = isIpEndpointStyle;
exports.toBlobTagsString = toBlobTagsString;
exports.toBlobTags = toBlobTags;
exports.toTags = toTags;
exports.toQuerySerialization = toQuerySerialization;
exports.parseObjectReplicationRecord = parseObjectReplicationRecord;
exports.attachCredential = attachCredential;

var _tslib = require("tslib");

var _coreHttp = require("@azure/core-http");

var _constants = require("./constants");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Reserved URL characters must be properly escaped for Storage services like Blob or File.
 *
 * ## URL encode and escape strategy for JS SDKs
 *
 * When customers pass a URL string into XxxClient classes constructor, the URL string may already be URL encoded or not.
 * But before sending to Azure Storage server, the URL must be encoded. However, it's hard for a SDK to guess whether the URL
 * string has been encoded or not. We have 2 potential strategies, and chose strategy two for the XxxClient constructors.
 *
 * ### Strategy One: Assume the customer URL string is not encoded, and always encode URL string in SDK.
 *
 * This is what legacy V2 SDK does, simple and works for most of the cases.
 * - When customer URL string is "http://account.blob.core.windows.net/con/b:",
 *   SDK will encode it to "http://account.blob.core.windows.net/con/b%3A" and send to server. A blob named "b:" will be created.
 * - When customer URL string is "http://account.blob.core.windows.net/con/b%3A",
 *   SDK will encode it to "http://account.blob.core.windows.net/con/b%253A" and send to server. A blob named "b%3A" will be created.
 *
 * But this strategy will make it not possible to create a blob with "?" in it's name. Because when customer URL string is
 * "http://account.blob.core.windows.net/con/blob?name", the "?name" will be treated as URL paramter instead of blob name.
 * If customer URL string is "http://account.blob.core.windows.net/con/blob%3Fname", a blob named "blob%3Fname" will be created.
 * V2 SDK doesn't have this issue because it doesn't allow customer pass in a full URL, it accepts a separate blob name and encodeURIComponent for it.
 * We cannot accept a SDK cannot create a blob name with "?". So we implement strategy two:
 *
 * ### Strategy Two: SDK doesn't assume the URL has been encoded or not. It will just escape the special characters.
 *
 * This is what V10 Blob Go SDK does. It accepts a URL type in Go, and call url.EscapedPath() to escape the special chars unescaped.
 * - When customer URL string is "http://account.blob.core.windows.net/con/b:",
 *   SDK will escape ":" like "http://account.blob.core.windows.net/con/b%3A" and send to server. A blob named "b:" will be created.
 * - When customer URL string is "http://account.blob.core.windows.net/con/b%3A",
 *   There is no special characters, so send "http://account.blob.core.windows.net/con/b%3A" to server. A blob named "b:" will be created.
 * - When customer URL string is "http://account.blob.core.windows.net/con/b%253A",
 *   There is no special characters, so send "http://account.blob.core.windows.net/con/b%253A" to server. A blob named "b%3A" will be created.
 *
 * This strategy gives us flexibility to create with any special characters. But "%" will be treated as a special characters, if the URL string
 * is not encoded, there shouldn't a "%" in the URL string, otherwise the URL is not a valid URL.
 * If customer needs to create a blob with "%" in it's blob name, use "%25" instead of "%". Just like above 3rd sample.
 * And following URL strings are invalid:
 * - "http://account.blob.core.windows.net/con/b%"
 * - "http://account.blob.core.windows.net/con/b%2"
 * - "http://account.blob.core.windows.net/con/b%G"
 *
 * Another special character is "?", use "%2F" to represent a blob name with "?" in a URL string.
 *
 * ### Strategy for containerName, blobName or other specific XXXName parameters in methods such as `containerClient.getBlobClient(blobName)`
 *
 * We will apply strategy one, and call encodeURIComponent for these parameters like blobName. Because what customers passes in is a plain name instead of a URL.
 *
 * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata
 * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-shares--directories--files--and-metadata
 *
 * @param url -
 */
function escapeURLPath(url) {
  var urlParsed = _coreHttp.URLBuilder.parse(url);

  var path = urlParsed.getPath();
  path = path || "/";
  path = escape(path);
  urlParsed.setPath(path);
  return urlParsed.toString();
}

function getProxyUriFromDevConnString(connectionString) {
  // Development Connection String
  // https://docs.microsoft.com/en-us/azure/storage/common/storage-configure-connection-string#connect-to-the-emulator-account-using-the-well-known-account-name-and-key
  var proxyUri = "";

  if (connectionString.search("DevelopmentStorageProxyUri=") !== -1) {
    // CONNECTION_STRING=UseDevelopmentStorage=true;DevelopmentStorageProxyUri=http://myProxyUri
    var matchCredentials = connectionString.split(";");

    for (var _i = 0, matchCredentials_1 = matchCredentials; _i < matchCredentials_1.length; _i++) {
      var element = matchCredentials_1[_i];

      if (element.trim().startsWith("DevelopmentStorageProxyUri=")) {
        proxyUri = element.trim().match("DevelopmentStorageProxyUri=(.*)")[1];
      }
    }
  }

  return proxyUri;
}

function getValueInConnString(connectionString, argument) {
  var elements = connectionString.split(";");

  for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
    var element = elements_1[_i];

    if (element.trim().startsWith(argument)) {
      return element.trim().match(argument + "=(.*)")[1];
    }
  }

  return "";
}
/**
 * Extracts the parts of an Azure Storage account connection string.
 *
 * @param connectionString - Connection string.
 * @returns String key value pairs of the storage account's url and credentials.
 */


function extractConnectionStringParts(connectionString) {
  var proxyUri = "";

  if (connectionString.startsWith("UseDevelopmentStorage=true")) {
    // Development connection string
    proxyUri = getProxyUriFromDevConnString(connectionString);
    connectionString = _constants.DevelopmentConnectionString;
  } // Matching BlobEndpoint in the Account connection string


  var blobEndpoint = getValueInConnString(connectionString, "BlobEndpoint"); // Slicing off '/' at the end if exists
  // (The methods that use `extractConnectionStringParts` expect the url to not have `/` at the end)

  blobEndpoint = blobEndpoint.endsWith("/") ? blobEndpoint.slice(0, -1) : blobEndpoint;

  if (connectionString.search("DefaultEndpointsProtocol=") !== -1 && connectionString.search("AccountKey=") !== -1) {
    // Account connection string
    var defaultEndpointsProtocol = "";
    var accountName = "";
    var accountKey = Buffer.from("accountKey", "base64");
    var endpointSuffix = ""; // Get account name and key

    accountName = getValueInConnString(connectionString, "AccountName");
    accountKey = Buffer.from(getValueInConnString(connectionString, "AccountKey"), "base64");

    if (!blobEndpoint) {
      // BlobEndpoint is not present in the Account connection string
      // Can be obtained from `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`
      defaultEndpointsProtocol = getValueInConnString(connectionString, "DefaultEndpointsProtocol");
      var protocol = defaultEndpointsProtocol.toLowerCase();

      if (protocol !== "https" && protocol !== "http") {
        throw new Error("Invalid DefaultEndpointsProtocol in the provided Connection String. Expecting 'https' or 'http'");
      }

      endpointSuffix = getValueInConnString(connectionString, "EndpointSuffix");

      if (!endpointSuffix) {
        throw new Error("Invalid EndpointSuffix in the provided Connection String");
      }

      blobEndpoint = defaultEndpointsProtocol + "://" + accountName + ".blob." + endpointSuffix;
    }

    if (!accountName) {
      throw new Error("Invalid AccountName in the provided Connection String");
    } else if (accountKey.length === 0) {
      throw new Error("Invalid AccountKey in the provided Connection String");
    }

    return {
      kind: "AccountConnString",
      url: blobEndpoint,
      accountName: accountName,
      accountKey: accountKey,
      proxyUri: proxyUri
    };
  } else {
    // SAS connection string
    var accountSas = getValueInConnString(connectionString, "SharedAccessSignature");
    var accountName = getAccountNameFromUrl(blobEndpoint);

    if (!blobEndpoint) {
      throw new Error("Invalid BlobEndpoint in the provided SAS Connection String");
    } else if (!accountSas) {
      throw new Error("Invalid SharedAccessSignature in the provided SAS Connection String");
    }

    return {
      kind: "SASConnString",
      url: blobEndpoint,
      accountName: accountName,
      accountSas: accountSas
    };
  }
}
/**
 * Internal escape method implemented Strategy Two mentioned in escapeURL() description.
 *
 * @param text -
 */


function escape(text) {
  return encodeURIComponent(text).replace(/%2F/g, "/") // Don't escape for "/"
  .replace(/'/g, "%27") // Escape for "'"
  .replace(/\+/g, "%20").replace(/%25/g, "%"); // Revert encoded "%"
}
/**
 * Append a string to URL path. Will remove duplicated "/" in front of the string
 * when URL path ends with a "/".
 *
 * @param url - Source URL string
 * @param name - String to be appended to URL
 * @returns An updated URL string
 */


function appendToURLPath(url, name) {
  var urlParsed = _coreHttp.URLBuilder.parse(url);

  var path = urlParsed.getPath();
  path = path ? path.endsWith("/") ? "" + path + name : path + "/" + name : name;
  urlParsed.setPath(path);
  return urlParsed.toString();
}
/**
 * Set URL parameter name and value. If name exists in URL parameters, old value
 * will be replaced by name key. If not provide value, the parameter will be deleted.
 *
 * @param url - Source URL string
 * @param name - Parameter name
 * @param value - Parameter value
 * @returns An updated URL string
 */


function setURLParameter(url, name, value) {
  var urlParsed = _coreHttp.URLBuilder.parse(url);

  urlParsed.setQueryParameter(name, value);
  return urlParsed.toString();
}
/**
 * Get URL parameter by name.
 *
 * @param url -
 * @param name -
 */


function getURLParameter(url, name) {
  var urlParsed = _coreHttp.URLBuilder.parse(url);

  return urlParsed.getQueryParameterValue(name);
}
/**
 * Set URL host.
 *
 * @param url - Source URL string
 * @param host - New host string
 * @returns An updated URL string
 */


function setURLHost(url, host) {
  var urlParsed = _coreHttp.URLBuilder.parse(url);

  urlParsed.setHost(host);
  return urlParsed.toString();
}
/**
 * Get URL path from an URL string.
 *
 * @param url - Source URL string
 */


function getURLPath(url) {
  var urlParsed = _coreHttp.URLBuilder.parse(url);

  return urlParsed.getPath();
}
/**
 * Get URL scheme from an URL string.
 *
 * @param url - Source URL string
 */


function getURLScheme(url) {
  var urlParsed = _coreHttp.URLBuilder.parse(url);

  return urlParsed.getScheme();
}
/**
 * Get URL path and query from an URL string.
 *
 * @param url - Source URL string
 */


function getURLPathAndQuery(url) {
  var urlParsed = _coreHttp.URLBuilder.parse(url);

  var pathString = urlParsed.getPath();

  if (!pathString) {
    throw new RangeError("Invalid url without valid path.");
  }

  var queryString = urlParsed.getQuery() || "";
  queryString = queryString.trim();

  if (queryString != "") {
    queryString = queryString.startsWith("?") ? queryString : "?" + queryString; // Ensure query string start with '?'
  }

  return "" + pathString + queryString;
}
/**
 * Get URL query key value pairs from an URL string.
 *
 * @param url -
 */


function getURLQueries(url) {
  var queryString = _coreHttp.URLBuilder.parse(url).getQuery();

  if (!queryString) {
    return {};
  }

  queryString = queryString.trim();
  queryString = queryString.startsWith("?") ? queryString.substr(1) : queryString;
  var querySubStrings = queryString.split("&");
  querySubStrings = querySubStrings.filter(function (value) {
    var indexOfEqual = value.indexOf("=");
    var lastIndexOfEqual = value.lastIndexOf("=");
    return indexOfEqual > 0 && indexOfEqual === lastIndexOfEqual && lastIndexOfEqual < value.length - 1;
  });
  var queries = {};

  for (var _i = 0, querySubStrings_1 = querySubStrings; _i < querySubStrings_1.length; _i++) {
    var querySubString = querySubStrings_1[_i];
    var splitResults = querySubString.split("=");
    var key = splitResults[0];
    var value = splitResults[1];
    queries[key] = value;
  }

  return queries;
}
/**
 * Append a string to URL query.
 *
 * @param url - Source URL string.
 * @param queryParts - String to be appended to the URL query.
 * @returns An updated URL string.
 */


function appendToURLQuery(url, queryParts) {
  var urlParsed = _coreHttp.URLBuilder.parse(url);

  var query = urlParsed.getQuery();

  if (query) {
    query += "&" + queryParts;
  } else {
    query = queryParts;
  }

  urlParsed.setQuery(query);
  return urlParsed.toString();
}
/**
 * Rounds a date off to seconds.
 *
 * @param date -
 * @param withMilliseconds - If true, YYYY-MM-DDThh:mm:ss.fffffffZ will be returned;
 *                                          If false, YYYY-MM-DDThh:mm:ssZ will be returned.
 * @returns Date string in ISO8061 format, with or without 7 milliseconds component
 */


function truncatedISO8061Date(date, withMilliseconds) {
  if (withMilliseconds === void 0) {
    withMilliseconds = true;
  } // Date.toISOString() will return like "2018-10-29T06:34:36.139Z"


  var dateString = date.toISOString();
  return withMilliseconds ? dateString.substring(0, dateString.length - 1) + "0000" + "Z" : dateString.substring(0, dateString.length - 5) + "Z";
}
/**
 * Base64 encode.
 *
 * @param content -
 */


function base64encode(content) {
  return !_coreHttp.isNode ? btoa(content) : Buffer.from(content).toString("base64");
}
/**
 * Base64 decode.
 *
 * @param encodedString -
 */


function base64decode(encodedString) {
  return !_coreHttp.isNode ? atob(encodedString) : Buffer.from(encodedString, "base64").toString();
}
/**
 * Generate a 64 bytes base64 block ID string.
 *
 * @param blockIndex -
 */


function generateBlockID(blockIDPrefix, blockIndex) {
  // To generate a 64 bytes base64 string, source string should be 48
  var maxSourceStringLength = 48; // A blob can have a maximum of 100,000 uncommitted blocks at any given time

  var maxBlockIndexLength = 6;
  var maxAllowedBlockIDPrefixLength = maxSourceStringLength - maxBlockIndexLength;

  if (blockIDPrefix.length > maxAllowedBlockIDPrefixLength) {
    blockIDPrefix = blockIDPrefix.slice(0, maxAllowedBlockIDPrefixLength);
  }

  var res = blockIDPrefix + padStart(blockIndex.toString(), maxSourceStringLength - blockIDPrefix.length, "0");
  return base64encode(res);
}
/**
 * Delay specified time interval.
 *
 * @param timeInMs -
 * @param aborter -
 * @param abortError -
 */


function delay(timeInMs, aborter, abortError) {
  return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
    return (0, _tslib.__generator)(this, function (_a) {
      return [2
      /*return*/
      , new Promise(function (resolve, reject) {
        var timeout;

        var abortHandler = function () {
          if (timeout !== undefined) {
            clearTimeout(timeout);
          }

          reject(abortError);
        };

        var resolveHandler = function () {
          if (aborter !== undefined) {
            aborter.removeEventListener("abort", abortHandler);
          }

          resolve();
        };

        timeout = setTimeout(resolveHandler, timeInMs);

        if (aborter !== undefined) {
          aborter.addEventListener("abort", abortHandler);
        }
      })];
    });
  });
}
/**
 * String.prototype.padStart()
 *
 * @param currentString -
 * @param targetLength -
 * @param padString -
 */


function padStart(currentString, targetLength, padString) {
  if (padString === void 0) {
    padString = " ";
  } // TS doesn't know this code needs to run downlevel sometimes.
  // @ts-expect-error


  if (String.prototype.padStart) {
    return currentString.padStart(targetLength, padString);
  }

  padString = padString || " ";

  if (currentString.length > targetLength) {
    return currentString;
  } else {
    targetLength = targetLength - currentString.length;

    if (targetLength > padString.length) {
      padString += padString.repeat(targetLength / padString.length);
    }

    return padString.slice(0, targetLength) + currentString;
  }
}

function sanitizeURL(url) {
  var safeURL = url;

  if (getURLParameter(safeURL, _constants.URLConstants.Parameters.SIGNATURE)) {
    safeURL = setURLParameter(safeURL, _constants.URLConstants.Parameters.SIGNATURE, "*****");
  }

  return safeURL;
}

function sanitizeHeaders(originalHeader) {
  var headers = new _coreHttp.HttpHeaders();

  for (var _i = 0, _a = originalHeader.headersArray(); _i < _a.length; _i++) {
    var header = _a[_i];

    if (header.name.toLowerCase() === _constants.HeaderConstants.AUTHORIZATION.toLowerCase()) {
      headers.set(header.name, "*****");
    } else if (header.name.toLowerCase() === _constants.HeaderConstants.X_MS_COPY_SOURCE) {
      headers.set(header.name, sanitizeURL(header.value));
    } else {
      headers.set(header.name, header.value);
    }
  }

  return headers;
}
/**
 * If two strings are equal when compared case insensitive.
 *
 * @param str1 -
 * @param str2 -
 */


function iEqual(str1, str2) {
  return str1.toLocaleLowerCase() === str2.toLocaleLowerCase();
}
/**
 * Extracts account name from the url
 * @param url - url to extract the account name from
 * @returns with the account name
 */


function getAccountNameFromUrl(url) {
  var parsedUrl = _coreHttp.URLBuilder.parse(url);

  var accountName;

  try {
    if (parsedUrl.getHost().split(".")[1] === "blob") {
      // `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;
      accountName = parsedUrl.getHost().split(".")[0];
    } else if (isIpEndpointStyle(parsedUrl)) {
      // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/
      // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/
      // .getPath() -> /devstoreaccount1/
      accountName = parsedUrl.getPath().split("/")[1];
    } else {
      // Custom domain case: "https://customdomain.com/containername/blob".
      accountName = "";
    }

    return accountName;
  } catch (error) {
    throw new Error("Unable to extract accountName with provided information.");
  }
}

function isIpEndpointStyle(parsedUrl) {
  if (parsedUrl.getHost() == undefined) {
    return false;
  }

  var host = parsedUrl.getHost() + (parsedUrl.getPort() == undefined ? "" : ":" + parsedUrl.getPort()); // Case 1: Ipv6, use a broad regex to find out candidates whose host contains two ':'.
  // Case 2: localhost(:port), use broad regex to match port part.
  // Case 3: Ipv4, use broad regex which just check if host contains Ipv4.
  // For valid host please refer to https://man7.org/linux/man-pages/man7/hostname.7.html.

  return /^.*:.*:.*$|^localhost(:[0-9]+)?$|^(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])(\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])){3}(:[0-9]+)?$/.test(host);
}
/**
 * Convert Tags to encoded string.
 *
 * @param tags -
 */


function toBlobTagsString(tags) {
  if (tags === undefined) {
    return undefined;
  }

  var tagPairs = [];

  for (var key in tags) {
    if (tags.hasOwnProperty(key)) {
      var value = tags[key];
      tagPairs.push(encodeURIComponent(key) + "=" + encodeURIComponent(value));
    }
  }

  return tagPairs.join("&");
}
/**
 * Convert Tags type to BlobTags.
 *
 * @param tags -
 */


function toBlobTags(tags) {
  if (tags === undefined) {
    return undefined;
  }

  var res = {
    blobTagSet: []
  };

  for (var key in tags) {
    if (tags.hasOwnProperty(key)) {
      var value = tags[key];
      res.blobTagSet.push({
        key: key,
        value: value
      });
    }
  }

  return res;
}
/**
 * Covert BlobTags to Tags type.
 *
 * @param tags -
 */


function toTags(tags) {
  if (tags === undefined) {
    return undefined;
  }

  var res = {};

  for (var _i = 0, _a = tags.blobTagSet; _i < _a.length; _i++) {
    var blobTag = _a[_i];
    res[blobTag.key] = blobTag.value;
  }

  return res;
}
/**
 * Convert BlobQueryTextConfiguration to QuerySerialization type.
 *
 * @param textConfiguration -
 */


function toQuerySerialization(textConfiguration) {
  if (textConfiguration === undefined) {
    return undefined;
  }

  switch (textConfiguration.kind) {
    case "csv":
      return {
        format: {
          type: "delimited",
          delimitedTextConfiguration: {
            columnSeparator: textConfiguration.columnSeparator || ",",
            fieldQuote: textConfiguration.fieldQuote || "",
            recordSeparator: textConfiguration.recordSeparator,
            escapeChar: textConfiguration.escapeCharacter || "",
            headersPresent: textConfiguration.hasHeaders || false
          }
        }
      };

    case "json":
      return {
        format: {
          type: "json",
          jsonTextConfiguration: {
            recordSeparator: textConfiguration.recordSeparator
          }
        }
      };

    case "arrow":
      return {
        format: {
          type: "arrow",
          arrowConfiguration: {
            schema: textConfiguration.schema
          }
        }
      };

    default:
      throw Error("Invalid BlobQueryTextConfiguration.");
  }
}

function parseObjectReplicationRecord(objectReplicationRecord) {
  if (!objectReplicationRecord) {
    return undefined;
  }

  if ("policy-id" in objectReplicationRecord) {
    // If the dictionary contains a key with policy id, we are not required to do any parsing since
    // the policy id should already be stored in the ObjectReplicationDestinationPolicyId.
    return undefined;
  }

  var orProperties = [];

  var _loop_1 = function (key) {
    var ids = key.split("_");
    var policyPrefix = "or-";

    if (ids[0].startsWith(policyPrefix)) {
      ids[0] = ids[0].substring(policyPrefix.length);
    }

    var rule = {
      ruleId: ids[1],
      replicationStatus: objectReplicationRecord[key]
    };
    var policyIndex = orProperties.findIndex(function (policy) {
      return policy.policyId === ids[0];
    });

    if (policyIndex > -1) {
      orProperties[policyIndex].rules.push(rule);
    } else {
      orProperties.push({
        policyId: ids[0],
        rules: [rule]
      });
    }
  };

  for (var key in objectReplicationRecord) {
    _loop_1(key);
  }

  return orProperties;
}
/**
 * Attach a TokenCredential to an object.
 *
 * @param thing -
 * @param credential -
 */


function attachCredential(thing, credential) {
  thing.credential = credential;
  return thing;
}
},{"tslib":"node_modules/tslib/tslib.es6.js","@azure/core-http":"node_modules/@azure/core-http/es/src/coreHttp.js","./constants":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js","buffer":"../../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StorageBrowserPolicy = void 0;

var _tslib = require("tslib");

var _coreHttp = require("@azure/core-http");

var _constants = require("../utils/constants");

var _utils = require("../utils/utils.common");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * StorageBrowserPolicy will handle differences between Node.js and browser runtime, including:
 *
 * 1. Browsers cache GET/HEAD requests by adding conditional headers such as 'IF_MODIFIED_SINCE'.
 * StorageBrowserPolicy is a policy used to add a timestamp query to GET/HEAD request URL
 * thus avoid the browser cache.
 *
 * 2. Remove cookie header for security
 *
 * 3. Remove content-length header to avoid browsers warning
 */
var StorageBrowserPolicy =
/** @class */
function (_super) {
  (0, _tslib.__extends)(StorageBrowserPolicy, _super);
  /**
   * Creates an instance of StorageBrowserPolicy.
   * @param nextPolicy -
   * @param options -
   */

  function StorageBrowserPolicy(nextPolicy, options) {
    return _super.call(this, nextPolicy, options) || this;
  }
  /**
   * Sends out request.
   *
   * @param request -
   */


  StorageBrowserPolicy.prototype.sendRequest = function (request) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      return (0, _tslib.__generator)(this, function (_a) {
        if (_coreHttp.isNode) {
          return [2
          /*return*/
          , this._nextPolicy.sendRequest(request)];
        }

        if (request.method.toUpperCase() === "GET" || request.method.toUpperCase() === "HEAD") {
          request.url = (0, _utils.setURLParameter)(request.url, _constants.URLConstants.Parameters.FORCE_BROWSER_NO_CACHE, new Date().getTime().toString());
        }

        request.headers.remove(_constants.HeaderConstants.COOKIE); // According to XHR standards, content-length should be fully controlled by browsers

        request.headers.remove(_constants.HeaderConstants.CONTENT_LENGTH);
        return [2
        /*return*/
        , this._nextPolicy.sendRequest(request)];
      });
    });
  };

  return StorageBrowserPolicy;
}(_coreHttp.BaseRequestPolicy);

exports.StorageBrowserPolicy = StorageBrowserPolicy;
},{"tslib":"node_modules/tslib/tslib.es6.js","@azure/core-http":"node_modules/@azure/core-http/es/src/coreHttp.js","../utils/constants":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js","../utils/utils.common":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "StorageBrowserPolicy", {
  enumerable: true,
  get: function () {
    return _StorageBrowserPolicy.StorageBrowserPolicy;
  }
});
exports.StorageBrowserPolicyFactory = void 0;

var _StorageBrowserPolicy = require("./policies/StorageBrowserPolicy");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * StorageBrowserPolicyFactory is a factory class helping generating StorageBrowserPolicy objects.
 */
var StorageBrowserPolicyFactory =
/** @class */
function () {
  function StorageBrowserPolicyFactory() {}
  /**
   * Creates a StorageBrowserPolicyFactory object.
   *
   * @param nextPolicy -
   * @param options -
   */


  StorageBrowserPolicyFactory.prototype.create = function (nextPolicy, options) {
    return new _StorageBrowserPolicy.StorageBrowserPolicy(nextPolicy, options);
  };

  return StorageBrowserPolicyFactory;
}();

exports.StorageBrowserPolicyFactory = StorageBrowserPolicyFactory;
},{"./policies/StorageBrowserPolicy":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicy.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NewRetryPolicyFactory = NewRetryPolicyFactory;
exports.StorageRetryPolicy = exports.StorageRetryPolicyType = void 0;

var _tslib = require("tslib");

var _abortController = require("@azure/abort-controller");

var _coreHttp = require("@azure/core-http");

var _constants = require("../utils/constants");

var _utils = require("../utils/utils.common");

var _log = require("../log");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * A factory method used to generated a RetryPolicy factory.
 *
 * @param retryOptions -
 */
function NewRetryPolicyFactory(retryOptions) {
  return {
    create: function (nextPolicy, options) {
      return new StorageRetryPolicy(nextPolicy, options, retryOptions);
    }
  };
}
/**
 * RetryPolicy types.
 */


var StorageRetryPolicyType;
exports.StorageRetryPolicyType = StorageRetryPolicyType;

(function (StorageRetryPolicyType) {
  /**
   * Exponential retry. Retry time delay grows exponentially.
   */
  StorageRetryPolicyType[StorageRetryPolicyType["EXPONENTIAL"] = 0] = "EXPONENTIAL";
  /**
   * Linear retry. Retry time delay grows linearly.
   */

  StorageRetryPolicyType[StorageRetryPolicyType["FIXED"] = 1] = "FIXED";
})(StorageRetryPolicyType || (exports.StorageRetryPolicyType = StorageRetryPolicyType = {})); // Default values of StorageRetryOptions


var DEFAULT_RETRY_OPTIONS = {
  maxRetryDelayInMs: 120 * 1000,
  maxTries: 4,
  retryDelayInMs: 4 * 1000,
  retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,
  secondaryHost: "",
  tryTimeoutInMs: undefined // Use server side default timeout strategy

};
var RETRY_ABORT_ERROR = new _abortController.AbortError("The operation was aborted.");
/**
 * Retry policy with exponential retry and linear retry implemented.
 */

var StorageRetryPolicy =
/** @class */
function (_super) {
  (0, _tslib.__extends)(StorageRetryPolicy, _super);
  /**
   * Creates an instance of RetryPolicy.
   *
   * @param nextPolicy -
   * @param options -
   * @param retryOptions -
   */

  function StorageRetryPolicy(nextPolicy, options, retryOptions) {
    if (retryOptions === void 0) {
      retryOptions = DEFAULT_RETRY_OPTIONS;
    }

    var _this = _super.call(this, nextPolicy, options) || this; // Initialize retry options


    _this.retryOptions = {
      retryPolicyType: retryOptions.retryPolicyType ? retryOptions.retryPolicyType : DEFAULT_RETRY_OPTIONS.retryPolicyType,
      maxTries: retryOptions.maxTries && retryOptions.maxTries >= 1 ? Math.floor(retryOptions.maxTries) : DEFAULT_RETRY_OPTIONS.maxTries,
      tryTimeoutInMs: retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0 ? retryOptions.tryTimeoutInMs : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,
      retryDelayInMs: retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0 ? Math.min(retryOptions.retryDelayInMs, retryOptions.maxRetryDelayInMs ? retryOptions.maxRetryDelayInMs : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs) : DEFAULT_RETRY_OPTIONS.retryDelayInMs,
      maxRetryDelayInMs: retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0 ? retryOptions.maxRetryDelayInMs : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs,
      secondaryHost: retryOptions.secondaryHost ? retryOptions.secondaryHost : DEFAULT_RETRY_OPTIONS.secondaryHost
    };
    return _this;
  }
  /**
   * Sends request.
   *
   * @param request -
   */


  StorageRetryPolicy.prototype.sendRequest = function (request) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      return (0, _tslib.__generator)(this, function (_a) {
        return [2
        /*return*/
        , this.attemptSendRequest(request, false, 1)];
      });
    });
  };
  /**
   * Decide and perform next retry. Won't mutate request parameter.
   *
   * @param request -
   * @param secondaryHas404 -  If attempt was against the secondary & it returned a StatusNotFound (404), then
   *                                   the resource was not found. This may be due to replication delay. So, in this
   *                                   case, we'll never try the secondary again for this operation.
   * @param attempt -           How many retries has been attempted to performed, starting from 1, which includes
   *                                   the attempt will be performed by this method call.
   */


  StorageRetryPolicy.prototype.attemptSendRequest = function (request, secondaryHas404, attempt) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var newRequest, isPrimaryRetry, response, err_1;
      return (0, _tslib.__generator)(this, function (_a) {
        switch (_a.label) {
          case 0:
            newRequest = request.clone();
            isPrimaryRetry = secondaryHas404 || !this.retryOptions.secondaryHost || !(request.method === "GET" || request.method === "HEAD" || request.method === "OPTIONS") || attempt % 2 === 1;

            if (!isPrimaryRetry) {
              newRequest.url = (0, _utils.setURLHost)(newRequest.url, this.retryOptions.secondaryHost);
            } // Set the server-side timeout query parameter "timeout=[seconds]"


            if (this.retryOptions.tryTimeoutInMs) {
              newRequest.url = (0, _utils.setURLParameter)(newRequest.url, _constants.URLConstants.Parameters.TIMEOUT, Math.floor(this.retryOptions.tryTimeoutInMs / 1000).toString());
            }

            _a.label = 1;

          case 1:
            _a.trys.push([1, 3,, 4]);

            _log.logger.info("RetryPolicy: =====> Try=" + attempt + " " + (isPrimaryRetry ? "Primary" : "Secondary"));

            return [4
            /*yield*/
            , this._nextPolicy.sendRequest(newRequest)];

          case 2:
            response = _a.sent();

            if (!this.shouldRetry(isPrimaryRetry, attempt, response)) {
              return [2
              /*return*/
              , response];
            }

            secondaryHas404 = secondaryHas404 || !isPrimaryRetry && response.status === 404;
            return [3
            /*break*/
            , 4];

          case 3:
            err_1 = _a.sent();

            _log.logger.error("RetryPolicy: Caught error, message: " + err_1.message + ", code: " + err_1.code);

            if (!this.shouldRetry(isPrimaryRetry, attempt, response, err_1)) {
              throw err_1;
            }

            return [3
            /*break*/
            , 4];

          case 4:
            return [4
            /*yield*/
            , this.delay(isPrimaryRetry, attempt, request.abortSignal)];

          case 5:
            _a.sent();

            return [4
            /*yield*/
            , this.attemptSendRequest(request, secondaryHas404, ++attempt)];

          case 6:
            return [2
            /*return*/
            , _a.sent()];
        }
      });
    });
  };
  /**
   * Decide whether to retry according to last HTTP response and retry counters.
   *
   * @param isPrimaryRetry -
   * @param attempt -
   * @param response -
   * @param err -
   */


  StorageRetryPolicy.prototype.shouldRetry = function (isPrimaryRetry, attempt, response, err) {
    if (attempt >= this.retryOptions.maxTries) {
      _log.logger.info("RetryPolicy: Attempt(s) " + attempt + " >= maxTries " + this.retryOptions.maxTries + ", no further try.");

      return false;
    } // Handle network failures, you may need to customize the list when you implement
    // your own http client


    var retriableErrors = ["ETIMEDOUT", "ESOCKETTIMEDOUT", "ECONNREFUSED", "ECONNRESET", "ENOENT", "ENOTFOUND", "TIMEOUT", "EPIPE", "REQUEST_SEND_ERROR" // For default xhr based http client provided in ms-rest-js
    ];

    if (err) {
      for (var _i = 0, retriableErrors_1 = retriableErrors; _i < retriableErrors_1.length; _i++) {
        var retriableError = retriableErrors_1[_i];

        if (err.name.toUpperCase().includes(retriableError) || err.message.toUpperCase().includes(retriableError) || err.code && err.code.toString().toUpperCase() === retriableError) {
          _log.logger.info("RetryPolicy: Network error " + retriableError + " found, will retry.");

          return true;
        }
      }
    } // If attempt was against the secondary & it returned a StatusNotFound (404), then
    // the resource was not found. This may be due to replication delay. So, in this
    // case, we'll never try the secondary again for this operation.


    if (response || err) {
      var statusCode = response ? response.status : err ? err.statusCode : 0;

      if (!isPrimaryRetry && statusCode === 404) {
        _log.logger.info("RetryPolicy: Secondary access with 404, will retry.");

        return true;
      } // Server internal error or server timeout


      if (statusCode === 503 || statusCode === 500) {
        _log.logger.info("RetryPolicy: Will retry for status code " + statusCode + ".");

        return true;
      }
    }

    if ((err === null || err === void 0 ? void 0 : err.code) === "PARSE_ERROR" && (err === null || err === void 0 ? void 0 : err.message.startsWith("Error \"Error: Unclosed root tag"))) {
      _log.logger.info("RetryPolicy: Incomplete XML response likely due to service timeout, will retry.");

      return true;
    }

    return false;
  };
  /**
   * Delay a calculated time between retries.
   *
   * @param isPrimaryRetry -
   * @param attempt -
   * @param abortSignal -
   */


  StorageRetryPolicy.prototype.delay = function (isPrimaryRetry, attempt, abortSignal) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var delayTimeInMs;
      return (0, _tslib.__generator)(this, function (_a) {
        delayTimeInMs = 0;

        if (isPrimaryRetry) {
          switch (this.retryOptions.retryPolicyType) {
            case StorageRetryPolicyType.EXPONENTIAL:
              delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * this.retryOptions.retryDelayInMs, this.retryOptions.maxRetryDelayInMs);
              break;

            case StorageRetryPolicyType.FIXED:
              delayTimeInMs = this.retryOptions.retryDelayInMs;
              break;
          }
        } else {
          delayTimeInMs = Math.random() * 1000;
        }

        _log.logger.info("RetryPolicy: Delay for " + delayTimeInMs + "ms");

        return [2
        /*return*/
        , (0, _utils.delay)(delayTimeInMs, abortSignal, RETRY_ABORT_ERROR)];
      });
    });
  };

  return StorageRetryPolicy;
}(_coreHttp.BaseRequestPolicy);

exports.StorageRetryPolicy = StorageRetryPolicy;
},{"tslib":"node_modules/tslib/tslib.es6.js","@azure/abort-controller":"node_modules/@azure/abort-controller/dist-esm/src/index.js","@azure/core-http":"node_modules/@azure/core-http/es/src/coreHttp.js","../utils/constants":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js","../utils/utils.common":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js","../log":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "StorageRetryPolicy", {
  enumerable: true,
  get: function () {
    return _StorageRetryPolicy.StorageRetryPolicy;
  }
});
Object.defineProperty(exports, "StorageRetryPolicyType", {
  enumerable: true,
  get: function () {
    return _StorageRetryPolicy.StorageRetryPolicyType;
  }
});
exports.StorageRetryPolicyFactory = void 0;

var _StorageRetryPolicy = require("./policies/StorageRetryPolicy");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * StorageRetryPolicyFactory is a factory class helping generating {@link StorageRetryPolicy} objects.
 */
var StorageRetryPolicyFactory =
/** @class */
function () {
  /**
   * Creates an instance of StorageRetryPolicyFactory.
   * @param retryOptions -
   */
  function StorageRetryPolicyFactory(retryOptions) {
    this.retryOptions = retryOptions;
  }
  /**
   * Creates a StorageRetryPolicy object.
   *
   * @param nextPolicy -
   * @param options -
   */


  StorageRetryPolicyFactory.prototype.create = function (nextPolicy, options) {
    return new _StorageRetryPolicy.StorageRetryPolicy(nextPolicy, options, this.retryOptions);
  };

  return StorageRetryPolicyFactory;
}();

exports.StorageRetryPolicyFactory = StorageRetryPolicyFactory;
},{"./policies/StorageRetryPolicy":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicy.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CredentialPolicy = void 0;

var _tslib = require("tslib");

var _coreHttp = require("@azure/core-http");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Credential policy used to sign HTTP(S) requests before sending. This is an
 * abstract class.
 */
var CredentialPolicy =
/** @class */
function (_super) {
  (0, _tslib.__extends)(CredentialPolicy, _super);

  function CredentialPolicy() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  /**
   * Sends out request.
   *
   * @param request -
   */


  CredentialPolicy.prototype.sendRequest = function (request) {
    return this._nextPolicy.sendRequest(this.signRequest(request));
  };
  /**
   * Child classes must implement this method with request signing. This method
   * will be executed in {@link sendRequest}.
   *
   * @param request -
   */


  CredentialPolicy.prototype.signRequest = function (request) {
    // Child classes must override this method with request signing. This method
    // will be executed in sendRequest().
    return request;
  };

  return CredentialPolicy;
}(_coreHttp.BaseRequestPolicy);

exports.CredentialPolicy = CredentialPolicy;
},{"tslib":"node_modules/tslib/tslib.es6.js","@azure/core-http":"node_modules/@azure/core-http/es/src/coreHttp.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnonymousCredentialPolicy = void 0;

var _tslib = require("tslib");

var _CredentialPolicy = require("./CredentialPolicy");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * AnonymousCredentialPolicy is used with HTTP(S) requests that read public resources
 * or for use with Shared Access Signatures (SAS).
 */
var AnonymousCredentialPolicy =
/** @class */
function (_super) {
  (0, _tslib.__extends)(AnonymousCredentialPolicy, _super);
  /**
   * Creates an instance of AnonymousCredentialPolicy.
   * @param nextPolicy -
   * @param options -
   */

  function AnonymousCredentialPolicy(nextPolicy, options) {
    return _super.call(this, nextPolicy, options) || this;
  }

  return AnonymousCredentialPolicy;
}(_CredentialPolicy.CredentialPolicy);

exports.AnonymousCredentialPolicy = AnonymousCredentialPolicy;
},{"tslib":"node_modules/tslib/tslib.es6.js","./CredentialPolicy":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Credential = void 0;

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Credential is an abstract class for Azure Storage HTTP requests signing. This
 * class will host an credentialPolicyCreator factory which generates CredentialPolicy.
 */
var Credential =
/** @class */
function () {
  function Credential() {}
  /**
   * Creates a RequestPolicy object.
   *
   * @param _nextPolicy -
   * @param _options -
   */


  Credential.prototype.create = function ( // tslint:disable-next-line:variable-name
  _nextPolicy, // tslint:disable-next-line:variable-name
  _options) {
    throw new Error("Method should be implemented in children classes.");
  };

  return Credential;
}();

exports.Credential = Credential;
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnonymousCredential = void 0;

var _tslib = require("tslib");

var _AnonymousCredentialPolicy = require("../policies/AnonymousCredentialPolicy");

var _Credential = require("./Credential");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * AnonymousCredential provides a credentialPolicyCreator member used to create
 * AnonymousCredentialPolicy objects. AnonymousCredentialPolicy is used with
 * HTTP(S) requests that read public resources or for use with Shared Access
 * Signatures (SAS).
 */
var AnonymousCredential =
/** @class */
function (_super) {
  (0, _tslib.__extends)(AnonymousCredential, _super);

  function AnonymousCredential() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  /**
   * Creates an {@link AnonymousCredentialPolicy} object.
   *
   * @param nextPolicy -
   * @param options -
   */


  AnonymousCredential.prototype.create = function (nextPolicy, options) {
    return new _AnonymousCredentialPolicy.AnonymousCredentialPolicy(nextPolicy, options);
  };

  return AnonymousCredential;
}(_Credential.Credential);

exports.AnonymousCredential = AnonymousCredential;
},{"tslib":"node_modules/tslib/tslib.es6.js","../policies/AnonymousCredentialPolicy":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js","./Credential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/TelemetryPolicy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TelemetryPolicy = void 0;

var _tslib = require("tslib");

var _coreHttp = require("@azure/core-http");

var _constants = require("../utils/constants");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * TelemetryPolicy is a policy used to tag user-agent header for every requests.
 */
var TelemetryPolicy =
/** @class */
function (_super) {
  (0, _tslib.__extends)(TelemetryPolicy, _super);
  /**
   * Creates an instance of TelemetryPolicy.
   * @param nextPolicy -
   * @param options -
   * @param telemetry -
   */

  function TelemetryPolicy(nextPolicy, options, telemetry) {
    var _this = _super.call(this, nextPolicy, options) || this;

    _this.telemetry = telemetry;
    return _this;
  }
  /**
   * Sends out request.
   *
   * @param request -
   */


  TelemetryPolicy.prototype.sendRequest = function (request) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      return (0, _tslib.__generator)(this, function (_a) {
        if (_coreHttp.isNode) {
          if (!request.headers) {
            request.headers = new _coreHttp.HttpHeaders();
          }

          if (!request.headers.get(_constants.HeaderConstants.USER_AGENT)) {
            request.headers.set(_constants.HeaderConstants.USER_AGENT, this.telemetry);
          }
        }

        return [2
        /*return*/
        , this._nextPolicy.sendRequest(request)];
      });
    });
  };

  return TelemetryPolicy;
}(_coreHttp.BaseRequestPolicy);

exports.TelemetryPolicy = TelemetryPolicy;
},{"tslib":"node_modules/tslib/tslib.es6.js","@azure/core-http":"node_modules/@azure/core-http/es/src/coreHttp.js","../utils/constants":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/TelemetryPolicyFactory.js":[function(require,module,exports) {
var process = require("process");
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TelemetryPolicyFactory = void 0;

var _coreHttp = require("@azure/core-http");

var os = _interopRequireWildcard(require("os"));

var _TelemetryPolicy = require("./policies/TelemetryPolicy");

var _constants = require("./utils/constants");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * TelemetryPolicyFactory is a factory class helping generating {@link TelemetryPolicy} objects.
 */
var TelemetryPolicyFactory =
/** @class */
function () {
  /**
   * Creates an instance of TelemetryPolicyFactory.
   * @param telemetry -
   */
  function TelemetryPolicyFactory(telemetry) {
    var userAgentInfo = [];

    if (_coreHttp.isNode) {
      if (telemetry) {
        var telemetryString = telemetry.userAgentPrefix || "";

        if (telemetryString.length > 0 && userAgentInfo.indexOf(telemetryString) === -1) {
          userAgentInfo.push(telemetryString);
        }
      } // e.g. azsdk-js-storageblob/10.0.0


      var libInfo = "azsdk-js-storageblob/" + _constants.SDK_VERSION;

      if (userAgentInfo.indexOf(libInfo) === -1) {
        userAgentInfo.push(libInfo);
      } // e.g. (NODE-VERSION 4.9.1; Windows_NT 10.0.16299)


      var runtimeInfo = "(NODE-VERSION " + process.version + "; " + os.type() + " " + os.release() + ")";

      if (userAgentInfo.indexOf(runtimeInfo) === -1) {
        userAgentInfo.push(runtimeInfo);
      }
    }

    this.telemetryString = userAgentInfo.join(" ");
  }
  /**
   * Creates a TelemetryPolicy object.
   *
   * @param nextPolicy -
   * @param options -
   */


  TelemetryPolicyFactory.prototype.create = function (nextPolicy, options) {
    return new _TelemetryPolicy.TelemetryPolicy(nextPolicy, options, this.telemetryString);
  };

  return TelemetryPolicyFactory;
}();

exports.TelemetryPolicyFactory = TelemetryPolicyFactory;
},{"@azure/core-http":"node_modules/@azure/core-http/es/src/coreHttp.js","os":"../../../AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/_empty.js","./policies/TelemetryPolicy":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/TelemetryPolicy.js","./utils/constants":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js","process":"../../../AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/_empty.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/cache.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCachedDefaultHttpClient = getCachedDefaultHttpClient;

var _coreHttp = require("@azure/core-http");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _defaultHttpClient = new _coreHttp.DefaultHttpClient();

function getCachedDefaultHttpClient() {
  return _defaultHttpClient;
}
},{"@azure/core-http":"node_modules/@azure/core-http/es/src/coreHttp.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.newPipeline = newPipeline;
Object.defineProperty(exports, "BaseRequestPolicy", {
  enumerable: true,
  get: function () {
    return _coreHttp.BaseRequestPolicy;
  }
});
Object.defineProperty(exports, "deserializationPolicy", {
  enumerable: true,
  get: function () {
    return _coreHttp.deserializationPolicy;
  }
});
Object.defineProperty(exports, "HttpHeaders", {
  enumerable: true,
  get: function () {
    return _coreHttp.HttpHeaders;
  }
});
Object.defineProperty(exports, "RequestPolicyOptions", {
  enumerable: true,
  get: function () {
    return _coreHttp.RequestPolicyOptions;
  }
});
Object.defineProperty(exports, "WebResource", {
  enumerable: true,
  get: function () {
    return _coreHttp.WebResource;
  }
});
Object.defineProperty(exports, "StorageOAuthScopes", {
  enumerable: true,
  get: function () {
    return _constants.StorageOAuthScopes;
  }
});
exports.Pipeline = void 0;

var _tslib = require("tslib");

var _coreHttp = require("@azure/core-http");

var _log = require("./log");

var _StorageBrowserPolicyFactory = require("./StorageBrowserPolicyFactory");

var _StorageRetryPolicyFactory = require("./StorageRetryPolicyFactory");

var _AnonymousCredential = require("./credentials/AnonymousCredential");

var _constants = require("./utils/constants");

var _TelemetryPolicyFactory = require("./TelemetryPolicyFactory");

var _cache = require("./utils/cache");

var _utils = require("./utils/utils.common");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// Export following interfaces and types for customers who want to implement their
// own RequestPolicy or HTTPClient

/**
 * A Pipeline class containing HTTP request policies.
 * You can create a default Pipeline by calling {@link newPipeline}.
 * Or you can create a Pipeline with your own policies by the constructor of Pipeline.
 *
 * Refer to {@link newPipeline} and provided policies before implementing your
 * customized Pipeline.
 */
var Pipeline =
/** @class */
function () {
  /**
   * Creates an instance of Pipeline. Customize HTTPClient by implementing IHttpClient interface.
   *
   * @param factories -
   * @param options -
   */
  function Pipeline(factories, options) {
    if (options === void 0) {
      options = {};
    }

    this.factories = factories; // when options.httpClient is not specified, passing in a DefaultHttpClient instance to
    // avoid each client creating its own http client.

    this.options = (0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
      httpClient: options.httpClient || (0, _cache.getCachedDefaultHttpClient)()
    });
  }
  /**
   * Transfer Pipeline object to ServiceClientOptions object which is required by
   * ServiceClient constructor.
   *
   * @returns The ServiceClientOptions object from this Pipeline.
   */


  Pipeline.prototype.toServiceClientOptions = function () {
    return {
      httpClient: this.options.httpClient,
      requestPolicyFactories: this.factories
    };
  };

  return Pipeline;
}();

exports.Pipeline = Pipeline;

/**
 * Creates a new Pipeline object with Credential provided.
 *
 * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.
 * @param pipelineOptions - Optional. Options.
 * @returns A new Pipeline object.
 */
function newPipeline(credential, pipelineOptions) {
  if (pipelineOptions === void 0) {
    pipelineOptions = {};
  }

  if (credential === undefined) {
    credential = new _AnonymousCredential.AnonymousCredential();
  } // Order is important. Closer to the API at the top & closer to the network at the bottom.
  // The credential's policy factory must appear close to the wire so it can sign any
  // changes made by other factories (like UniqueRequestIDPolicyFactory)


  var telemetryPolicy = new _TelemetryPolicyFactory.TelemetryPolicyFactory(pipelineOptions.userAgentOptions);
  var factories = [(0, _coreHttp.tracingPolicy)({
    userAgent: telemetryPolicy.telemetryString
  }), (0, _coreHttp.keepAlivePolicy)(pipelineOptions.keepAliveOptions), telemetryPolicy, (0, _coreHttp.generateClientRequestIdPolicy)(), new _StorageBrowserPolicyFactory.StorageBrowserPolicyFactory(), new _StorageRetryPolicyFactory.StorageRetryPolicyFactory(pipelineOptions.retryOptions), // Default deserializationPolicy is provided by protocol layer
  // Use customized XML char key of "#" so we could deserialize metadata
  // with "_" key
  (0, _coreHttp.deserializationPolicy)(undefined, {
    xmlCharKey: "#"
  }), (0, _coreHttp.logPolicy)({
    logger: _log.logger.info,
    allowedHeaderNames: _constants.StorageBlobLoggingAllowedHeaderNames,
    allowedQueryParameters: _constants.StorageBlobLoggingAllowedQueryParameters
  })];

  if (_coreHttp.isNode) {
    // policies only available in Node.js runtime, not in browsers
    factories.push((0, _coreHttp.proxyPolicy)(pipelineOptions.proxyOptions));
    factories.push((0, _coreHttp.disableResponseDecompressionPolicy)());
  }

  factories.push((0, _coreHttp.isTokenCredential)(credential) ? (0, _utils.attachCredential)((0, _coreHttp.bearerTokenAuthenticationPolicy)(credential, _constants.StorageOAuthScopes), credential) : credential);
  return new Pipeline(factories, pipelineOptions);
}
},{"tslib":"node_modules/tslib/tslib.es6.js","@azure/core-http":"node_modules/@azure/core-http/es/src/coreHttp.js","./log":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js","./StorageBrowserPolicyFactory":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js","./StorageRetryPolicyFactory":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js","./credentials/AnonymousCredential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js","./utils/constants":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js","./TelemetryPolicyFactory":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/TelemetryPolicyFactory.js","./utils/cache":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/cache.js","./utils/utils.common":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StorageSharedKeyCredential = void 0;

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var StorageSharedKeyCredential =
/** @class */
function () {
  function StorageSharedKeyCredential() {}

  return StorageSharedKeyCredential;
}();

exports.StorageSharedKeyCredential = StorageSharedKeyCredential;
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClientContext.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StorageClientContext = void 0;

var _tslib = require("tslib");

var coreHttp = _interopRequireWildcard(require("@azure/core-http"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var packageName = "azure-storage-blob";
var packageVersion = "12.5.0";

var StorageClientContext =
/** @class */
function (_super) {
  (0, _tslib.__extends)(StorageClientContext, _super);
  /**
   * Initializes a new instance of the StorageClientContext class.
   * @param url The URL of the service account, container, or blob that is the targe of the desired
   * operation.
   * @param [options] The parameter options
   */

  function StorageClientContext(url, options) {
    var _this = this;

    if (url == undefined) {
      throw new Error("'url' cannot be null.");
    }

    if (!options) {
      options = {};
    }

    if (!options.userAgent) {
      var defaultUserAgent = coreHttp.getDefaultUserAgentValue();
      options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
    }

    _this = _super.call(this, undefined, options) || this;
    _this.version = '2020-06-12';
    _this.baseUri = "{url}";
    _this.requestContentType = "application/json; charset=utf-8";
    _this.url = url;
    return _this;
  }

  return StorageClientContext;
}(coreHttp.ServiceClient);

exports.StorageClientContext = StorageClientContext;
},{"tslib":"node_modules/tslib/tslib.es6.js","@azure/core-http":"node_modules/@azure/core-http/es/src/coreHttp.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StorageClient = void 0;

var _storageClientContext = require("./generated/src/storageClientContext");

var _utils = require("./utils/utils.common");

var _AnonymousCredential = require("./credentials/AnonymousCredential");

var _StorageSharedKeyCredential = require("./credentials/StorageSharedKeyCredential");

var _coreHttp = require("@azure/core-http");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * A StorageClient represents a based URL class for {@link BlobServiceClient}, {@link ContainerClient}
 * and etc.
 */
var StorageClient =
/** @class */
function () {
  /**
   * Creates an instance of StorageClient.
   * @param url - url to resource
   * @param pipeline - request policy pipeline.
   */
  function StorageClient(url, pipeline) {
    // URL should be encoded and only once, protocol layer shouldn't encode URL again
    this.url = (0, _utils.escapeURLPath)(url);
    this.accountName = (0, _utils.getAccountNameFromUrl)(url);
    this.pipeline = pipeline;
    this.storageClientContext = new _storageClientContext.StorageClientContext(this.url, pipeline.toServiceClientOptions());
    this.isHttps = (0, _utils.iEqual)((0, _utils.getURLScheme)(this.url) || "", "https");
    this.credential = new _AnonymousCredential.AnonymousCredential();

    for (var _i = 0, _a = this.pipeline.factories; _i < _a.length; _i++) {
      var factory = _a[_i];

      if (_coreHttp.isNode && factory instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential || factory instanceof _AnonymousCredential.AnonymousCredential) {
        this.credential = factory;
      } else if ((0, _coreHttp.isTokenCredential)(factory.credential)) {
        // Only works if the factory has been attached a "credential" property.
        // We do that in newPipeline() when using TokenCredential.
        this.credential = factory.credential;
      }
    } // Override protocol layer's default content-type


    var storageClientContext = this.storageClientContext;
    storageClientContext.requestContentType = undefined;
  }

  return StorageClient;
}();

exports.StorageClient = StorageClient;
},{"./generated/src/storageClientContext":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClientContext.js","./utils/utils.common":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js","./credentials/AnonymousCredential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js","./credentials/StorageSharedKeyCredential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js","@azure/core-http":"node_modules/@azure/core-http/es/src/coreHttp.js"}],"node_modules/@azure/core-tracing/dist-esm/src/tracers/noop/noOpSpan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoOpSpan = void 0;

var _api = require("@opentelemetry/api");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * A no-op implementation of Span that can safely be used without side-effects.
 */
var NoOpSpan =
/** @class */
function () {
  function NoOpSpan() {}
  /**
   * Returns the SpanContext associated with this Span.
   */


  NoOpSpan.prototype.context = function () {
    return {
      spanId: "",
      traceId: "",
      traceFlags: _api.TraceFlags.NONE
    };
  };
  /**
   * Marks the end of Span execution.
   * @param _endTime - The time to use as the Span's end time. Defaults to
   * the current time.
   */


  NoOpSpan.prototype.end = function (_endTime) {
    /* Noop */
  };
  /**
   * Sets an attribute on the Span
   * @param _key - The attribute key
   * @param _value - The attribute value
   */


  NoOpSpan.prototype.setAttribute = function (_key, _value) {
    return this;
  };
  /**
   * Sets attributes on the Span
   * @param _attributes - The attributes to add
   */


  NoOpSpan.prototype.setAttributes = function (_attributes) {
    return this;
  };
  /**
   * Adds an event to the Span
   * @param _name - The name of the event
   * @param _attributes - The associated attributes to add for this event
   */


  NoOpSpan.prototype.addEvent = function (_name, _attributes) {
    return this;
  };
  /**
   * Sets a status on the span. Overrides the default of CanonicalCode.OK.
   * @param _status - The status to set.
   */


  NoOpSpan.prototype.setStatus = function (_status) {
    return this;
  };
  /**
   * Updates the name of the Span
   * @param _name - the new Span name
   */


  NoOpSpan.prototype.updateName = function (_name) {
    return this;
  };
  /**
   * Returns whether this span will be recorded
   */


  NoOpSpan.prototype.isRecording = function () {
    return false;
  };

  return NoOpSpan;
}();

exports.NoOpSpan = NoOpSpan;
},{"@opentelemetry/api":"node_modules/@opentelemetry/api/build/src/index.js"}],"node_modules/@azure/core-tracing/dist-esm/src/tracers/noop/noOpTracer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoOpTracer = void 0;

var _noOpSpan = require("./noOpSpan");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * A no-op implementation of Tracer that can be used when tracing
 * is disabled.
 */
var NoOpTracer =
/** @class */
function () {
  function NoOpTracer() {}
  /**
   * Starts a new Span.
   * @param _name - The name of the span.
   * @param _options - The SpanOptions used during Span creation.
   */


  NoOpTracer.prototype.startSpan = function (_name, _options) {
    return new _noOpSpan.NoOpSpan();
  };
  /**
   * Returns the current Span from the current context, if available.
   */


  NoOpTracer.prototype.getCurrentSpan = function () {
    return new _noOpSpan.NoOpSpan();
  };
  /**
   * Executes the given function within the context provided by a Span.
   * @param _span - The span that provides the context.
   * @param fn - The function to be executed.
   */


  NoOpTracer.prototype.withSpan = function (_span, fn) {
    return fn();
  };
  /**
   * Bind a Span as the target's scope
   * @param target - An object to bind the scope.
   * @param _span - A specific Span to use. Otherwise, use the current one.
   */


  NoOpTracer.prototype.bind = function (target, _span) {
    return target;
  };

  return NoOpTracer;
}();

exports.NoOpTracer = NoOpTracer;
},{"./noOpSpan":"node_modules/@azure/core-tracing/dist-esm/src/tracers/noop/noOpSpan.js"}],"node_modules/@azure/core-tracing/dist-esm/src/utils/global.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getGlobalObject = getGlobalObject;

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
function getGlobalObject() {
  return self;
}
},{}],"node_modules/@azure/core-tracing/dist-esm/src/utils/cache.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCache = getCache;

var _global = require("./global");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// V1 = OpenTelemetry 0.1
// V2 = OpenTelemetry 0.2
// V3 = OpenTelemetry 0.6.1
var GLOBAL_TRACER_VERSION = 3; // preview5 shipped with @azure/core-tracing.tracerCache
// and didn't have smart detection for collisions

var GLOBAL_TRACER_SYMBOL = Symbol.for("@azure/core-tracing.tracerCache2");
var cache;

function loadTracerCache() {
  var globalObj = (0, _global.getGlobalObject)();
  var existingCache = globalObj[GLOBAL_TRACER_SYMBOL];
  var setGlobalCache = true;

  if (existingCache) {
    if (existingCache.version === GLOBAL_TRACER_VERSION) {
      cache = existingCache;
    } else {
      setGlobalCache = false;

      if (existingCache.tracer) {
        throw new Error("Two incompatible versions of @azure/core-tracing have been loaded.\n          This library is " + GLOBAL_TRACER_VERSION + ", existing is " + existingCache.version + ".");
      }
    }
  }

  if (!cache) {
    cache = {
      tracer: undefined,
      version: GLOBAL_TRACER_VERSION
    };
  }

  if (setGlobalCache) {
    globalObj[GLOBAL_TRACER_SYMBOL] = cache;
  }
}

function getCache() {
  if (!cache) {
    loadTracerCache();
  }

  return cache;
}
},{"./global":"node_modules/@azure/core-tracing/dist-esm/src/utils/global.browser.js"}],"node_modules/@azure/core-tracing/dist-esm/src/tracerProxy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setTracer = setTracer;
exports.getTracer = getTracer;

var _noOpTracer = require("./tracers/noop/noOpTracer");

var _cache = require("./utils/cache");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var defaultTracer;

function getDefaultTracer() {
  if (!defaultTracer) {
    defaultTracer = new _noOpTracer.NoOpTracer();
  }

  return defaultTracer;
}
/**
 * Sets the global tracer, enabling tracing for the Azure SDK.
 * @param tracer - An OpenTelemetry Tracer instance.
 */


function setTracer(tracer) {
  var cache = (0, _cache.getCache)();
  cache.tracer = tracer;
}
/**
 * Retrieves the active tracer, or returns a
 * no-op implementation if one is not set.
 */


function getTracer() {
  var cache = (0, _cache.getCache)();

  if (!cache.tracer) {
    return getDefaultTracer();
  }

  return cache.tracer;
}
},{"./tracers/noop/noOpTracer":"node_modules/@azure/core-tracing/dist-esm/src/tracers/noop/noOpTracer.js","./utils/cache":"node_modules/@azure/core-tracing/dist-esm/src/utils/cache.js"}],"node_modules/@azure/core-tracing/dist-esm/src/tracers/opencensus/openCensusTraceStateWrapper.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OpenCensusTraceStateWrapper = void 0;

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * @internal
 */
var OpenCensusTraceStateWrapper =
/** @class */
function () {
  function OpenCensusTraceStateWrapper(state) {
    this._state = state;
  }

  OpenCensusTraceStateWrapper.prototype.get = function (_key) {
    throw new Error("Method not implemented.");
  };

  OpenCensusTraceStateWrapper.prototype.set = function (_key, _value) {
    throw new Error("Method not implemented.");
  };

  OpenCensusTraceStateWrapper.prototype.unset = function (_key) {
    throw new Error("Method not implemented");
  };

  OpenCensusTraceStateWrapper.prototype.serialize = function () {
    return this._state || "";
  };

  return OpenCensusTraceStateWrapper;
}();

exports.OpenCensusTraceStateWrapper = OpenCensusTraceStateWrapper;
},{}],"node_modules/@azure/core-tracing/dist-esm/src/tracers/opencensus/openCensusSpanWrapper.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OpenCensusSpanWrapper = void 0;

var _openCensusTraceStateWrapper = require("./openCensusTraceStateWrapper");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
function isWrappedSpan(span) {
  return !!span && span.getWrappedSpan !== undefined;
}

function isTracer(tracerOrSpan) {
  return tracerOrSpan.getWrappedTracer !== undefined;
}
/**
 * An implementation of OpenTelemetry Span that wraps an OpenCensus Span.
 */


var OpenCensusSpanWrapper =
/** @class */
function () {
  function OpenCensusSpanWrapper(tracerOrSpan, name, options) {
    if (name === void 0) {
      name = "";
    }

    if (options === void 0) {
      options = {};
    }

    if (isTracer(tracerOrSpan)) {
      var parent = isWrappedSpan(options.parent) ? options.parent.getWrappedSpan() : undefined;
      this._span = tracerOrSpan.getWrappedTracer().startChildSpan({
        name: name,
        childOf: parent
      });

      this._span.start();

      if (options.links) {
        for (var _i = 0, _a = options.links; _i < _a.length; _i++) {
          var link = _a[_i]; // Since there is no way to set the link relationship, leave it as Unspecified.

          this._span.addLink(link.context.traceId, link.context.spanId, 0
          /* LinkType.UNSPECIFIED */
          , link.attributes);
        }
      }
    } else {
      this._span = tracerOrSpan;
    }
  }
  /**
   * The underlying OpenCensus Span
   */


  OpenCensusSpanWrapper.prototype.getWrappedSpan = function () {
    return this._span;
  };
  /**
   * Marks the end of Span execution.
   * @param endTime - The time to use as the Span's end time. Defaults to
   * the current time.
   */


  OpenCensusSpanWrapper.prototype.end = function (_endTime) {
    this._span.end();
  };
  /**
   * Returns the SpanContext associated with this Span.
   */


  OpenCensusSpanWrapper.prototype.context = function () {
    var openCensusSpanContext = this._span.spanContext;
    return {
      spanId: openCensusSpanContext.spanId,
      traceId: openCensusSpanContext.traceId,
      traceFlags: openCensusSpanContext.options,
      traceState: new _openCensusTraceStateWrapper.OpenCensusTraceStateWrapper(openCensusSpanContext.traceState)
    };
  };
  /**
   * Sets an attribute on the Span
   * @param key - The attribute key
   * @param value - The attribute value
   */


  OpenCensusSpanWrapper.prototype.setAttribute = function (key, value) {
    this._span.addAttribute(key, value);

    return this;
  };
  /**
   * Sets attributes on the Span
   * @param attributes - The attributes to add
   */


  OpenCensusSpanWrapper.prototype.setAttributes = function (attributes) {
    this._span.attributes = attributes;
    return this;
  };
  /**
   * Adds an event to the Span
   * @param name - The name of the event
   * @param attributes - The associated attributes to add for this event
   */


  OpenCensusSpanWrapper.prototype.addEvent = function (_name, _attributes) {
    throw new Error("Method not implemented.");
  };
  /**
   * Sets a status on the span. Overrides the default of CanonicalCode.OK.
   * @param status - The status to set.
   */


  OpenCensusSpanWrapper.prototype.setStatus = function (status) {
    this._span.setStatus(status.code, status.message);

    return this;
  };
  /**
   * Updates the name of the Span
   * @param name - The new Span name
   */


  OpenCensusSpanWrapper.prototype.updateName = function (name) {
    this._span.name = name;
    return this;
  };
  /**
   * Returns whether this span will be recorded
   */


  OpenCensusSpanWrapper.prototype.isRecording = function () {
    // NoRecordSpans have an empty traceId
    return !!this._span.traceId;
  };

  return OpenCensusSpanWrapper;
}();

exports.OpenCensusSpanWrapper = OpenCensusSpanWrapper;
},{"./openCensusTraceStateWrapper":"node_modules/@azure/core-tracing/dist-esm/src/tracers/opencensus/openCensusTraceStateWrapper.js"}],"node_modules/@azure/core-tracing/dist-esm/src/tracers/opencensus/openCensusTracerWrapper.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OpenCensusTracerWrapper = void 0;

var _openCensusSpanWrapper = require("./openCensusSpanWrapper");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * An implementation of OpenTelemetry Tracer that wraps an OpenCensus Tracer.
 */
var OpenCensusTracerWrapper =
/** @class */
function () {
  /**
   * Create a new wrapper around a given OpenCensus Tracer.
   * @param tracer - The OpenCensus Tracer to wrap.
   */
  function OpenCensusTracerWrapper(tracer) {
    this._tracer = tracer;
  }
  /**
   * The wrapped OpenCensus Tracer
   */


  OpenCensusTracerWrapper.prototype.getWrappedTracer = function () {
    return this._tracer;
  };
  /**
   * Starts a new Span.
   * @param name - The name of the span.
   * @param options - The SpanOptions used during Span creation.
   */


  OpenCensusTracerWrapper.prototype.startSpan = function (name, options) {
    return new _openCensusSpanWrapper.OpenCensusSpanWrapper(this, name, options);
  };
  /**
   * Returns the current Span from the current context, if available.
   */


  OpenCensusTracerWrapper.prototype.getCurrentSpan = function () {
    return undefined;
  };
  /**
   * Executes the given function within the context provided by a Span.
   * @param _span - The span that provides the context.
   * @param _fn - The function to be executed.
   */


  OpenCensusTracerWrapper.prototype.withSpan = function (_span, _fn) {
    throw new Error("Method not implemented.");
  };
  /**
   * Bind a Span as the target's scope
   * @param target - An object to bind the scope.
   * @param _span - A specific Span to use. Otherwise, use the current one.
   */


  OpenCensusTracerWrapper.prototype.bind = function (_target, _span) {
    throw new Error("Method not implemented.");
  };

  return OpenCensusTracerWrapper;
}();

exports.OpenCensusTracerWrapper = OpenCensusTracerWrapper;
},{"./openCensusSpanWrapper":"node_modules/@azure/core-tracing/dist-esm/src/tracers/opencensus/openCensusSpanWrapper.js"}],"node_modules/@azure/core-tracing/dist-esm/src/tracers/test/testSpan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TestSpan = void 0;

var _tslib = require("tslib");

var _api = require("@opentelemetry/api");

var _noOpSpan = require("../noop/noOpSpan");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * A mock span useful for testing.
 */
var TestSpan =
/** @class */
function (_super) {
  (0, _tslib.__extends)(TestSpan, _super);
  /**
   * Starts a new Span.
   * @param parentTracer-  The tracer that created this Span
   * @param name - The name of the span.
   * @param context - The SpanContext this span belongs to
   * @param kind - The SpanKind of this Span
   * @param parentSpanId - The identifier of the parent Span
   * @param startTime - The startTime of the event (defaults to now)
   */

  function TestSpan(parentTracer, name, context, kind, parentSpanId, startTime) {
    if (startTime === void 0) {
      startTime = Date.now();
    }

    var _this = _super.call(this) || this;

    _this._tracer = parentTracer;
    _this.name = name;
    _this.kind = kind;
    _this.startTime = startTime;
    _this.parentSpanId = parentSpanId;
    _this.status = {
      code: _api.CanonicalCode.OK
    };
    _this.endCalled = false;
    _this._context = context;
    _this.attributes = {};
    return _this;
  }
  /**
   * Returns the Tracer that created this Span
   */


  TestSpan.prototype.tracer = function () {
    return this._tracer;
  };
  /**
   * Returns the SpanContext associated with this Span.
   */


  TestSpan.prototype.context = function () {
    return this._context;
  };
  /**
   * Marks the end of Span execution.
   * @param _endTime - The time to use as the Span's end time. Defaults to
   * the current time.
   */


  TestSpan.prototype.end = function (_endTime) {
    this.endCalled = true;
  };
  /**
   * Sets a status on the span. Overrides the default of CanonicalCode.OK.
   * @param status - The status to set.
   */


  TestSpan.prototype.setStatus = function (status) {
    this.status = status;
    return this;
  };
  /**
   * Returns whether this span will be recorded
   */


  TestSpan.prototype.isRecording = function () {
    return true;
  };
  /**
   * Sets an attribute on the Span
   * @param key - The attribute key
   * @param value - The attribute value
   */


  TestSpan.prototype.setAttribute = function (key, value) {
    this.attributes[key] = value;
    return this;
  };
  /**
   * Sets attributes on the Span
   * @param attributes - The attributes to add
   */


  TestSpan.prototype.setAttributes = function (attributes) {
    for (var _i = 0, _a = Object.keys(attributes); _i < _a.length; _i++) {
      var key = _a[_i];
      this.attributes[key] = attributes[key];
    }

    return this;
  };

  return TestSpan;
}(_noOpSpan.NoOpSpan);

exports.TestSpan = TestSpan;
},{"tslib":"node_modules/tslib/tslib.es6.js","@opentelemetry/api":"node_modules/@opentelemetry/api/build/src/index.js","../noop/noOpSpan":"node_modules/@azure/core-tracing/dist-esm/src/tracers/noop/noOpSpan.js"}],"node_modules/@azure/core-tracing/dist-esm/src/tracers/test/testTracer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TestTracer = void 0;

var _tslib = require("tslib");

var _testSpan = require("./testSpan");

var _noOpTracer = require("../noop/noOpTracer");

var _api = require("@opentelemetry/api");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * A mock tracer useful for testing
 */
var TestTracer =
/** @class */
function (_super) {
  (0, _tslib.__extends)(TestTracer, _super);

  function TestTracer() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.traceIdCounter = 0;
    _this.spanIdCounter = 0;
    _this.rootSpans = [];
    _this.knownSpans = [];
    return _this;
  }

  TestTracer.prototype.getNextTraceId = function () {
    this.traceIdCounter++;
    return String(this.traceIdCounter);
  };

  TestTracer.prototype.getNextSpanId = function () {
    this.spanIdCounter++;
    return String(this.spanIdCounter);
  };
  /**
   * Returns all Spans that were created without a parent
   */


  TestTracer.prototype.getRootSpans = function () {
    return this.rootSpans;
  };
  /**
   * Returns all Spans this Tracer knows about
   */


  TestTracer.prototype.getKnownSpans = function () {
    return this.knownSpans;
  };
  /**
   * Returns all Spans where end() has not been called
   */


  TestTracer.prototype.getActiveSpans = function () {
    return this.knownSpans.filter(function (span) {
      return !span.endCalled;
    });
  };
  /**
   * Return all Spans for a particular trace, grouped by their
   * parent Span in a tree-like structure
   * @param traceId - The traceId to return the graph for
   */


  TestTracer.prototype.getSpanGraph = function (traceId) {
    var traceSpans = this.knownSpans.filter(function (span) {
      return span.context().traceId === traceId;
    });
    var roots = [];
    var nodeMap = new Map();

    for (var _i = 0, traceSpans_1 = traceSpans; _i < traceSpans_1.length; _i++) {
      var span = traceSpans_1[_i];
      var spanId = span.context().spanId;
      var node = {
        name: span.name,
        children: []
      };
      nodeMap.set(spanId, node);

      if (span.parentSpanId) {
        var parent = nodeMap.get(span.parentSpanId);

        if (!parent) {
          throw new Error("Span with name " + node.name + " has an unknown parentSpan with id " + span.parentSpanId);
        }

        parent.children.push(node);
      } else {
        roots.push(node);
      }
    }

    return {
      roots: roots
    };
  };
  /**
   * Starts a new Span.
   * @param name - The name of the span.
   * @param options - The SpanOptions used during Span creation.
   */


  TestTracer.prototype.startSpan = function (name, options) {
    if (options === void 0) {
      options = {};
    }

    var parentContext = this._getParentContext(options);

    var traceId;
    var isRootSpan = false;

    if (parentContext && parentContext.traceId) {
      traceId = parentContext.traceId;
    } else {
      traceId = this.getNextTraceId();
      isRootSpan = true;
    }

    var context = {
      traceId: traceId,
      spanId: this.getNextSpanId(),
      traceFlags: _api.TraceFlags.NONE
    };
    var span = new _testSpan.TestSpan(this, name, context, options.kind || _api.SpanKind.INTERNAL, parentContext ? parentContext.spanId : undefined, options.startTime);
    this.knownSpans.push(span);

    if (isRootSpan) {
      this.rootSpans.push(span);
    }

    return span;
  };

  TestTracer.prototype._getParentContext = function (options) {
    var parent = options.parent;
    var result;

    if (parent) {
      if ("traceId" in parent) {
        result = parent;
      } else {
        result = parent.context();
      }
    }

    return result;
  };

  return TestTracer;
}(_noOpTracer.NoOpTracer);

exports.TestTracer = TestTracer;
},{"tslib":"node_modules/tslib/tslib.es6.js","./testSpan":"node_modules/@azure/core-tracing/dist-esm/src/tracers/test/testSpan.js","../noop/noOpTracer":"node_modules/@azure/core-tracing/dist-esm/src/tracers/noop/noOpTracer.js","@opentelemetry/api":"node_modules/@opentelemetry/api/build/src/index.js"}],"node_modules/@azure/core-tracing/dist-esm/src/createSpan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSpanFunction = createSpanFunction;

var _tslib = require("tslib");

var _api = require("@opentelemetry/api");

var _tracerProxy = require("../src/tracerProxy");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Creates a function that can be used to create spans using the global tracer.
 *
 * Usage:
 *
 * ```typescript
 * // once
 * const createSpan = createSpanFunction({ packagePrefix: "Azure.Data.AppConfiguration", namespace: "Microsoft.AppConfiguration" });
 *
 * // in each operation
 * const span = createSpan("deleteConfigurationSetting", operationOptions);
 *    // code...
 * span.end();
 * ```
 *
 * @hidden
 * @param args - allows configuration of the prefix for each span as well as the az.namespace field.
 */
function createSpanFunction(args) {
  return function (operationName, operationOptions) {
    var tracer = (0, _tracerProxy.getTracer)();
    var tracingOptions = (operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions) || {};
    var spanOptions = (0, _tslib.__assign)({
      kind: _api.SpanKind.INTERNAL
    }, tracingOptions.spanOptions);
    var spanName = args.packagePrefix ? args.packagePrefix + "." + operationName : operationName;
    var span = tracer.startSpan(spanName, spanOptions);

    if (args.namespace) {
      span.setAttribute("az.namespace", args.namespace);
    }

    var newSpanOptions = tracingOptions.spanOptions || {};

    if (span.isRecording() && args.namespace) {
      newSpanOptions = (0, _tslib.__assign)((0, _tslib.__assign)({}, tracingOptions.spanOptions), {
        parent: span.context(),
        attributes: (0, _tslib.__assign)((0, _tslib.__assign)({}, spanOptions.attributes), {
          "az.namespace": args.namespace
        })
      });
    }

    var newTracingOptions = (0, _tslib.__assign)((0, _tslib.__assign)({}, tracingOptions), {
      spanOptions: newSpanOptions
    });
    var newOperationOptions = (0, _tslib.__assign)((0, _tslib.__assign)({}, operationOptions), {
      tracingOptions: newTracingOptions
    });
    return {
      span: span,
      updatedOptions: newOperationOptions
    };
  };
}
},{"tslib":"node_modules/tslib/tslib.es6.js","@opentelemetry/api":"node_modules/@opentelemetry/api/build/src/index.js","../src/tracerProxy":"node_modules/@azure/core-tracing/dist-esm/src/tracerProxy.js"}],"node_modules/@azure/core-tracing/dist-esm/src/utils/traceParentHeader.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractSpanContextFromTraceParentHeader = extractSpanContextFromTraceParentHeader;
exports.getTraceParentHeader = getTraceParentHeader;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var VERSION = "00";
/**
 * Generates a `SpanContext` given a `traceparent` header value.
 * @param traceParent - Serialized span context data as a `traceparent` header value.
 * @returns The `SpanContext` generated from the `traceparent` value.
 */

function extractSpanContextFromTraceParentHeader(traceParentHeader) {
  var parts = traceParentHeader.split("-");

  if (parts.length !== 4) {
    return;
  }

  var version = parts[0],
      traceId = parts[1],
      spanId = parts[2],
      traceOptions = parts[3];

  if (version !== VERSION) {
    return;
  }

  var traceFlags = parseInt(traceOptions, 16);
  var spanContext = {
    spanId: spanId,
    traceId: traceId,
    traceFlags: traceFlags
  };
  return spanContext;
}
/**
 * Generates a `traceparent` value given a span context.
 * @param spanContext - Contains context for a specific span.
 * @returns The `spanContext` represented as a `traceparent` value.
 */


function getTraceParentHeader(spanContext) {
  var missingFields = [];

  if (!spanContext.traceId) {
    missingFields.push("traceId");
  }

  if (!spanContext.spanId) {
    missingFields.push("spanId");
  }

  if (missingFields.length) {
    return;
  }

  var flags = spanContext.traceFlags || 0
  /* NONE */
  ;
  var hexFlags = flags.toString(16);
  var traceFlags = hexFlags.length === 1 ? "0" + hexFlags : hexFlags; // https://www.w3.org/TR/trace-context/#traceparent-header-field-values

  return VERSION + "-" + spanContext.traceId + "-" + spanContext.spanId + "-" + traceFlags;
}
},{}],"node_modules/@azure/core-tracing/dist-esm/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "getTracer", {
  enumerable: true,
  get: function () {
    return _tracerProxy.getTracer;
  }
});
Object.defineProperty(exports, "setTracer", {
  enumerable: true,
  get: function () {
    return _tracerProxy.setTracer;
  }
});
Object.defineProperty(exports, "NoOpSpan", {
  enumerable: true,
  get: function () {
    return _noOpSpan.NoOpSpan;
  }
});
Object.defineProperty(exports, "NoOpTracer", {
  enumerable: true,
  get: function () {
    return _noOpTracer.NoOpTracer;
  }
});
Object.defineProperty(exports, "OpenCensusSpanWrapper", {
  enumerable: true,
  get: function () {
    return _openCensusSpanWrapper.OpenCensusSpanWrapper;
  }
});
Object.defineProperty(exports, "OpenCensusTracerWrapper", {
  enumerable: true,
  get: function () {
    return _openCensusTracerWrapper.OpenCensusTracerWrapper;
  }
});
Object.defineProperty(exports, "TestTracer", {
  enumerable: true,
  get: function () {
    return _testTracer.TestTracer;
  }
});
Object.defineProperty(exports, "TestSpan", {
  enumerable: true,
  get: function () {
    return _testSpan.TestSpan;
  }
});
Object.defineProperty(exports, "createSpanFunction", {
  enumerable: true,
  get: function () {
    return _createSpan.createSpanFunction;
  }
});
Object.defineProperty(exports, "extractSpanContextFromTraceParentHeader", {
  enumerable: true,
  get: function () {
    return _traceParentHeader.extractSpanContextFromTraceParentHeader;
  }
});
Object.defineProperty(exports, "getTraceParentHeader", {
  enumerable: true,
  get: function () {
    return _traceParentHeader.getTraceParentHeader;
  }
});

var _tracerProxy = require("./tracerProxy");

var _noOpSpan = require("./tracers/noop/noOpSpan");

var _noOpTracer = require("./tracers/noop/noOpTracer");

var _openCensusSpanWrapper = require("./tracers/opencensus/openCensusSpanWrapper");

var _openCensusTracerWrapper = require("./tracers/opencensus/openCensusTracerWrapper");

var _testTracer = require("./tracers/test/testTracer");

var _testSpan = require("./tracers/test/testSpan");

var _createSpan = require("./createSpan");

var _traceParentHeader = require("./utils/traceParentHeader");
},{"./tracerProxy":"node_modules/@azure/core-tracing/dist-esm/src/tracerProxy.js","./tracers/noop/noOpSpan":"node_modules/@azure/core-tracing/dist-esm/src/tracers/noop/noOpSpan.js","./tracers/noop/noOpTracer":"node_modules/@azure/core-tracing/dist-esm/src/tracers/noop/noOpTracer.js","./tracers/opencensus/openCensusSpanWrapper":"node_modules/@azure/core-tracing/dist-esm/src/tracers/opencensus/openCensusSpanWrapper.js","./tracers/opencensus/openCensusTracerWrapper":"node_modules/@azure/core-tracing/dist-esm/src/tracers/opencensus/openCensusTracerWrapper.js","./tracers/test/testTracer":"node_modules/@azure/core-tracing/dist-esm/src/tracers/test/testTracer.js","./tracers/test/testSpan":"node_modules/@azure/core-tracing/dist-esm/src/tracers/test/testSpan.js","./createSpan":"node_modules/@azure/core-tracing/dist-esm/src/createSpan.js","./utils/traceParentHeader":"node_modules/@azure/core-tracing/dist-esm/src/utils/traceParentHeader.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertTracingToRequestOptionsBase = convertTracingToRequestOptionsBase;
exports.createSpan = void 0;

var _coreTracing = require("@azure/core-tracing");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Creates a span using the global tracer.
 * @internal
 */
var createSpan = (0, _coreTracing.createSpanFunction)({
  packagePrefix: "Azure.Storage.Blob",
  namespace: "Microsoft.Storage"
});
/**
 * @internal
 *
 * Adapt the tracing options from OperationOptions to what they need to be for
 * RequestOptionsBase (when we update to later OpenTelemetry versions this is now
 * two separate fields, not just one).
 */

exports.createSpan = createSpan;

function convertTracingToRequestOptionsBase(options) {
  var _a;

  return {
    spanOptions: (_a = options === null || options === void 0 ? void 0 : options.tracingOptions) === null || _a === void 0 ? void 0 : _a.spanOptions
  };
}
},{"@azure/core-tracing":"node_modules/@azure/core-tracing/dist-esm/src/index.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASPermissions.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlobSASPermissions = void 0;

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 *
 * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a blob. Setting
 * a value to true means that any SAS which uses these permissions will grant permissions for that operation. Once all
 * the values are set, this should be serialized with toString and set as the permissions field on a
 * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but
 * the order of the permissions is particular and this class guarantees correctness.
 */
var BlobSASPermissions =
/** @class */
function () {
  function BlobSASPermissions() {
    /**
     * Specifies Read access granted.
     */
    this.read = false;
    /**
     * Specifies Add access granted.
     */

    this.add = false;
    /**
     * Specifies Create access granted.
     */

    this.create = false;
    /**
     * Specifies Write access granted.
     */

    this.write = false;
    /**
     * Specifies Delete access granted.
     */

    this.delete = false;
    /**
     * Specifies Delete version access granted.
     */

    this.deleteVersion = false;
    /**
     * Specfies Tag access granted.
     */

    this.tag = false;
    /**
     * Specifies Move access granted.
     */

    this.move = false;
    /**
     * Specifies Execute access granted.
     */

    this.execute = false;
  }
  /**
   * Creates a {@link BlobSASPermissions} from the specified permissions string. This method will throw an
   * Error if it encounters a character that does not correspond to a valid permission.
   *
   * @param permissions -
   */


  BlobSASPermissions.parse = function (permissions) {
    var blobSASPermissions = new BlobSASPermissions();

    for (var _i = 0, permissions_1 = permissions; _i < permissions_1.length; _i++) {
      var char = permissions_1[_i];

      switch (char) {
        case "r":
          blobSASPermissions.read = true;
          break;

        case "a":
          blobSASPermissions.add = true;
          break;

        case "c":
          blobSASPermissions.create = true;
          break;

        case "w":
          blobSASPermissions.write = true;
          break;

        case "d":
          blobSASPermissions.delete = true;
          break;

        case "x":
          blobSASPermissions.deleteVersion = true;
          break;

        case "t":
          blobSASPermissions.tag = true;
          break;

        case "m":
          blobSASPermissions.move = true;
          break;

        case "e":
          blobSASPermissions.execute = true;
          break;

        default:
          throw new RangeError("Invalid permission: " + char);
      }
    }

    return blobSASPermissions;
  };
  /**
   * Creates a {@link BlobSASPermissions} from a raw object which contains same keys as it
   * and boolean values for them.
   *
   * @param permissionLike -
   */


  BlobSASPermissions.from = function (permissionLike) {
    var blobSASPermissions = new BlobSASPermissions();

    if (permissionLike.read) {
      blobSASPermissions.read = true;
    }

    if (permissionLike.add) {
      blobSASPermissions.add = true;
    }

    if (permissionLike.create) {
      blobSASPermissions.create = true;
    }

    if (permissionLike.write) {
      blobSASPermissions.write = true;
    }

    if (permissionLike.delete) {
      blobSASPermissions.delete = true;
    }

    if (permissionLike.deleteVersion) {
      blobSASPermissions.deleteVersion = true;
    }

    if (permissionLike.tag) {
      blobSASPermissions.tag = true;
    }

    if (permissionLike.move) {
      blobSASPermissions.move = true;
    }

    if (permissionLike.execute) {
      blobSASPermissions.execute = true;
    }

    return blobSASPermissions;
  };
  /**
   * Converts the given permissions to a string. Using this method will guarantee the permissions are in an
   * order accepted by the service.
   *
   * @returns A string which represents the BlobSASPermissions
   */


  BlobSASPermissions.prototype.toString = function () {
    var permissions = [];

    if (this.read) {
      permissions.push("r");
    }

    if (this.add) {
      permissions.push("a");
    }

    if (this.create) {
      permissions.push("c");
    }

    if (this.write) {
      permissions.push("w");
    }

    if (this.delete) {
      permissions.push("d");
    }

    if (this.deleteVersion) {
      permissions.push("x");
    }

    if (this.tag) {
      permissions.push("t");
    }

    if (this.move) {
      permissions.push("m");
    }

    if (this.execute) {
      permissions.push("e");
    }

    return permissions.join("");
  };

  return BlobSASPermissions;
}();

exports.BlobSASPermissions = BlobSASPermissions;
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/ContainerSASPermissions.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContainerSASPermissions = void 0;

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a container.
 * Setting a value to true means that any SAS which uses these permissions will grant permissions for that operation.
 * Once all the values are set, this should be serialized with toString and set as the permissions field on a
 * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but
 * the order of the permissions is particular and this class guarantees correctness.
 */
var ContainerSASPermissions =
/** @class */
function () {
  function ContainerSASPermissions() {
    /**
     * Specifies Read access granted.
     */
    this.read = false;
    /**
     * Specifies Add access granted.
     */

    this.add = false;
    /**
     * Specifies Create access granted.
     */

    this.create = false;
    /**
     * Specifies Write access granted.
     */

    this.write = false;
    /**
     * Specifies Delete access granted.
     */

    this.delete = false;
    /**
     * Specifies Delete version access granted.
     */

    this.deleteVersion = false;
    /**
     * Specifies List access granted.
     */

    this.list = false;
    /**
     * Specfies Tag access granted.
     */

    this.tag = false;
    /**
     * Specifies Move access granted.
     */

    this.move = false;
    /**
     * Specifies Execute access granted.
     */

    this.execute = false;
  }
  /**
   * Creates an {@link ContainerSASPermissions} from the specified permissions string. This method will throw an
   * Error if it encounters a character that does not correspond to a valid permission.
   *
   * @param permissions -
   */


  ContainerSASPermissions.parse = function (permissions) {
    var containerSASPermissions = new ContainerSASPermissions();

    for (var _i = 0, permissions_1 = permissions; _i < permissions_1.length; _i++) {
      var char = permissions_1[_i];

      switch (char) {
        case "r":
          containerSASPermissions.read = true;
          break;

        case "a":
          containerSASPermissions.add = true;
          break;

        case "c":
          containerSASPermissions.create = true;
          break;

        case "w":
          containerSASPermissions.write = true;
          break;

        case "d":
          containerSASPermissions.delete = true;
          break;

        case "l":
          containerSASPermissions.list = true;
          break;

        case "t":
          containerSASPermissions.tag = true;
          break;

        case "x":
          containerSASPermissions.deleteVersion = true;
          break;

        case "m":
          containerSASPermissions.move = true;
          break;

        case "e":
          containerSASPermissions.execute = true;
          break;

        default:
          throw new RangeError("Invalid permission " + char);
      }
    }

    return containerSASPermissions;
  };
  /**
   * Creates a {@link ContainerSASPermissions} from a raw object which contains same keys as it
   * and boolean values for them.
   *
   * @param permissionLike -
   */


  ContainerSASPermissions.from = function (permissionLike) {
    var containerSASPermissions = new ContainerSASPermissions();

    if (permissionLike.read) {
      containerSASPermissions.read = true;
    }

    if (permissionLike.add) {
      containerSASPermissions.add = true;
    }

    if (permissionLike.create) {
      containerSASPermissions.create = true;
    }

    if (permissionLike.write) {
      containerSASPermissions.write = true;
    }

    if (permissionLike.delete) {
      containerSASPermissions.delete = true;
    }

    if (permissionLike.list) {
      containerSASPermissions.list = true;
    }

    if (permissionLike.deleteVersion) {
      containerSASPermissions.deleteVersion = true;
    }

    if (permissionLike.tag) {
      containerSASPermissions.tag = true;
    }

    if (permissionLike.move) {
      containerSASPermissions.move = true;
    }

    if (permissionLike.execute) {
      containerSASPermissions.execute = true;
    }

    return containerSASPermissions;
  };
  /**
   * Converts the given permissions to a string. Using this method will guarantee the permissions are in an
   * order accepted by the service.
   *
   * The order of the characters should be as specified here to ensure correctness.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
   *
   */


  ContainerSASPermissions.prototype.toString = function () {
    var permissions = [];

    if (this.read) {
      permissions.push("r");
    }

    if (this.add) {
      permissions.push("a");
    }

    if (this.create) {
      permissions.push("c");
    }

    if (this.write) {
      permissions.push("w");
    }

    if (this.delete) {
      permissions.push("d");
    }

    if (this.deleteVersion) {
      permissions.push("x");
    }

    if (this.list) {
      permissions.push("l");
    }

    if (this.tag) {
      permissions.push("t");
    }

    if (this.move) {
      permissions.push("m");
    }

    if (this.execute) {
      permissions.push("e");
    }

    return permissions.join("");
  };

  return ContainerSASPermissions;
}();

exports.ContainerSASPermissions = ContainerSASPermissions;
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/UserDelegationKeyCredential.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UserDelegationKeyCredential = void 0;

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var UserDelegationKeyCredential =
/** @class */
function () {
  function UserDelegationKeyCredential() {}

  return UserDelegationKeyCredential;
}();

exports.UserDelegationKeyCredential = UserDelegationKeyCredential;
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ipRangeToString = ipRangeToString;

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Generate SasIPRange format string. For example:
 *
 * "8.8.8.8" or "1.1.1.1-255.255.255.255"
 *
 * @param ipRange -
 */
function ipRangeToString(ipRange) {
  return ipRange.end ? ipRange.start + "-" + ipRange.end : ipRange.start;
}
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SASQueryParameters = exports.SASProtocol = void 0;

var _SasIPRange = require("./SasIPRange");

var _utils = require("../utils/utils.common");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Protocols for generated SAS.
 */
var SASProtocol;
exports.SASProtocol = SASProtocol;

(function (SASProtocol) {
  /**
   * Protocol that allows HTTPS only
   */
  SASProtocol["Https"] = "https";
  /**
   * Protocol that allows both HTTPS and HTTP
   */

  SASProtocol["HttpsAndHttp"] = "https,http";
})(SASProtocol || (exports.SASProtocol = SASProtocol = {}));
/**
 * Represents the components that make up an Azure Storage SAS' query parameters. This type is not constructed directly
 * by the user; it is only generated by the {@link AccountSASSignatureValues} and {@link BlobSASSignatureValues}
 * types. Once generated, it can be encoded into a {@code String} and appended to a URL directly (though caution should
 * be taken here in case there are existing query parameters, which might affect the appropriate means of appending
 * these query parameters).
 *
 * NOTE: Instances of this class are immutable.
 */


var SASQueryParameters =
/** @class */
function () {
  function SASQueryParameters(version, signature, permissionsOrOptions, services, resourceTypes, protocol, startsOn, expiresOn, ipRange, identifier, resource, cacheControl, contentDisposition, contentEncoding, contentLanguage, contentType, userDelegationKey, preauthorizedAgentObjectId, correlationId) {
    this.version = version;
    this.signature = signature;

    if (permissionsOrOptions !== undefined && typeof permissionsOrOptions !== "string") {
      // SASQueryParametersOptions
      this.permissions = permissionsOrOptions.permissions;
      this.services = permissionsOrOptions.services;
      this.resourceTypes = permissionsOrOptions.resourceTypes;
      this.protocol = permissionsOrOptions.protocol;
      this.startsOn = permissionsOrOptions.startsOn;
      this.expiresOn = permissionsOrOptions.expiresOn;
      this.ipRangeInner = permissionsOrOptions.ipRange;
      this.identifier = permissionsOrOptions.identifier;
      this.resource = permissionsOrOptions.resource;
      this.cacheControl = permissionsOrOptions.cacheControl;
      this.contentDisposition = permissionsOrOptions.contentDisposition;
      this.contentEncoding = permissionsOrOptions.contentEncoding;
      this.contentLanguage = permissionsOrOptions.contentLanguage;
      this.contentType = permissionsOrOptions.contentType;

      if (permissionsOrOptions.userDelegationKey) {
        this.signedOid = permissionsOrOptions.userDelegationKey.signedObjectId;
        this.signedTenantId = permissionsOrOptions.userDelegationKey.signedTenantId;
        this.signedStartsOn = permissionsOrOptions.userDelegationKey.signedStartsOn;
        this.signedExpiresOn = permissionsOrOptions.userDelegationKey.signedExpiresOn;
        this.signedService = permissionsOrOptions.userDelegationKey.signedService;
        this.signedVersion = permissionsOrOptions.userDelegationKey.signedVersion;
        this.preauthorizedAgentObjectId = permissionsOrOptions.preauthorizedAgentObjectId;
        this.correlationId = permissionsOrOptions.correlationId;
      }
    } else {
      this.services = services;
      this.resourceTypes = resourceTypes;
      this.expiresOn = expiresOn;
      this.permissions = permissionsOrOptions;
      this.protocol = protocol;
      this.startsOn = startsOn;
      this.ipRangeInner = ipRange;
      this.identifier = identifier;
      this.resource = resource;
      this.cacheControl = cacheControl;
      this.contentDisposition = contentDisposition;
      this.contentEncoding = contentEncoding;
      this.contentLanguage = contentLanguage;
      this.contentType = contentType;

      if (userDelegationKey) {
        this.signedOid = userDelegationKey.signedObjectId;
        this.signedTenantId = userDelegationKey.signedTenantId;
        this.signedStartsOn = userDelegationKey.signedStartsOn;
        this.signedExpiresOn = userDelegationKey.signedExpiresOn;
        this.signedService = userDelegationKey.signedService;
        this.signedVersion = userDelegationKey.signedVersion;
        this.preauthorizedAgentObjectId = preauthorizedAgentObjectId;
        this.correlationId = correlationId;
      }
    }
  }

  Object.defineProperty(SASQueryParameters.prototype, "ipRange", {
    /**
     * Optional. IP range allowed for this SAS.
     *
     * @readonly
     */
    get: function () {
      if (this.ipRangeInner) {
        return {
          end: this.ipRangeInner.end,
          start: this.ipRangeInner.start
        };
      }

      return undefined;
    },
    enumerable: false,
    configurable: true
  });
  /**
   * Encodes all SAS query parameters into a string that can be appended to a URL.
   *
   */

  SASQueryParameters.prototype.toString = function () {
    var params = ["sv", "ss", "srt", "spr", "st", "se", "sip", "si", "skoid", "sktid", "skt", "ske", "sks", "skv", "sr", "sp", "sig", "rscc", "rscd", "rsce", "rscl", "rsct", "saoid", "scid"];
    var queries = [];

    for (var _i = 0, params_1 = params; _i < params_1.length; _i++) {
      var param = params_1[_i];

      switch (param) {
        case "sv":
          this.tryAppendQueryParameter(queries, param, this.version);
          break;

        case "ss":
          this.tryAppendQueryParameter(queries, param, this.services);
          break;

        case "srt":
          this.tryAppendQueryParameter(queries, param, this.resourceTypes);
          break;

        case "spr":
          this.tryAppendQueryParameter(queries, param, this.protocol);
          break;

        case "st":
          this.tryAppendQueryParameter(queries, param, this.startsOn ? (0, _utils.truncatedISO8061Date)(this.startsOn, false) : undefined);
          break;

        case "se":
          this.tryAppendQueryParameter(queries, param, this.expiresOn ? (0, _utils.truncatedISO8061Date)(this.expiresOn, false) : undefined);
          break;

        case "sip":
          this.tryAppendQueryParameter(queries, param, this.ipRange ? (0, _SasIPRange.ipRangeToString)(this.ipRange) : undefined);
          break;

        case "si":
          this.tryAppendQueryParameter(queries, param, this.identifier);
          break;

        case "skoid":
          // Signed object ID
          this.tryAppendQueryParameter(queries, param, this.signedOid);
          break;

        case "sktid":
          // Signed tenant ID
          this.tryAppendQueryParameter(queries, param, this.signedTenantId);
          break;

        case "skt":
          // Signed key start time
          this.tryAppendQueryParameter(queries, param, this.signedStartsOn ? (0, _utils.truncatedISO8061Date)(this.signedStartsOn, false) : undefined);
          break;

        case "ske":
          // Signed key expiry time
          this.tryAppendQueryParameter(queries, param, this.signedExpiresOn ? (0, _utils.truncatedISO8061Date)(this.signedExpiresOn, false) : undefined);
          break;

        case "sks":
          // Signed key service
          this.tryAppendQueryParameter(queries, param, this.signedService);
          break;

        case "skv":
          // Signed key version
          this.tryAppendQueryParameter(queries, param, this.signedVersion);
          break;

        case "sr":
          this.tryAppendQueryParameter(queries, param, this.resource);
          break;

        case "sp":
          this.tryAppendQueryParameter(queries, param, this.permissions);
          break;

        case "sig":
          this.tryAppendQueryParameter(queries, param, this.signature);
          break;

        case "rscc":
          this.tryAppendQueryParameter(queries, param, this.cacheControl);
          break;

        case "rscd":
          this.tryAppendQueryParameter(queries, param, this.contentDisposition);
          break;

        case "rsce":
          this.tryAppendQueryParameter(queries, param, this.contentEncoding);
          break;

        case "rscl":
          this.tryAppendQueryParameter(queries, param, this.contentLanguage);
          break;

        case "rsct":
          this.tryAppendQueryParameter(queries, param, this.contentType);
          break;

        case "saoid":
          this.tryAppendQueryParameter(queries, param, this.preauthorizedAgentObjectId);
          break;

        case "scid":
          this.tryAppendQueryParameter(queries, param, this.correlationId);
          break;
      }
    }

    return queries.join("&");
  };
  /**
   * A private helper method used to filter and append query key/value pairs into an array.
   *
   * @param queries -
   * @param key -
   * @param value -
   */


  SASQueryParameters.prototype.tryAppendQueryParameter = function (queries, key, value) {
    if (!value) {
      return;
    }

    key = encodeURIComponent(key);
    value = encodeURIComponent(value);

    if (key.length > 0 && value.length > 0) {
      queries.push(key + "=" + value);
    }
  };

  return SASQueryParameters;
}();

exports.SASQueryParameters = SASQueryParameters;
},{"./SasIPRange":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js","../utils/utils.common":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateBlobSASQueryParameters = generateBlobSASQueryParameters;

var _BlobSASPermissions = require("./BlobSASPermissions");

var _ContainerSASPermissions = require("./ContainerSASPermissions");

var _StorageSharedKeyCredential = require("../credentials/StorageSharedKeyCredential");

var _UserDelegationKeyCredential = require("../credentials/UserDelegationKeyCredential");

var _SasIPRange = require("./SasIPRange");

var _SASQueryParameters = require("./SASQueryParameters");

var _constants = require("../utils/constants");

var _utils = require("../utils/utils.common");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
function generateBlobSASQueryParameters(blobSASSignatureValues, sharedKeyCredentialOrUserDelegationKey, accountName) {
  var version = blobSASSignatureValues.version ? blobSASSignatureValues.version : _constants.SERVICE_VERSION;
  var sharedKeyCredential = sharedKeyCredentialOrUserDelegationKey instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential ? sharedKeyCredentialOrUserDelegationKey : undefined;
  var userDelegationKeyCredential;

  if (sharedKeyCredential === undefined && accountName !== undefined) {
    userDelegationKeyCredential = new _UserDelegationKeyCredential.UserDelegationKeyCredential(accountName, sharedKeyCredentialOrUserDelegationKey);
  }

  if (sharedKeyCredential === undefined && userDelegationKeyCredential === undefined) {
    throw TypeError("Invalid sharedKeyCredential, userDelegationKey or accountName.");
  } // Version 2019-12-12 adds support for the blob tags permission.
  // Version 2018-11-09 adds support for the signed resource and signed blob snapshot time fields.
  // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas#constructing-the-signature-string


  if (version >= "2018-11-09") {
    if (sharedKeyCredential !== undefined) {
      return generateBlobSASQueryParameters20181109(blobSASSignatureValues, sharedKeyCredential);
    } else {
      // Version 2020-02-10 delegation SAS signature construction includes preauthorizedAgentObjectId, agentObjectId, correlationId.
      if (version >= "2020-02-10") {
        return generateBlobSASQueryParametersUDK20200210(blobSASSignatureValues, userDelegationKeyCredential);
      } else {
        return generateBlobSASQueryParametersUDK20181109(blobSASSignatureValues, userDelegationKeyCredential);
      }
    }
  }

  if (version >= "2015-04-05") {
    if (sharedKeyCredential !== undefined) {
      return generateBlobSASQueryParameters20150405(blobSASSignatureValues, sharedKeyCredential);
    } else {
      throw new RangeError("'version' must be >= '2018-11-09' when generating user delegation SAS using user delegation key.");
    }
  }

  throw new RangeError("'version' must be >= '2015-04-05'.");
}
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 * IMPLEMENTATION FOR API VERSION FROM 2015-04-05 AND BEFORE 2018-11-09.
 *
 * Creates an instance of SASQueryParameters.
 *
 * Only accepts required settings needed to create a SAS. For optional settings please
 * set corresponding properties directly, such as permissions, startsOn and identifier.
 *
 * WARNING: When identifier is not provided, permissions and expiresOn are required.
 * You MUST assign value to identifier or expiresOn & permissions manually if you initial with
 * this constructor.
 *
 * @param blobSASSignatureValues -
 * @param sharedKeyCredential -
 */


function generateBlobSASQueryParameters20150405(blobSASSignatureValues, sharedKeyCredential) {
  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);

  if (!blobSASSignatureValues.identifier && !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {
    throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.");
  }

  var resource = "c";

  if (blobSASSignatureValues.blobName) {
    resource = "b";
  } // Calling parse and toString guarantees the proper ordering and throws on invalid characters.


  var verifiedPermissions;

  if (blobSASSignatureValues.permissions) {
    if (blobSASSignatureValues.blobName) {
      verifiedPermissions = _BlobSASPermissions.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    } else {
      verifiedPermissions = _ContainerSASPermissions.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
  } // Signature is generated on the un-url-encoded values.


  var stringToSign = [verifiedPermissions ? verifiedPermissions : "", blobSASSignatureValues.startsOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false) : "", blobSASSignatureValues.expiresOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false) : "", getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName), blobSASSignatureValues.identifier, blobSASSignatureValues.ipRange ? (0, _SasIPRange.ipRangeToString)(blobSASSignatureValues.ipRange) : "", blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "", blobSASSignatureValues.version, blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : "", blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : "", blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : "", blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : "", blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : ""].join("\n");
  var signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
  return new _SASQueryParameters.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType);
}
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.
 *
 * Creates an instance of SASQueryParameters.
 *
 * Only accepts required settings needed to create a SAS. For optional settings please
 * set corresponding properties directly, such as permissions, startsOn and identifier.
 *
 * WARNING: When identifier is not provided, permissions and expiresOn are required.
 * You MUST assign value to identifier or expiresOn & permissions manually if you initial with
 * this constructor.
 *
 * @param blobSASSignatureValues -
 * @param sharedKeyCredential -
 */


function generateBlobSASQueryParameters20181109(blobSASSignatureValues, sharedKeyCredential) {
  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);

  if (!blobSASSignatureValues.identifier && !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {
    throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.");
  }

  var resource = "c";
  var timestamp = blobSASSignatureValues.snapshotTime;

  if (blobSASSignatureValues.blobName) {
    resource = "b";

    if (blobSASSignatureValues.snapshotTime) {
      resource = "bs";
    } else if (blobSASSignatureValues.versionId) {
      resource = "bv";
      timestamp = blobSASSignatureValues.versionId;
    }
  } // Calling parse and toString guarantees the proper ordering and throws on invalid characters.


  var verifiedPermissions;

  if (blobSASSignatureValues.permissions) {
    if (blobSASSignatureValues.blobName) {
      verifiedPermissions = _BlobSASPermissions.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    } else {
      verifiedPermissions = _ContainerSASPermissions.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
  } // Signature is generated on the un-url-encoded values.


  var stringToSign = [verifiedPermissions ? verifiedPermissions : "", blobSASSignatureValues.startsOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false) : "", blobSASSignatureValues.expiresOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false) : "", getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName), blobSASSignatureValues.identifier, blobSASSignatureValues.ipRange ? (0, _SasIPRange.ipRangeToString)(blobSASSignatureValues.ipRange) : "", blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "", blobSASSignatureValues.version, resource, timestamp, blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : "", blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : "", blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : "", blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : "", blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : ""].join("\n");
  var signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
  return new _SASQueryParameters.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType);
}
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.
 *
 * Creates an instance of SASQueryParameters.
 *
 * Only accepts required settings needed to create a SAS. For optional settings please
 * set corresponding properties directly, such as permissions, startsOn.
 *
 * WARNING: identifier will be ignored, permissions and expiresOn are required.
 *
 * @param blobSASSignatureValues -
 * @param userDelegationKeyCredential -
 */


function generateBlobSASQueryParametersUDK20181109(blobSASSignatureValues, userDelegationKeyCredential) {
  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues); // Stored access policies are not supported for a user delegation SAS.

  if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {
    throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.");
  }

  var resource = "c";
  var timestamp = blobSASSignatureValues.snapshotTime;

  if (blobSASSignatureValues.blobName) {
    resource = "b";

    if (blobSASSignatureValues.snapshotTime) {
      resource = "bs";
    } else if (blobSASSignatureValues.versionId) {
      resource = "bv";
      timestamp = blobSASSignatureValues.versionId;
    }
  } // Calling parse and toString guarantees the proper ordering and throws on invalid characters.


  var verifiedPermissions;

  if (blobSASSignatureValues.permissions) {
    if (blobSASSignatureValues.blobName) {
      verifiedPermissions = _BlobSASPermissions.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    } else {
      verifiedPermissions = _ContainerSASPermissions.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
  } // Signature is generated on the un-url-encoded values.


  var stringToSign = [verifiedPermissions ? verifiedPermissions : "", blobSASSignatureValues.startsOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false) : "", blobSASSignatureValues.expiresOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false) : "", getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName), userDelegationKeyCredential.userDelegationKey.signedObjectId, userDelegationKeyCredential.userDelegationKey.signedTenantId, userDelegationKeyCredential.userDelegationKey.signedStartsOn ? (0, _utils.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false) : "", userDelegationKeyCredential.userDelegationKey.signedExpiresOn ? (0, _utils.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false) : "", userDelegationKeyCredential.userDelegationKey.signedService, userDelegationKeyCredential.userDelegationKey.signedVersion, blobSASSignatureValues.ipRange ? (0, _SasIPRange.ipRangeToString)(blobSASSignatureValues.ipRange) : "", blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "", blobSASSignatureValues.version, resource, timestamp, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType].join("\n");
  var signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);
  return new _SASQueryParameters.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey);
}
/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 * IMPLEMENTATION FOR API VERSION FROM 2020-02-10.
 *
 * Creates an instance of SASQueryParameters.
 *
 * Only accepts required settings needed to create a SAS. For optional settings please
 * set corresponding properties directly, such as permissions, startsOn.
 *
 * WARNING: identifier will be ignored, permissions and expiresOn are required.
 *
 * @param blobSASSignatureValues -
 * @param userDelegationKeyCredential -
 */


function generateBlobSASQueryParametersUDK20200210(blobSASSignatureValues, userDelegationKeyCredential) {
  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues); // Stored access policies are not supported for a user delegation SAS.

  if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {
    throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.");
  }

  var resource = "c";
  var timestamp = blobSASSignatureValues.snapshotTime;

  if (blobSASSignatureValues.blobName) {
    resource = "b";

    if (blobSASSignatureValues.snapshotTime) {
      resource = "bs";
    } else if (blobSASSignatureValues.versionId) {
      resource = "bv";
      timestamp = blobSASSignatureValues.versionId;
    }
  } // Calling parse and toString guarantees the proper ordering and throws on invalid characters.


  var verifiedPermissions;

  if (blobSASSignatureValues.permissions) {
    if (blobSASSignatureValues.blobName) {
      verifiedPermissions = _BlobSASPermissions.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    } else {
      verifiedPermissions = _ContainerSASPermissions.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
  } // Signature is generated on the un-url-encoded values.


  var stringToSign = [verifiedPermissions ? verifiedPermissions : "", blobSASSignatureValues.startsOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false) : "", blobSASSignatureValues.expiresOn ? (0, _utils.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false) : "", getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName), userDelegationKeyCredential.userDelegationKey.signedObjectId, userDelegationKeyCredential.userDelegationKey.signedTenantId, userDelegationKeyCredential.userDelegationKey.signedStartsOn ? (0, _utils.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false) : "", userDelegationKeyCredential.userDelegationKey.signedExpiresOn ? (0, _utils.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false) : "", userDelegationKeyCredential.userDelegationKey.signedService, userDelegationKeyCredential.userDelegationKey.signedVersion, blobSASSignatureValues.preauthorizedAgentObjectId, undefined, blobSASSignatureValues.correlationId, blobSASSignatureValues.ipRange ? (0, _SasIPRange.ipRangeToString)(blobSASSignatureValues.ipRange) : "", blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "", blobSASSignatureValues.version, resource, timestamp, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType].join("\n");
  var signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);
  return new _SASQueryParameters.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey, blobSASSignatureValues.preauthorizedAgentObjectId, blobSASSignatureValues.correlationId);
}

function getCanonicalName(accountName, containerName, blobName) {
  // Container: "/blob/account/containerName"
  // Blob:      "/blob/account/containerName/blobName"
  var elements = ["/blob/" + accountName + "/" + containerName];

  if (blobName) {
    elements.push("/" + blobName);
  }

  return elements.join("");
}

function SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues) {
  var version = blobSASSignatureValues.version ? blobSASSignatureValues.version : _constants.SERVICE_VERSION;

  if (blobSASSignatureValues.snapshotTime && version < "2018-11-09") {
    throw RangeError("'version' must be >= '2018-11-09' when providing 'snapshotTime'.");
  }

  if (blobSASSignatureValues.blobName === undefined && blobSASSignatureValues.snapshotTime) {
    throw RangeError("Must provide 'blobName' when providing 'snapshotTime'.");
  }

  if (blobSASSignatureValues.versionId && version < "2019-10-10") {
    throw RangeError("'version' must be >= '2019-10-10' when providing 'versionId'.");
  }

  if (blobSASSignatureValues.blobName === undefined && blobSASSignatureValues.versionId) {
    throw RangeError("Must provide 'blobName' when providing 'versionId'.");
  }

  if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.deleteVersion && version < "2019-10-10") {
    throw RangeError("'version' must be >= '2019-10-10' when providing 'x' permission.");
  }

  if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.tag && version < "2019-12-12") {
    throw RangeError("'version' must be >= '2019-12-12' when providing 't' permission.");
  }

  if (version < "2020-02-10" && blobSASSignatureValues.permissions && (blobSASSignatureValues.permissions.move || blobSASSignatureValues.permissions.execute)) {
    throw RangeError("'version' must be >= '2020-02-10' when providing the 'm' or 'e' permission.");
  }

  if (version < "2020-02-10" && (blobSASSignatureValues.preauthorizedAgentObjectId || blobSASSignatureValues.correlationId)) {
    throw RangeError("'version' must be >= '2020-02-10' when providing 'preauthorizedAgentObjectId' or 'correlationId'.");
  }

  blobSASSignatureValues.version = version;
  return blobSASSignatureValues;
}
},{"./BlobSASPermissions":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASPermissions.js","./ContainerSASPermissions":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/ContainerSASPermissions.js","../credentials/StorageSharedKeyCredential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js","../credentials/UserDelegationKeyCredential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/UserDelegationKeyCredential.browser.js","./SasIPRange":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js","./SASQueryParameters":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js","../utils/constants":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js","../utils/utils.common":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClient.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  StorageClient: true,
  StorageModels: true,
  StorageMappers: true,
  StorageClientContext: true
};
Object.defineProperty(exports, "StorageClientContext", {
  enumerable: true,
  get: function () {
    return _storageClientContext.StorageClientContext;
  }
});
exports.StorageMappers = exports.StorageModels = exports.StorageClient = void 0;

var _tslib = require("tslib");

var Models = _interopRequireWildcard(require("./models"));

exports.StorageModels = Models;

var Mappers = _interopRequireWildcard(require("./models/mappers"));

exports.StorageMappers = Mappers;

var operations = _interopRequireWildcard(require("./operations"));

Object.keys(operations).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === operations[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return operations[key];
    }
  });
});

var _storageClientContext = require("./storageClientContext");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var StorageClient =
/** @class */
function (_super) {
  (0, _tslib.__extends)(StorageClient, _super);
  /**
   * Initializes a new instance of the StorageClient class.
   * @param url The URL of the service account, container, or blob that is the targe of the desired
   * operation.
   * @param [options] The parameter options
   */

  function StorageClient(url, options) {
    var _this = _super.call(this, url, options) || this;

    _this.service = new operations.Service(_this);
    _this.container = new operations.Container(_this);
    _this.directory = new operations.Directory(_this);
    _this.blob = new operations.Blob(_this);
    _this.pageBlob = new operations.PageBlob(_this);
    _this.appendBlob = new operations.AppendBlob(_this);
    _this.blockBlob = new operations.BlockBlob(_this);
    return _this;
  }

  return StorageClient;
}(_storageClientContext.StorageClientContext); // Operation Specifications


exports.StorageClient = StorageClient;
},{"tslib":"node_modules/tslib/tslib.es6.js","./models":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/index.js","./models/mappers":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js","./operations":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/index.js","./storageClientContext":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClientContext.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlobLeaseClient = void 0;

var _tslib = require("tslib");

var _coreHttp = require("@azure/core-http");

var _storageClient = require("./generated/src/storageClient");

var _api = require("@opentelemetry/api");

var _operations = require("./generated/src/operations");

var _constants = require("./utils/constants");

var _tracing = require("./utils/tracing");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * A client that manages leases for a {@link ContainerClient} or a {@link BlobClient}.
 */
var BlobLeaseClient =
/** @class */
function () {
  /**
   * Creates an instance of BlobLeaseClient.
   * @param client - The client to make the lease operation requests.
   * @param leaseId - Initial proposed lease id.
   */
  function BlobLeaseClient(client, leaseId) {
    var clientContext = new _storageClient.StorageClientContext(client.url, client.pipeline.toServiceClientOptions());
    this._url = client.url;

    if (client.name === undefined) {
      this._isContainer = true;
      this._containerOrBlobOperation = new _operations.Container(clientContext);
    } else {
      this._isContainer = false;
      this._containerOrBlobOperation = new _operations.Blob(clientContext);
    }

    if (!leaseId) {
      leaseId = (0, _coreHttp.generateUuid)();
    }

    this._leaseId = leaseId;
  }

  Object.defineProperty(BlobLeaseClient.prototype, "leaseId", {
    /**
     * Gets the lease Id.
     *
     * @readonly
     */
    get: function () {
      return this._leaseId;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobLeaseClient.prototype, "url", {
    /**
     * Gets the url.
     *
     * @readonly
     */
    get: function () {
      return this._url;
    },
    enumerable: false,
    configurable: true
  });
  /**
   * Establishes and manages a lock on a container for delete operations, or on a blob
   * for write and delete operations.
   * The lock duration can be 15 to 60 seconds, or can be infinite.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
   * and
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
   *
   * @param duration - Must be between 15 to 60 seconds, or infinite (-1)
   * @param options - option to configure lease management operations.
   * @returns Response data for acquire lease operation.
   */

  BlobLeaseClient.prototype.acquireLease = function (duration, options) {
    var _a, _b, _c, _d, _e, _f;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _g, span, updatedOptions, e_1;

      return (0, _tslib.__generator)(this, function (_h) {
        switch (_h.label) {
          case 0:
            _g = (0, _tracing.createSpan)("BlobLeaseClient-acquireLease", options), span = _g.span, updatedOptions = _g.updatedOptions;

            if (this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _constants.ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _constants.ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {
              throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
            }

            _h.label = 1;

          case 1:
            _h.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this._containerOrBlobOperation.acquireLease((0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              duration: duration,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions
              }),
              proposedLeaseId: this._leaseId
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _h.sent()];

          case 3:
            e_1 = _h.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_1.message
            });
            throw e_1;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * To change the ID of the lease.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
   * and
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
   *
   * @param proposedLeaseId - the proposed new lease Id.
   * @param options - option to configure lease management operations.
   * @returns Response data for change lease operation.
   */


  BlobLeaseClient.prototype.changeLease = function (proposedLeaseId, options) {
    var _a, _b, _c, _d, _e, _f;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _g, span, updatedOptions, response, e_2;

      return (0, _tslib.__generator)(this, function (_h) {
        switch (_h.label) {
          case 0:
            _g = (0, _tracing.createSpan)("BlobLeaseClient-changeLease", options), span = _g.span, updatedOptions = _g.updatedOptions;

            if (this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _constants.ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _constants.ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {
              throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
            }

            _h.label = 1;

          case 1:
            _h.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this._containerOrBlobOperation.changeLease(this._leaseId, proposedLeaseId, (0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions
              })
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            response = _h.sent();
            this._leaseId = proposedLeaseId;
            return [2
            /*return*/
            , response];

          case 3:
            e_2 = _h.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_2.message
            });
            throw e_2;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * To free the lease if it is no longer needed so that another client may
   * immediately acquire a lease against the container or the blob.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
   * and
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
   *
   * @param options - option to configure lease management operations.
   * @returns Response data for release lease operation.
   */


  BlobLeaseClient.prototype.releaseLease = function (options) {
    var _a, _b, _c, _d, _e, _f;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _g, span, updatedOptions, e_3;

      return (0, _tslib.__generator)(this, function (_h) {
        switch (_h.label) {
          case 0:
            _g = (0, _tracing.createSpan)("BlobLeaseClient-releaseLease", options), span = _g.span, updatedOptions = _g.updatedOptions;

            if (this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _constants.ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _constants.ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {
              throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
            }

            _h.label = 1;

          case 1:
            _h.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this._containerOrBlobOperation.releaseLease(this._leaseId, (0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions
              })
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _h.sent()];

          case 3:
            e_3 = _h.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_3.message
            });
            throw e_3;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * To renew the lease.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
   * and
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
   *
   * @param options - Optional option to configure lease management operations.
   * @returns Response data for renew lease operation.
   */


  BlobLeaseClient.prototype.renewLease = function (options) {
    var _a, _b, _c, _d, _e, _f;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _g, span, updatedOptions, e_4;

      return (0, _tslib.__generator)(this, function (_h) {
        switch (_h.label) {
          case 0:
            _g = (0, _tracing.createSpan)("BlobLeaseClient-renewLease", options), span = _g.span, updatedOptions = _g.updatedOptions;

            if (this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _constants.ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _constants.ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {
              throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
            }

            _h.label = 1;

          case 1:
            _h.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this._containerOrBlobOperation.renewLease(this._leaseId, (0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions
              })
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _h.sent()];

          case 3:
            e_4 = _h.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_4.message
            });
            throw e_4;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * To end the lease but ensure that another client cannot acquire a new lease
   * until the current lease period has expired.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
   * and
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
   *
   * @param breakPeriod - Break period
   * @param options - Optional options to configure lease management operations.
   * @returns Response data for break lease operation.
   */


  BlobLeaseClient.prototype.breakLease = function (breakPeriod, options) {
    var _a, _b, _c, _d, _e, _f;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _g, span, updatedOptions, operationOptions, e_5;

      return (0, _tslib.__generator)(this, function (_h) {
        switch (_h.label) {
          case 0:
            _g = (0, _tracing.createSpan)("BlobLeaseClient-breakLease", options), span = _g.span, updatedOptions = _g.updatedOptions;

            if (this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _constants.ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _constants.ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {
              throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
            }

            _h.label = 1;

          case 1:
            _h.trys.push([1, 3, 4, 5]);

            operationOptions = (0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              breakPeriod: breakPeriod,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions
              })
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions));
            return [4
            /*yield*/
            , this._containerOrBlobOperation.breakLease(operationOptions)];

          case 2:
            return [2
            /*return*/
            , _h.sent()];

          case 3:
            e_5 = _h.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_5.message
            });
            throw e_5;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  return BlobLeaseClient;
}();

exports.BlobLeaseClient = BlobLeaseClient;
},{"tslib":"node_modules/tslib/tslib.es6.js","@azure/core-http":"node_modules/@azure/core-http/es/src/coreHttp.js","./generated/src/storageClient":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClient.js","@opentelemetry/api":"node_modules/@opentelemetry/api/build/src/index.js","./generated/src/operations":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/index.js","./utils/constants":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js","./utils/tracing":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobDownloadResponse.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlobDownloadResponse = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// This file is used as a shim of "BlobDownloadResponse" for some browser bundlers
// when trying to bundle "BlobDownloadResponse"
// "BlobDownloadResponse" class is only available in Node.js runtime
var BlobDownloadResponse = 1;
exports.BlobDownloadResponse = BlobDownloadResponse;
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobQueryResponse.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlobQueryResponse = void 0;

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * ONLY AVAILABLE IN BROWSER RUNTIME.
 *
 * BlobQueryResponse implements BlobDownloadResponseModel interface, and in browser runtime it will
 * parse avor data returned by blob query.
 */
var BlobQueryResponse =
/** @class */
function () {
  /**
   * Creates an instance of BlobQueryResponse.
   *
   * @param originalResponse -
   * @param options -
   */
  function BlobQueryResponse(originalResponse, _options) {
    if (_options === void 0) {
      _options = {};
    }

    this.originalResponse = originalResponse;
  }

  Object.defineProperty(BlobQueryResponse.prototype, "acceptRanges", {
    /**
     * Indicates that the service supports
     * requests for partial file content.
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.acceptRanges;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "cacheControl", {
    /**
     * Returns if it was previously specified
     * for the file.
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.cacheControl;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "contentDisposition", {
    /**
     * Returns the value that was specified
     * for the 'x-ms-content-disposition' header and specifies how to process the
     * response.
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.contentDisposition;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "contentEncoding", {
    /**
     * Returns the value that was specified
     * for the Content-Encoding request header.
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.contentEncoding;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "contentLanguage", {
    /**
     * Returns the value that was specified
     * for the Content-Language request header.
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.contentLanguage;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "blobSequenceNumber", {
    /**
     * The current sequence number for a
     * page blob. This header is not returned for block blobs or append blobs.
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.blobSequenceNumber;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "blobType", {
    /**
     * The blob's type. Possible values include:
     * 'BlockBlob', 'PageBlob', 'AppendBlob'.
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.blobType;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "contentLength", {
    /**
     * The number of bytes present in the
     * response body.
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.contentLength;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "contentMD5", {
    /**
     * If the file has an MD5 hash and the
     * request is to read the full file, this response header is returned so that
     * the client can check for message content integrity. If the request is to
     * read a specified range and the 'x-ms-range-get-content-md5' is set to
     * true, then the request returns an MD5 hash for the range, as long as the
     * range size is less than or equal to 4 MB. If neither of these sets of
     * conditions is true, then no value is returned for the 'Content-MD5'
     * header.
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.contentMD5;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "contentRange", {
    /**
     * Indicates the range of bytes returned if
     * the client requested a subset of the file by setting the Range request
     * header.
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.contentRange;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "contentType", {
    /**
     * The content type specified for the file.
     * The default content type is 'application/octet-stream'
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.contentType;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "copyCompletedOn", {
    /**
     * Conclusion time of the last attempted
     * Copy File operation where this file was the destination file. This value
     * can specify the time of a completed, aborted, or failed copy attempt.
     *
     * @readonly
     */
    get: function () {
      return undefined;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "copyId", {
    /**
     * String identifier for the last attempted Copy
     * File operation where this file was the destination file.
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.copyId;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "copyProgress", {
    /**
     * Contains the number of bytes copied and
     * the total bytes in the source in the last attempted Copy File operation
     * where this file was the destination file. Can show between 0 and
     * Content-Length bytes copied.
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.copyProgress;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "copySource", {
    /**
     * URL up to 2KB in length that specifies the
     * source file used in the last attempted Copy File operation where this file
     * was the destination file.
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.copySource;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "copyStatus", {
    /**
     * State of the copy operation
     * identified by 'x-ms-copy-id'. Possible values include: 'pending',
     * 'success', 'aborted', 'failed'
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.copyStatus;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "copyStatusDescription", {
    /**
     * Only appears when
     * x-ms-copy-status is failed or pending. Describes cause of fatal or
     * non-fatal copy operation failure.
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.copyStatusDescription;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "leaseDuration", {
    /**
     * When a blob is leased,
     * specifies whether the lease is of infinite or fixed duration. Possible
     * values include: 'infinite', 'fixed'.
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.leaseDuration;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "leaseState", {
    /**
     * Lease state of the blob. Possible
     * values include: 'available', 'leased', 'expired', 'breaking', 'broken'.
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.leaseState;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "leaseStatus", {
    /**
     * The current lease status of the
     * blob. Possible values include: 'locked', 'unlocked'.
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.leaseStatus;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "date", {
    /**
     * A UTC date/time value generated by the service that
     * indicates the time at which the response was initiated.
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.date;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "blobCommittedBlockCount", {
    /**
     * The number of committed blocks
     * present in the blob. This header is returned only for append blobs.
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.blobCommittedBlockCount;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "etag", {
    /**
     * The ETag contains a value that you can use to
     * perform operations conditionally, in quotes.
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.etag;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "errorCode", {
    /**
     * The error code.
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.errorCode;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "isServerEncrypted", {
    /**
     * The value of this header is set to
     * true if the file data and application metadata are completely encrypted
     * using the specified algorithm. Otherwise, the value is set to false (when
     * the file is unencrypted, or if only parts of the file/application metadata
     * are encrypted).
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.isServerEncrypted;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "blobContentMD5", {
    /**
     * If the blob has a MD5 hash, and if
     * request contains range header (Range or x-ms-range), this response header
     * is returned with the value of the whole blob's MD5 value. This value may
     * or may not be equal to the value returned in Content-MD5 header, with the
     * latter calculated from the requested range.
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.blobContentMD5;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "lastModified", {
    /**
     * Returns the date and time the file was last
     * modified. Any operation that modifies the file or its properties updates
     * the last modified time.
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.lastModified;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "metadata", {
    /**
     * A name-value pair
     * to associate with a file storage object.
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.metadata;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "requestId", {
    /**
     * This header uniquely identifies the request
     * that was made and can be used for troubleshooting the request.
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.requestId;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "clientRequestId", {
    /**
     * If a client request id header is sent in the request, this header will be present in the
     * response with the same value.
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.clientRequestId;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "version", {
    /**
     * Indicates the version of the File service used
     * to execute the request.
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.version;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "encryptionKeySha256", {
    /**
     * The SHA-256 hash of the encryption key used to encrypt the blob. This value is only returned
     * when the blob was encrypted with a customer-provided key.
     *
     * @readonly
     */
    get: function () {
      return this.originalResponse.encryptionKeySha256;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "contentCrc64", {
    /**
     * If the request is to read a specified range and the x-ms-range-get-content-crc64 is set to
     * true, then the request returns a crc64 for the range, as long as the range size is less than
     * or equal to 4 MB. If both x-ms-range-get-content-crc64 & x-ms-range-get-content-md5 is
     * specified in the same request, it will fail with 400(Bad Request)
     */
    get: function () {
      return this.originalResponse.contentCrc64;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "blobBody", {
    /**
     * The response body as a browser Blob.
     * Always undefined in node.js.
     *
     * @readonly
     */
    get: function () {
      throw Error("Quick query in browser is not supported yet.");
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "readableStreamBody", {
    /**
     * The response body as a node.js Readable stream.
     * Always undefined in the browser.
     *
     * @readonly
     */
    get: function () {
      return undefined;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobQueryResponse.prototype, "_response", {
    /**
     * The HTTP response.
     */
    get: function () {
      return this.originalResponse._response;
    },
    enumerable: false,
    configurable: true
  });
  return BlobQueryResponse;
}();

exports.BlobQueryResponse = BlobQueryResponse;
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toAccessTier = toAccessTier;
exports.ensureCpkIfSpecified = ensureCpkIfSpecified;
exports.PremiumPageBlobTier = exports.BlockBlobTier = void 0;

var _constants = require("./utils/constants");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Represents the access tier on a blob.
 * For detailed information about block blob level tiering see {@link https://docs.microsoft.com/azure/storage/blobs/storage-blob-storage-tiers|Hot, cool and archive storage tiers.}
 */
var BlockBlobTier;
exports.BlockBlobTier = BlockBlobTier;

(function (BlockBlobTier) {
  /**
   * Optimized for storing data that is accessed frequently.
   */
  BlockBlobTier["Hot"] = "Hot";
  /**
   * Optimized for storing data that is infrequently accessed and stored for at least 30 days.
   */

  BlockBlobTier["Cool"] = "Cool";
  /**
   * Optimized for storing data that is rarely accessed and stored for at least 180 days
   * with flexible latency requirements (on the order of hours).
   */

  BlockBlobTier["Archive"] = "Archive";
})(BlockBlobTier || (exports.BlockBlobTier = BlockBlobTier = {}));
/**
 * Specifies the page blob tier to set the blob to. This is only applicable to page blobs on premium storage accounts.
 * Please see {@link https://docs.microsoft.com/azure/storage/storage-premium-storage#scalability-and-performance-targets|here}
 * for detailed information on the corresponding IOPS and throughput per PageBlobTier.
 */


var PremiumPageBlobTier;
exports.PremiumPageBlobTier = PremiumPageBlobTier;

(function (PremiumPageBlobTier) {
  /**
   * P4 Tier.
   */
  PremiumPageBlobTier["P4"] = "P4";
  /**
   * P6 Tier.
   */

  PremiumPageBlobTier["P6"] = "P6";
  /**
   * P10 Tier.
   */

  PremiumPageBlobTier["P10"] = "P10";
  /**
   * P15 Tier.
   */

  PremiumPageBlobTier["P15"] = "P15";
  /**
   * P20 Tier.
   */

  PremiumPageBlobTier["P20"] = "P20";
  /**
   * P30 Tier.
   */

  PremiumPageBlobTier["P30"] = "P30";
  /**
   * P40 Tier.
   */

  PremiumPageBlobTier["P40"] = "P40";
  /**
   * P50 Tier.
   */

  PremiumPageBlobTier["P50"] = "P50";
  /**
   * P60 Tier.
   */

  PremiumPageBlobTier["P60"] = "P60";
  /**
   * P70 Tier.
   */

  PremiumPageBlobTier["P70"] = "P70";
  /**
   * P80 Tier.
   */

  PremiumPageBlobTier["P80"] = "P80";
})(PremiumPageBlobTier || (exports.PremiumPageBlobTier = PremiumPageBlobTier = {}));

function toAccessTier(tier) {
  if (tier == undefined) {
    return undefined;
  }

  return tier; // No more check if string is a valid AccessTier, and left this to underlay logic to decide(service).
}

function ensureCpkIfSpecified(cpk, isHttps) {
  if (cpk && !isHttps) {
    throw new RangeError("Customer-provided encryption key must be used over HTTPS.");
  }

  if (cpk && !cpk.encryptionAlgorithm) {
    cpk.encryptionAlgorithm = _constants.EncryptionAlgorithmAES25;
  }
}
},{"./utils/constants":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/PageBlobRangeResponse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rangeResponseFromModel = rangeResponseFromModel;

var _tslib = require("tslib");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Function that converts PageRange and ClearRange to a common Range object.
 * PageRange and ClearRange have start and end while Range offset and count
 * this function normalizes to Range.
 * @param response - Model PageBlob Range response
 */
function rangeResponseFromModel(response) {
  var pageRange = (response._response.parsedBody.pageRange || []).map(function (x) {
    return {
      offset: x.start,
      count: x.end - x.start
    };
  });
  var clearRange = (response._response.parsedBody.clearRange || []).map(function (x) {
    return {
      offset: x.start,
      count: x.end - x.start
    };
  });
  return (0, _tslib.__assign)((0, _tslib.__assign)({}, response), {
    pageRange: pageRange,
    clearRange: clearRange,
    _response: (0, _tslib.__assign)((0, _tslib.__assign)({}, response._response), {
      parsedBody: {
        pageRange: pageRange,
        clearRange: clearRange
      }
    })
  });
}
},{"tslib":"node_modules/tslib/tslib.es6.js"}],"node_modules/@azure/core-lro/dist-esm/src/pollOperation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@azure/core-lro/dist-esm/src/poller.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Poller = exports.PollerCancelledError = exports.PollerStoppedError = void 0;

var _tslib = require("tslib");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * When a poller is manually stopped through the `stopPolling` method,
 * the poller will be rejected with an instance of the PollerStoppedError.
 */
var PollerStoppedError =
/** @class */
function (_super) {
  (0, _tslib.__extends)(PollerStoppedError, _super);

  function PollerStoppedError(message) {
    var _this = _super.call(this, message) || this;

    _this.name = "PollerStoppedError";
    Object.setPrototypeOf(_this, PollerStoppedError.prototype);
    return _this;
  }

  return PollerStoppedError;
}(Error);

exports.PollerStoppedError = PollerStoppedError;

/**
 * When a poller is cancelled through the `cancelOperation` method,
 * the poller will be rejected with an instance of the PollerCancelledError.
 */
var PollerCancelledError =
/** @class */
function (_super) {
  (0, _tslib.__extends)(PollerCancelledError, _super);

  function PollerCancelledError(message) {
    var _this = _super.call(this, message) || this;

    _this.name = "PollerCancelledError";
    Object.setPrototypeOf(_this, PollerCancelledError.prototype);
    return _this;
  }

  return PollerCancelledError;
}(Error);

exports.PollerCancelledError = PollerCancelledError;

/**
 * A class that represents the definition of a program that polls through consecutive requests
 * until it reaches a state of completion.
 *
 * A poller can be executed manually, by polling request by request by calling to the `poll()` method repeatedly, until its operation is completed.
 * It also provides a way to wait until the operation completes, by calling `pollUntilDone()` and waiting until the operation finishes.
 * Pollers can also request the cancellation of the ongoing process to whom is providing the underlying long running operation.
 *
 * ```ts
 * const poller = new MyPoller();
 *
 * // Polling just once:
 * await poller.poll();
 *
 * // We can try to cancel the request here, by calling:
 * //
 * //     await poller.cancelOperation();
 * //
 *
 * // Getting the final result:
 * const result = await poller.pollUntilDone();
 * ```
 *
 * The Poller is defined by two types, a type representing the state of the poller, which
 * must include a basic set of properties from `PollOperationState<TResult>`,
 * and a return type defined by `TResult`, which can be anything.
 *
 * The Poller class implements the `PollerLike` interface, which allows poller implementations to avoid having
 * to export the Poller's class directly, and instead only export the already instantiated poller with the PollerLike type.
 *
 * ```ts
 * class Client {
 *   public async makePoller: PollerLike<MyOperationState, MyResult> {
 *     const poller = new MyPoller({});
 *     // It might be preferred to return the poller after the first request is made,
 *     // so that some information can be obtained right away.
 *     await poller.poll();
 *     return poller;
 *   }
 * }
 *
 * const poller: PollerLike<MyOperationState, MyResult> = myClient.makePoller();
 * ```
 *
 * A poller can be created through its constructor, then it can be polled until it's completed.
 * At any point in time, the state of the poller can be obtained without delay through the getOperationState method.
 * At any point in time, the intermediate forms of the result type can be requested without delay.
 * Once the underlying operation is marked as completed, the poller will stop and the final value will be returned.
 *
 * ```ts
 * const poller = myClient.makePoller();
 * const state: MyOperationState = poller.getOperationState();
 *
 * // The intermediate result can be obtained at any time.
 * const result: MyResult | undefined = poller.getResult();
 *
 * // The final result can only be obtained after the poller finishes.
 * const result: MyResult = await poller.pollUntilDone();
 * ```
 *
 */
// eslint-disable-next-line no-use-before-define
var Poller =
/** @class */
function () {
  /**
   * A poller needs to be initialized by passing in at least the basic properties of the `PollOperation<TState, TResult>`.
   *
   * When writing an implementation of a Poller, this implementation needs to deal with the initialization
   * of any custom state beyond the basic definition of the poller. The basic poller assumes that the poller's
   * operation has already been defined, at least its basic properties. The code below shows how to approach
   * the definition of the constructor of a new custom poller.
   *
   * ```ts
   * export class MyPoller extends Poller<MyOperationState, string> {
   *   constructor({
   *     // Anything you might need outside of the basics
   *   }) {
   *     let state: MyOperationState = {
   *       privateProperty: private,
   *       publicProperty: public,
   *     };
   *
   *     const operation = {
   *       state,
   *       update,
   *       cancel,
   *       toString
   *     }
   *
   *     // Sending the operation to the parent's constructor.
   *     super(operation);
   *
   *     // You can assign more local properties here.
   *   }
   * }
   * ```
   *
   * Inside of this constructor, a new promise is created. This will be used to
   * tell the user when the poller finishes (see `pollUntilDone()`). The promise's
   * resolve and reject methods are also used internally to control when to resolve
   * or reject anyone waiting for the poller to finish.
   *
   * The constructor of a custom implementation of a poller is where any serialized version of
   * a previous poller's operation should be deserialized into the operation sent to the
   * base constructor. For example:
   *
   * ```ts
   * export class MyPoller extends Poller<MyOperationState, string> {
   *   constructor(
   *     baseOperation: string | undefined
   *   ) {
   *     let state: MyOperationState = {};
   *     if (baseOperation) {
   *       state = {
   *         ...JSON.parse(baseOperation).state,
   *         ...state
   *       };
   *     }
   *     const operation = {
   *       state,
   *       // ...
   *     }
   *     super(operation);
   *   }
   * }
   * ```
   *
   * @param operation - Must contain the basic properties of `PollOperation<State, TResult>`.
   */
  function Poller(operation) {
    var _this = this;

    this.stopped = true;
    this.pollProgressCallbacks = [];
    this.operation = operation;
    this.promise = new Promise(function (resolve, reject) {
      _this.resolve = resolve;
      _this.reject = reject;
    }); // This prevents the UnhandledPromiseRejectionWarning in node.js from being thrown.
    // The above warning would get thrown if `poller.poll` is called, it returns an error,
    // and pullUntilDone did not have a .catch or await try/catch on it's return value.

    this.promise.catch(function () {
      /* intentionally blank */
    });
  }
  /**
   * @internal
   * Starts a loop that will break only if the poller is done
   * or if the poller is stopped.
   */


  Poller.prototype.startPolling = function () {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      return (0, _tslib.__generator)(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (this.stopped) {
              this.stopped = false;
            }

            _a.label = 1;

          case 1:
            if (!(!this.isStopped() && !this.isDone())) return [3
            /*break*/
            , 4];
            return [4
            /*yield*/
            , this.poll()];

          case 2:
            _a.sent();

            return [4
            /*yield*/
            , this.delay()];

          case 3:
            _a.sent();

            return [3
            /*break*/
            , 1];

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * @internal
   * pollOnce does one polling, by calling to the update method of the underlying
   * poll operation to make any relevant change effective.
   *
   * It only optionally receives an object with an abortSignal property, from \@azure/abort-controller's AbortSignalLike.
   *
   * @param options - Optional properties passed to the operation's update method.
   */


  Poller.prototype.pollOnce = function (options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, e_1;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            _b.trys.push([0, 3,, 4]);

            if (!!this.isDone()) return [3
            /*break*/
            , 2];
            _a = this;
            return [4
            /*yield*/
            , this.operation.update({
              abortSignal: options.abortSignal,
              fireProgress: this.fireProgress.bind(this)
            })];

          case 1:
            _a.operation = _b.sent();

            if (this.isDone() && this.resolve) {
              // If the poller has finished polling, this means we now have a result.
              // However, it can be the case that TResult is instantiated to void, so
              // we are not expecting a result anyway. To assert that we might not
              // have a result eventually after finishing polling, we cast the result
              // to TResult.
              this.resolve(this.operation.state.result);
            }

            _b.label = 2;

          case 2:
            return [3
            /*break*/
            , 4];

          case 3:
            e_1 = _b.sent();
            this.operation.state.error = e_1;

            if (this.reject) {
              this.reject(e_1);
            }

            throw e_1;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * @internal
   * fireProgress calls the functions passed in via onProgress the method of the poller.
   *
   * It loops over all of the callbacks received from onProgress, and executes them, sending them
   * the current operation state.
   *
   * @param state - The current operation state.
   */


  Poller.prototype.fireProgress = function (state) {
    for (var _i = 0, _a = this.pollProgressCallbacks; _i < _a.length; _i++) {
      var callback = _a[_i];
      callback(state);
    }
  };
  /**
   * @internal
   * Invokes the underlying operation's cancel method, and rejects the
   * pollUntilDone promise.
   */


  Poller.prototype.cancelOnce = function (options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = this;
            return [4
            /*yield*/
            , this.operation.cancel(options)];

          case 1:
            _a.operation = _b.sent();

            if (this.reject) {
              this.reject(new PollerCancelledError("Poller cancelled"));
            }

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Returns a promise that will resolve once a single polling request finishes.
   * It does this by calling the update method of the Poller's operation.
   *
   * It only optionally receives an object with an abortSignal property, from \@azure/abort-controller's AbortSignalLike.
   *
   * @param options - Optional properties passed to the operation's update method.
   */


  Poller.prototype.poll = function (options) {
    var _this = this;

    if (options === void 0) {
      options = {};
    }

    if (!this.pollOncePromise) {
      this.pollOncePromise = this.pollOnce(options);

      var clearPollOncePromise = function () {
        _this.pollOncePromise = undefined;
      };

      this.pollOncePromise.then(clearPollOncePromise, clearPollOncePromise).catch(this.reject);
    }

    return this.pollOncePromise;
  };
  /**
   * Returns a promise that will resolve once the underlying operation is completed.
   */


  Poller.prototype.pollUntilDone = function () {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      return (0, _tslib.__generator)(this, function (_a) {
        if (this.stopped) {
          this.startPolling().catch(this.reject);
        }

        return [2
        /*return*/
        , this.promise];
      });
    });
  };
  /**
   * Invokes the provided callback after each polling is completed,
   * sending the current state of the poller's operation.
   *
   * It returns a method that can be used to stop receiving updates on the given callback function.
   */


  Poller.prototype.onProgress = function (callback) {
    var _this = this;

    this.pollProgressCallbacks.push(callback);
    return function () {
      _this.pollProgressCallbacks = _this.pollProgressCallbacks.filter(function (c) {
        return c !== callback;
      });
    };
  };
  /**
   * Returns true if the poller has finished polling.
   */


  Poller.prototype.isDone = function () {
    var state = this.operation.state;
    return Boolean(state.isCompleted || state.isCancelled || state.error);
  };
  /**
   * Stops the poller from continuing to poll.
   */


  Poller.prototype.stopPolling = function () {
    if (!this.stopped) {
      this.stopped = true;

      if (this.reject) {
        this.reject(new PollerStoppedError("This poller is already stopped"));
      }
    }
  };
  /**
   * Returns true if the poller is stopped.
   */


  Poller.prototype.isStopped = function () {
    return this.stopped;
  };
  /**
   * Attempts to cancel the underlying operation.
   *
   * It only optionally receives an object with an abortSignal property, from \@azure/abort-controller's AbortSignalLike.
   *
   * If it's called again before it finishes, it will throw an error.
   *
   * @param options - Optional properties passed to the operation's update method.
   */


  Poller.prototype.cancelOperation = function (options) {
    if (options === void 0) {
      options = {};
    }

    if (!this.stopped) {
      this.stopped = true;
    }

    if (!this.cancelPromise) {
      this.cancelPromise = this.cancelOnce(options);
    } else if (options.abortSignal) {
      throw new Error("A cancel request is currently pending");
    }

    return this.cancelPromise;
  };
  /**
   * Returns the state of the operation.
   *
   * Even though TState will be the same type inside any of the methods of any extension of the Poller class,
   * implementations of the pollers can customize what's shared with the public by writing their own
   * version of the `getOperationState` method, and by defining two types, one representing the internal state of the poller
   * and a public type representing a safe to share subset of the properties of the internal state.
   * Their definition of getOperationState can then return their public type.
   *
   * Example:
   *
   * ```ts
   * // Let's say we have our poller's operation state defined as:
   * interface MyOperationState extends PollOperationState<ResultType> {
   *   privateProperty?: string;
   *   publicProperty?: string;
   * }
   *
   * // To allow us to have a true separation of public and private state, we have to define another interface:
   * interface PublicState extends PollOperationState<ResultType> {
   *   publicProperty?: string;
   * }
   *
   * // Then, we define our Poller as follows:
   * export class MyPoller extends Poller<MyOperationState, ResultType> {
   *   // ... More content is needed here ...
   *
   *   public getOperationState(): PublicState {
   *     const state: PublicState = this.operation.state;
   *     return {
   *       // Properties from PollOperationState<TResult>
   *       isStarted: state.isStarted,
   *       isCompleted: state.isCompleted,
   *       isCancelled: state.isCancelled,
   *       error: state.error,
   *       result: state.result,
   *
   *       // The only other property needed by PublicState.
   *       publicProperty: state.publicProperty
   *     }
   *   }
   * }
   * ```
   *
   * You can see this in the tests of this repository, go to the file:
   * `../test/utils/testPoller.ts`
   * and look for the getOperationState implementation.
   */


  Poller.prototype.getOperationState = function () {
    return this.operation.state;
  };
  /**
   * Returns the result value of the operation,
   * regardless of the state of the poller.
   * It can return undefined or an incomplete form of the final TResult value
   * depending on the implementation.
   */


  Poller.prototype.getResult = function () {
    var state = this.operation.state;
    return state.result;
  };
  /**
   * Returns a serialized version of the poller's operation
   * by invoking the operation's toString method.
   */


  Poller.prototype.toString = function () {
    return this.operation.toString();
  };

  return Poller;
}();

exports.Poller = Poller;
},{"tslib":"node_modules/tslib/tslib.es6.js"}],"node_modules/@azure/core-lro/dist-esm/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _pollOperation = require("./pollOperation");

Object.keys(_pollOperation).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _pollOperation[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _pollOperation[key];
    }
  });
});

var _poller = require("./poller");

Object.keys(_poller).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _poller[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _poller[key];
    }
  });
});
},{"./pollOperation":"node_modules/@azure/core-lro/dist-esm/src/pollOperation.js","./poller":"node_modules/@azure/core-lro/dist-esm/src/poller.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/pollers/BlobStartCopyFromUrlPoller.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlobBeginCopyFromUrlPoller = void 0;

var _tslib = require("tslib");

var _coreHttp = require("@azure/core-http");

var _coreLro = require("@azure/core-lro");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * This is the poller returned by {@link BlobClient.beginCopyFromURL}.
 * This can not be instantiated directly outside of this package.
 *
 * @hidden
 */
var BlobBeginCopyFromUrlPoller =
/** @class */
function (_super) {
  (0, _tslib.__extends)(BlobBeginCopyFromUrlPoller, _super);

  function BlobBeginCopyFromUrlPoller(options) {
    var _this = this;

    var blobClient = options.blobClient,
        copySource = options.copySource,
        _a = options.intervalInMs,
        intervalInMs = _a === void 0 ? 15000 : _a,
        onProgress = options.onProgress,
        resumeFrom = options.resumeFrom,
        startCopyFromURLOptions = options.startCopyFromURLOptions;
    var state;

    if (resumeFrom) {
      state = JSON.parse(resumeFrom).state;
    }

    var operation = makeBlobBeginCopyFromURLPollOperation((0, _tslib.__assign)((0, _tslib.__assign)({}, state), {
      blobClient: blobClient,
      copySource: copySource,
      startCopyFromURLOptions: startCopyFromURLOptions
    }));
    _this = _super.call(this, operation) || this;

    if (typeof onProgress === "function") {
      _this.onProgress(onProgress);
    }

    _this.intervalInMs = intervalInMs;
    return _this;
  }

  BlobBeginCopyFromUrlPoller.prototype.delay = function () {
    return (0, _coreHttp.delay)(this.intervalInMs);
  };

  return BlobBeginCopyFromUrlPoller;
}(_coreLro.Poller);

exports.BlobBeginCopyFromUrlPoller = BlobBeginCopyFromUrlPoller;

/**
 * Note: Intentionally using function expression over arrow function expression
 * so that the function can be invoked with a different context.
 * This affects what `this` refers to.
 * @hidden
 */
var cancel = function cancel(options) {
  if (options === void 0) {
    options = {};
  }

  return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
    var state, copyId;
    return (0, _tslib.__generator)(this, function (_a) {
      switch (_a.label) {
        case 0:
          state = this.state;
          copyId = state.copyId;

          if (state.isCompleted) {
            return [2
            /*return*/
            , makeBlobBeginCopyFromURLPollOperation(state)];
          }

          if (!copyId) {
            state.isCancelled = true;
            return [2
            /*return*/
            , makeBlobBeginCopyFromURLPollOperation(state)];
          } // if abortCopyFromURL throws, it will bubble up to user's poller.cancelOperation call


          return [4
          /*yield*/
          , state.blobClient.abortCopyFromURL(copyId, {
            abortSignal: options.abortSignal
          })];

        case 1:
          // if abortCopyFromURL throws, it will bubble up to user's poller.cancelOperation call
          _a.sent();

          state.isCancelled = true;
          return [2
          /*return*/
          , makeBlobBeginCopyFromURLPollOperation(state)];
      }
    });
  });
};
/**
 * Note: Intentionally using function expression over arrow function expression
 * so that the function can be invoked with a different context.
 * This affects what `this` refers to.
 * @hidden
 */


var update = function update(options) {
  if (options === void 0) {
    options = {};
  }

  return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
    var state, blobClient, copySource, startCopyFromURLOptions, result, result, copyStatus, copyProgress, prevCopyProgress, err_1;
    return (0, _tslib.__generator)(this, function (_a) {
      switch (_a.label) {
        case 0:
          state = this.state;
          blobClient = state.blobClient, copySource = state.copySource, startCopyFromURLOptions = state.startCopyFromURLOptions;
          if (!!state.isStarted) return [3
          /*break*/
          , 2];
          state.isStarted = true;
          return [4
          /*yield*/
          , blobClient.startCopyFromURL(copySource, startCopyFromURLOptions)];

        case 1:
          result = _a.sent(); // copyId is needed to abort

          state.copyId = result.copyId;

          if (result.copyStatus === "success") {
            state.result = result;
            state.isCompleted = true;
          }

          return [3
          /*break*/
          , 6];

        case 2:
          if (!!state.isCompleted) return [3
          /*break*/
          , 6];
          _a.label = 3;

        case 3:
          _a.trys.push([3, 5,, 6]);

          return [4
          /*yield*/
          , state.blobClient.getProperties({
            abortSignal: options.abortSignal
          })];

        case 4:
          result = _a.sent();
          copyStatus = result.copyStatus, copyProgress = result.copyProgress;
          prevCopyProgress = state.copyProgress;

          if (copyProgress) {
            state.copyProgress = copyProgress;
          }

          if (copyStatus === "pending" && copyProgress !== prevCopyProgress && typeof options.fireProgress === "function") {
            // trigger in setTimeout, or swallow error?
            options.fireProgress(state);
          } else if (copyStatus === "success") {
            state.result = result;
            state.isCompleted = true;
          } else if (copyStatus === "failed") {
            state.error = new Error("Blob copy failed with reason: \"" + (result.copyStatusDescription || "unknown") + "\"");
            state.isCompleted = true;
          }

          return [3
          /*break*/
          , 6];

        case 5:
          err_1 = _a.sent();
          state.error = err_1;
          state.isCompleted = true;
          return [3
          /*break*/
          , 6];

        case 6:
          return [2
          /*return*/
          , makeBlobBeginCopyFromURLPollOperation(state)];
      }
    });
  });
};
/**
 * Note: Intentionally using function expression over arrow function expression
 * so that the function can be invoked with a different context.
 * This affects what `this` refers to.
 * @hidden
 */


var toString = function toString() {
  return JSON.stringify({
    state: this.state
  }, function (key, value) {
    // remove blobClient from serialized state since a client can't be hydrated from this info.
    if (key === "blobClient") {
      return undefined;
    }

    return value;
  });
};
/**
 * Creates a poll operation given the provided state.
 * @hidden
 */


function makeBlobBeginCopyFromURLPollOperation(state) {
  return {
    state: (0, _tslib.__assign)({}, state),
    cancel: cancel,
    toString: toString,
    update: update
  };
}
},{"tslib":"node_modules/tslib/tslib.es6.js","@azure/core-http":"node_modules/@azure/core-http/es/src/coreHttp.js","@azure/core-lro":"node_modules/@azure/core-lro/dist-esm/src/index.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Range.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rangeToString = rangeToString;

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Generate a range string. For example:
 *
 * "bytes=255-" or "bytes=0-511"
 *
 * @param iRange -
 */
function rangeToString(iRange) {
  if (iRange.offset < 0) {
    throw new RangeError("Range.offset cannot be smaller than 0.");
  }

  if (iRange.count && iRange.count <= 0) {
    throw new RangeError("Range.count must be larger than 0. Leave it undefined if you want a range from offset to the end.");
  }

  return iRange.count ? "bytes=" + iRange.offset + "-" + (iRange.offset + iRange.count - 1) : "bytes=" + iRange.offset + "-";
}
},{}],"../../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/events/events.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
  return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;

if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};

function EventEmitter() {
  EventEmitter.init.call(this);
}

module.exports = EventEmitter;
module.exports.once = once; // Backwards-compat with node 0.10.x

EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.

var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function () {
    return defaultMaxListeners;
  },
  set: function (arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }

    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function () {
  if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}; // Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.


EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }

  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];

  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);

  var doError = type === 'error';
  var events = this._events;
  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false; // If there is no 'error' event listener then throw.

  if (doError) {
    var er;
    if (args.length > 0) er = args[0];

    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    } // At least give some kind of context to the user


    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];
  if (handler === undefined) return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);

    for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;
  checkListener(listener);
  events = target._events;

  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object

      events = target._events;
    }

    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener]; // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    } // Check for listener leak


    m = _getMaxListeners(target);

    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true; // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax

      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0) return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = {
    fired: false,
    wrapFn: undefined,
    target: target,
    type: type,
    listener: listener
  };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  checkListener(listener);
  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
}; // Emits a 'removeListener' event if and only if the listener was removed.


EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;
  checkListener(listener);
  events = this._events;
  if (events === undefined) return this;
  list = events[type];
  if (list === undefined) return this;

  if (list === listener || list.listener === listener) {
    if (--this._eventsCount === 0) this._events = Object.create(null);else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;

    for (i = list.length - 1; i >= 0; i--) {
      if (list[i] === listener || list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }

    if (position < 0) return this;
    if (position === 0) list.shift();else {
      spliceOne(list, position);
    }
    if (list.length === 1) events[type] = list[0];
    if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
  }

  return this;
};

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events, i;
  events = this._events;
  if (events === undefined) return this; // not listening for removeListener, no need to emit

  if (events.removeListener === undefined) {
    if (arguments.length === 0) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    } else if (events[type] !== undefined) {
      if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
    }

    return this;
  } // emit removeListener for all listeners on all events


  if (arguments.length === 0) {
    var keys = Object.keys(events);
    var key;

    for (i = 0; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }

    this.removeAllListeners('removeListener');
    this._events = Object.create(null);
    this._eventsCount = 0;
    return this;
  }

  listeners = events[type];

  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners !== undefined) {
    // LIFO order
    for (i = listeners.length - 1; i >= 0; i--) {
      this.removeListener(type, listeners[i]);
    }
  }

  return this;
};

function _listeners(target, type, unwrap) {
  var events = target._events;
  if (events === undefined) return [];
  var evlistener = events[type];
  if (evlistener === undefined) return [];
  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;

function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);

  for (var i = 0; i < n; ++i) copy[i] = arr[i];

  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++) list[index] = list[index + 1];

  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);

  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }

  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }

      resolve([].slice.call(arguments));
    }

    ;
    eventTargetAgnosticAddListener(emitter, name, resolver, {
      once: true
    });

    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, {
        once: true
      });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }

      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Batch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Batch = void 0;

var _tslib = require("tslib");

var _events = require("events");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// In browser, during webpack or browserify bundling, this module will be replaced by 'events'
// https://github.com/Gozala/events

/**
 * States for Batch.
 */
var BatchStates;

(function (BatchStates) {
  BatchStates[BatchStates["Good"] = 0] = "Good";
  BatchStates[BatchStates["Error"] = 1] = "Error";
})(BatchStates || (BatchStates = {}));
/**
 * Batch provides basic parallel execution with concurrency limits.
 * Will stop execute left operations when one of the executed operation throws an error.
 * But Batch cannot cancel ongoing operations, you need to cancel them by yourself.
 */


var Batch =
/** @class */
function () {
  /**
   * Creates an instance of Batch.
   * @param concurrency -
   */
  function Batch(concurrency) {
    if (concurrency === void 0) {
      concurrency = 5;
    }
    /**
     * Number of active operations under execution.
     */


    this.actives = 0;
    /**
     * Number of completed operations under execution.
     */

    this.completed = 0;
    /**
     * Offset of next operation to be executed.
     */

    this.offset = 0;
    /**
     * Operation array to be executed.
     */

    this.operations = [];
    /**
     * States of Batch. When an error happens, state will turn into error.
     * Batch will stop execute left operations.
     */

    this.state = BatchStates.Good;

    if (concurrency < 1) {
      throw new RangeError("concurrency must be larger than 0");
    }

    this.concurrency = concurrency;
    this.emitter = new _events.EventEmitter();
  }
  /**
   * Add a operation into queue.
   *
   * @param operation -
   */


  Batch.prototype.addOperation = function (operation) {
    var _this = this;

    this.operations.push(function () {
      return (0, _tslib.__awaiter)(_this, void 0, void 0, function () {
        var error_1;
        return (0, _tslib.__generator)(this, function (_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2,, 3]);

              this.actives++;
              return [4
              /*yield*/
              , operation()];

            case 1:
              _a.sent();

              this.actives--;
              this.completed++;
              this.parallelExecute();
              return [3
              /*break*/
              , 3];

            case 2:
              error_1 = _a.sent();
              this.emitter.emit("error", error_1);
              return [3
              /*break*/
              , 3];

            case 3:
              return [2
              /*return*/
              ];
          }
        });
      });
    });
  };
  /**
   * Start execute operations in the queue.
   *
   */


  Batch.prototype.do = function () {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _this = this;

      return (0, _tslib.__generator)(this, function (_a) {
        if (this.operations.length === 0) {
          return [2
          /*return*/
          , Promise.resolve()];
        }

        this.parallelExecute();
        return [2
        /*return*/
        , new Promise(function (resolve, reject) {
          _this.emitter.on("finish", resolve);

          _this.emitter.on("error", function (error) {
            _this.state = BatchStates.Error;
            reject(error);
          });
        })];
      });
    });
  };
  /**
   * Get next operation to be executed. Return null when reaching ends.
   *
   */


  Batch.prototype.nextOperation = function () {
    if (this.offset < this.operations.length) {
      return this.operations[this.offset++];
    }

    return null;
  };
  /**
   * Start execute operations. One one the most important difference between
   * this method with do() is that do() wraps as an sync method.
   *
   */


  Batch.prototype.parallelExecute = function () {
    if (this.state === BatchStates.Error) {
      return;
    }

    if (this.completed >= this.operations.length) {
      this.emitter.emit("finish");
      return;
    }

    while (this.actives < this.concurrency) {
      var operation = this.nextOperation();

      if (operation) {
        operation();
      } else {
        return;
      }
    }
  };

  return Batch;
}();

exports.Batch = Batch;
},{"tslib":"node_modules/tslib/tslib.es6.js","events":"../../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/events/events.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-common/src/BufferScheduler.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BufferScheduler = void 0;

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// This file is used as a shim of "BufferScheduler" for some browser bundlers
// when trying to bundle "BufferScheduler"
// "BufferScheduler" class is only available in Node.js runtime
var BufferScheduler =
/** @class */
function () {
  function BufferScheduler() {}

  return BufferScheduler;
}();

exports.BufferScheduler = BufferScheduler;
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-common/src/index.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _BufferScheduler = require("./BufferScheduler.browser");

Object.keys(_BufferScheduler).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _BufferScheduler[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _BufferScheduler[key];
    }
  });
});
},{"./BufferScheduler.browser":"node_modules/@azure/storage-blob/dist-esm/storage-common/src/BufferScheduler.browser.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.blobToArrayBuffer = blobToArrayBuffer;
exports.blobToString = blobToString;
exports.streamToBuffer = streamToBuffer;
exports.streamToBuffer2 = streamToBuffer2;
exports.readStreamToLocalFile = readStreamToLocalFile;
exports.fsCreateReadStream = exports.fsStat = void 0;

var _tslib = require("tslib");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Convert a Browser Blob object into ArrayBuffer.
 *
 * @param blob -
 */
function blobToArrayBuffer(blob) {
  return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
    var fileReader;
    return (0, _tslib.__generator)(this, function (_a) {
      fileReader = new FileReader();
      return [2
      /*return*/
      , new Promise(function (resolve, reject) {
        fileReader.onloadend = function (ev) {
          resolve(ev.target.result);
        };

        fileReader.onerror = reject;
        fileReader.readAsArrayBuffer(blob);
      })];
    });
  });
}
/**
 * Convert a Browser Blob object into string.
 *
 * @param blob -
 */


function blobToString(blob) {
  return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
    var fileReader;
    return (0, _tslib.__generator)(this, function (_a) {
      fileReader = new FileReader();
      return [2
      /*return*/
      , new Promise(function (resolve, reject) {
        fileReader.onloadend = function (ev) {
          resolve(ev.target.result);
        };

        fileReader.onerror = reject;
        fileReader.readAsText(blob);
      })];
    });
  });
}

function streamToBuffer() {}

function streamToBuffer2() {}

function readStreamToLocalFile() {}

var fsStat = function stat() {};

exports.fsStat = fsStat;

var fsCreateReadStream = function createReadStream() {};

exports.fsCreateReadStream = fsCreateReadStream;
},{"tslib":"node_modules/tslib/tslib.es6.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PageBlobClient = exports.BlockBlobClient = exports.AppendBlobClient = exports.BlobClient = void 0;

var _tslib = require("tslib");

var _coreHttp = require("@azure/core-http");

var _api = require("@opentelemetry/api");

var _BlobDownloadResponse = require("./BlobDownloadResponse");

var _BlobQueryResponse = require("./BlobQueryResponse");

var _AnonymousCredential = require("./credentials/AnonymousCredential");

var _StorageSharedKeyCredential = require("./credentials/StorageSharedKeyCredential");

var _operations = require("./generated/src/operations");

var _models = require("./models");

var _PageBlobRangeResponse = require("./PageBlobRangeResponse");

var _Pipeline = require("./Pipeline");

var _BlobStartCopyFromUrlPoller = require("./pollers/BlobStartCopyFromUrlPoller");

var _Range = require("./Range");

var _StorageClient = require("./StorageClient");

var _Batch = require("./utils/Batch");

var _src = require("../../storage-common/src");

var _constants = require("./utils/constants");

var _tracing = require("./utils/tracing");

var _utils = require("./utils/utils.common");

var _utils2 = require("./utils/utils.node");

var _BlobSASSignatureValues = require("./sas/BlobSASSignatureValues");

var _BlobLeaseClient = require("./BlobLeaseClient");

/**
 * A BlobClient represents a URL to an Azure Storage blob; the blob may be a block blob,
 * append blob, or page blob.
 */
var BlobClient =
/** @class */
function (_super) {
  (0, _tslib.__extends)(BlobClient, _super);

  function BlobClient(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {
    var _a;

    var _this = this;

    options = options || {};
    var pipeline;
    var url;

    if (credentialOrPipelineOrContainerName instanceof _Pipeline.Pipeline) {
      // (url: string, pipeline: Pipeline)
      url = urlOrConnectionString;
      pipeline = credentialOrPipelineOrContainerName;
    } else if (_coreHttp.isNode && credentialOrPipelineOrContainerName instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof _AnonymousCredential.AnonymousCredential || (0, _coreHttp.isTokenCredential)(credentialOrPipelineOrContainerName)) {
      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
      url = urlOrConnectionString;
      options = blobNameOrOptions;
      pipeline = (0, _Pipeline.newPipeline)(credentialOrPipelineOrContainerName, options);
    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
      // The second parameter is undefined. Use anonymous credential.
      url = urlOrConnectionString;
      pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string" && blobNameOrOptions && typeof blobNameOrOptions === "string") {
      // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)
      var containerName = credentialOrPipelineOrContainerName;
      var blobName = blobNameOrOptions;
      var extractedCreds = (0, _utils.extractConnectionStringParts)(urlOrConnectionString);

      if (extractedCreds.kind === "AccountConnString") {
        if (_coreHttp.isNode) {
          var sharedKeyCredential = new _StorageSharedKeyCredential.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
          url = (0, _utils.appendToURLPath)((0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));
          options.proxyOptions = (0, _coreHttp.getDefaultProxySettings)(extractedCreds.proxyUri);
          pipeline = (0, _Pipeline.newPipeline)(sharedKeyCredential, options);
        } else {
          throw new Error("Account connection string is only supported in Node.js environment");
        }
      } else if (extractedCreds.kind === "SASConnString") {
        url = (0, _utils.appendToURLPath)((0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas;
        pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
      } else {
        throw new Error("Connection string must be either an Account connection string or a SAS connection string");
      }
    } else {
      throw new Error("Expecting non-empty strings for containerName and blobName parameters");
    }

    _this = _super.call(this, url, pipeline) || this;
    _a = _this.getBlobAndContainerNamesFromUrl(), _this._name = _a.blobName, _this._containerName = _a.containerName;
    _this.blobContext = new _operations.Blob(_this.storageClientContext);
    _this._snapshot = (0, _utils.getURLParameter)(_this.url, _constants.URLConstants.Parameters.SNAPSHOT);
    _this._versionId = (0, _utils.getURLParameter)(_this.url, _constants.URLConstants.Parameters.VERSIONID);
    return _this;
  }

  Object.defineProperty(BlobClient.prototype, "name", {
    /**
     * The name of the blob.
     */
    get: function () {
      return this._name;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BlobClient.prototype, "containerName", {
    /**
     * The name of the storage container the blob is associated with.
     */
    get: function () {
      return this._containerName;
    },
    enumerable: false,
    configurable: true
  });
  /**
   * Creates a new BlobClient object identical to the source but with the specified snapshot timestamp.
   * Provide "" will remove the snapshot and return a Client to the base blob.
   *
   * @param snapshot - The snapshot timestamp.
   * @returns A new BlobClient object identical to the source but with the specified snapshot timestamp
   */

  BlobClient.prototype.withSnapshot = function (snapshot) {
    return new BlobClient((0, _utils.setURLParameter)(this.url, _constants.URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);
  };
  /**
   * Creates a new BlobClient object pointing to a version of this blob.
   * Provide "" will remove the versionId and return a Client to the base blob.
   *
   * @param versionId - The versionId.
   * @returns A new BlobClient object pointing to the version of this blob.
   */


  BlobClient.prototype.withVersion = function (versionId) {
    return new BlobClient((0, _utils.setURLParameter)(this.url, _constants.URLConstants.Parameters.VERSIONID, versionId.length === 0 ? undefined : versionId), this.pipeline);
  };
  /**
   * Creates a AppendBlobClient object.
   *
   */


  BlobClient.prototype.getAppendBlobClient = function () {
    return new AppendBlobClient(this.url, this.pipeline);
  };
  /**
   * Creates a BlockBlobClient object.
   *
   */


  BlobClient.prototype.getBlockBlobClient = function () {
    return new BlockBlobClient(this.url, this.pipeline);
  };
  /**
   * Creates a PageBlobClient object.
   *
   */


  BlobClient.prototype.getPageBlobClient = function () {
    return new PageBlobClient(this.url, this.pipeline);
  };
  /**
   * Reads or downloads a blob from the system, including its metadata and properties.
   * You can also call Get Blob to read a snapshot.
   *
   * * In Node.js, data returns in a Readable stream readableStreamBody
   * * In browsers, data returns in a promise blobBody
   *
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob
   *
   * @param offset - From which position of the blob to download, greater than or equal to 0
   * @param count - How much data to be downloaded, greater than 0. Will download to the end when undefined
   * @param options - Optional options to Blob Download operation.
   *
   *
   * Example usage (Node.js):
   *
   * ```js
   * // Download and convert a blob to a string
   * const downloadBlockBlobResponse = await blobClient.download();
   * const downloaded = await streamToBuffer(downloadBlockBlobResponse.readableStreamBody);
   * console.log("Downloaded blob content:", downloaded.toString());
   *
   * async function streamToBuffer(readableStream) {
   * return new Promise((resolve, reject) => {
   * const chunks = [];
   * readableStream.on("data", (data) => {
   * chunks.push(data instanceof Buffer ? data : Buffer.from(data));
   * });
   * readableStream.on("end", () => {
   * resolve(Buffer.concat(chunks));
   * });
   * readableStream.on("error", reject);
   * });
   * }
   * ```
   *
   * Example usage (browser):
   *
   * ```js
   * // Download and convert a blob to a string
   * const downloadBlockBlobResponse = await blobClient.download();
   * const downloaded = await blobToString(await downloadBlockBlobResponse.blobBody);
   * console.log(
   *   "Downloaded blob content",
   *   downloaded
   * );
   *
   * async function blobToString(blob: Blob): Promise<string> {
   *   const fileReader = new FileReader();
   *   return new Promise<string>((resolve, reject) => {
   *     fileReader.onloadend = (ev: any) => {
   *       resolve(ev.target!.result);
   *     };
   *     fileReader.onerror = reject;
   *     fileReader.readAsText(blob);
   *   });
   * }
   * ```
   */


  BlobClient.prototype.download = function (offset, count, options) {
    var _a;

    if (offset === void 0) {
      offset = 0;
    }

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, res_1, wrappedRes, e_1;

      var _this = this;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            options.conditions = options.conditions || {};
            options.conditions = options.conditions || {};
            (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
            _b = (0, _tracing.createSpan)("BlobClient-download", options), span = _b.span, updatedOptions = _b.updatedOptions;
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.blobContext.download((0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              leaseAccessConditions: options.conditions,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
              }),
              onDownloadProgress: _coreHttp.isNode ? undefined : options.onProgress,
              range: offset === 0 && !count ? undefined : (0, _Range.rangeToString)({
                offset: offset,
                count: count
              }),
              rangeGetContentMD5: options.rangeGetContentMD5,
              rangeGetContentCRC64: options.rangeGetContentCrc64,
              snapshot: options.snapshot,
              cpkInfo: options.customerProvidedKey
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            res_1 = _c.sent();
            wrappedRes = (0, _tslib.__assign)((0, _tslib.__assign)({}, res_1), {
              _response: res_1._response,
              objectReplicationDestinationPolicyId: res_1.objectReplicationPolicyId,
              objectReplicationSourceProperties: (0, _utils.parseObjectReplicationRecord)(res_1.objectReplicationRules)
            }); // Return browser response immediately

            if (!_coreHttp.isNode) {
              return [2
              /*return*/
              , wrappedRes];
            } // We support retrying when download stream unexpected ends in Node.js runtime
            // Following code shouldn't be bundled into browser build, however some
            // bundlers may try to bundle following code and "FileReadResponse.ts".
            // In this case, "FileDownloadResponse.browser.ts" will be used as a shim of "FileDownloadResponse.ts"
            // The config is in package.json "browser" field


            if (options.maxRetryRequests === undefined || options.maxRetryRequests < 0) {
              // TODO: Default value or make it a required parameter?
              options.maxRetryRequests = _constants.DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS;
            }

            if (res_1.contentLength === undefined) {
              throw new RangeError("File download response doesn't contain valid content length header");
            }

            if (!res_1.etag) {
              throw new RangeError("File download response doesn't contain valid etag header");
            }

            return [2
            /*return*/
            , new _BlobDownloadResponse.BlobDownloadResponse(wrappedRes, function (start) {
              return (0, _tslib.__awaiter)(_this, void 0, void 0, function () {
                var updatedOptions;

                var _a;

                return (0, _tslib.__generator)(this, function (_b) {
                  switch (_b.label) {
                    case 0:
                      updatedOptions = {
                        leaseAccessConditions: options.conditions,
                        modifiedAccessConditions: {
                          ifMatch: options.conditions.ifMatch || res_1.etag,
                          ifModifiedSince: options.conditions.ifModifiedSince,
                          ifNoneMatch: options.conditions.ifNoneMatch,
                          ifUnmodifiedSince: options.conditions.ifUnmodifiedSince,
                          ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
                        },
                        range: (0, _Range.rangeToString)({
                          count: offset + res_1.contentLength - start,
                          offset: start
                        }),
                        rangeGetContentMD5: options.rangeGetContentMD5,
                        rangeGetContentCRC64: options.rangeGetContentCrc64,
                        snapshot: options.snapshot,
                        cpkInfo: options.customerProvidedKey
                      };
                      return [4
                      /*yield*/
                      , this.blobContext.download((0, _tslib.__assign)({
                        abortSignal: options.abortSignal
                      }, updatedOptions))];

                    case 1:
                      // Debug purpose only
                      // console.log(
                      //   `Read from internal stream, range: ${
                      //     updatedOptions.range
                      //   }, options: ${JSON.stringify(updatedOptions)}`
                      // );
                      return [2
                      /*return*/
                      , _b.sent().readableStreamBody];
                  }
                });
              });
            }, offset, res_1.contentLength, {
              maxRetryRequests: options.maxRetryRequests,
              onProgress: options.onProgress
            })];

          case 3:
            e_1 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_1.message
            });
            throw e_1;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Returns true if the Azure blob resource represented by this client exists; false otherwise.
   *
   * NOTE: use this function with care since an existing blob might be deleted by other clients or
   * applications. Vice versa new blobs might be added by other clients or applications after this
   * function completes.
   *
   * @param options - options to Exists operation.
   */


  BlobClient.prototype.exists = function (options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, e_2;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = (0, _tracing.createSpan)("BlobClient-exists", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 3, 4, 5]);

            (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
            return [4
            /*yield*/
            , this.getProperties({
              abortSignal: options.abortSignal,
              customerProvidedKey: options.customerProvidedKey,
              conditions: options.conditions,
              tracingOptions: updatedOptions.tracingOptions
            })];

          case 2:
            _b.sent();

            return [2
            /*return*/
            , true];

          case 3:
            e_2 = _b.sent();

            if (e_2.statusCode === 404) {
              span.setStatus({
                code: _api.CanonicalCode.NOT_FOUND,
                message: "Expected exception when checking blob existence"
              });
              return [2
              /*return*/
              , false];
            }

            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_2.message
            });
            throw e_2;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Returns all user-defined metadata, standard HTTP properties, and system properties
   * for the blob. It does not return the content of the blob.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties
   *
   * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if
   * they originally contained uppercase characters. This differs from the metadata keys returned by
   * the methods of {@link ContainerClient} that list blobs using the `includeMetadata` option, which
   * will retain their original casing.
   *
   * @param options - Optional options to Get Properties operation.
   */


  BlobClient.prototype.getProperties = function (options) {
    var _a;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, res, e_3;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            _b = (0, _tracing.createSpan)("BlobClient-getProperties", options), span = _b.span, updatedOptions = _b.updatedOptions;
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            options.conditions = options.conditions || {};
            (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
            return [4
            /*yield*/
            , this.blobContext.getProperties((0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              leaseAccessConditions: options.conditions,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
              }),
              cpkInfo: options.customerProvidedKey
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            res = _c.sent();
            return [2
            /*return*/
            , (0, _tslib.__assign)((0, _tslib.__assign)({}, res), {
              _response: res._response,
              objectReplicationDestinationPolicyId: res.objectReplicationPolicyId,
              objectReplicationSourceProperties: (0, _utils.parseObjectReplicationRecord)(res.objectReplicationRules)
            })];

          case 3:
            e_3 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_3.message
            });
            throw e_3;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Marks the specified blob or snapshot for deletion. The blob is later deleted
   * during garbage collection. Note that in order to delete a blob, you must delete
   * all of its snapshots. You can delete both at the same time with the Delete
   * Blob operation.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob
   *
   * @param options - Optional options to Blob Delete operation.
   */


  BlobClient.prototype.delete = function (options) {
    var _a;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, e_4;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            _b = (0, _tracing.createSpan)("BlobClient-delete", options), span = _b.span, updatedOptions = _b.updatedOptions;
            options.conditions = options.conditions || {};
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.blobContext.deleteMethod((0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              deleteSnapshots: options.deleteSnapshots,
              leaseAccessConditions: options.conditions,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
              })
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _c.sent()];

          case 3:
            e_4 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_4.message
            });
            throw e_4;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Marks the specified blob or snapshot for deletion if it exists. The blob is later deleted
   * during garbage collection. Note that in order to delete a blob, you must delete
   * all of its snapshots. You can delete both at the same time with the Delete
   * Blob operation.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob
   *
   * @param options - Optional options to Blob Delete operation.
   */


  BlobClient.prototype.deleteIfExists = function (options) {
    var _a, _b;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _c, span, updatedOptions, res, e_5;

      return (0, _tslib.__generator)(this, function (_d) {
        switch (_d.label) {
          case 0:
            _c = (0, _tracing.createSpan)("BlobClient-deleteIfExists", options), span = _c.span, updatedOptions = _c.updatedOptions;
            _d.label = 1;

          case 1:
            _d.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.delete(updatedOptions)];

          case 2:
            res = _d.sent();
            return [2
            /*return*/
            , (0, _tslib.__assign)((0, _tslib.__assign)({
              succeeded: true
            }, res), {
              _response: res._response // _response is made non-enumerable

            })];

          case 3:
            e_5 = _d.sent();

            if (((_a = e_5.details) === null || _a === void 0 ? void 0 : _a.errorCode) === "BlobNotFound") {
              span.setStatus({
                code: _api.CanonicalCode.NOT_FOUND,
                message: "Expected exception when deleting a blob or snapshot only if it exists."
              });
              return [2
              /*return*/
              , (0, _tslib.__assign)((0, _tslib.__assign)({
                succeeded: false
              }, (_b = e_5.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), {
                _response: e_5.response
              })];
            }

            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_5.message
            });
            throw e_5;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Restores the contents and metadata of soft deleted blob and any associated
   * soft deleted snapshots. Undelete Blob is supported only on version 2017-07-29
   * or later.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/undelete-blob
   *
   * @param options - Optional options to Blob Undelete operation.
   */


  BlobClient.prototype.undelete = function (options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, e_6;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = (0, _tracing.createSpan)("BlobClient-undelete", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.blobContext.undelete((0, _tslib.__assign)({
              abortSignal: options.abortSignal
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _b.sent()];

          case 3:
            e_6 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_6.message
            });
            throw e_6;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Sets system properties on the blob.
   *
   * If no value provided, or no value provided for the specified blob HTTP headers,
   * these blob HTTP headers without a value will be cleared.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties
   *
   * @param blobHTTPHeaders - If no value provided, or no value provided for
   *                                                   the specified blob HTTP headers, these blob HTTP
   *                                                   headers without a value will be cleared.
   * @param options - Optional options to Blob Set HTTP Headers operation.
   */


  BlobClient.prototype.setHTTPHeaders = function (blobHTTPHeaders, options) {
    var _a;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, e_7;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            _b = (0, _tracing.createSpan)("BlobClient-setHTTPHeaders", options), span = _b.span, updatedOptions = _b.updatedOptions;
            options.conditions = options.conditions || {};
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
            return [4
            /*yield*/
            , this.blobContext.setHTTPHeaders((0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              blobHTTPHeaders: blobHTTPHeaders,
              leaseAccessConditions: options.conditions,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
              }),
              cpkInfo: options.customerProvidedKey
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _c.sent()];

          case 3:
            e_7 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_7.message
            });
            throw e_7;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Sets user-defined metadata for the specified blob as one or more name-value pairs.
   *
   * If no option provided, or no metadata defined in the parameter, the blob
   * metadata will be removed.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-metadata
   *
   * @param metadata - Replace existing metadata with this value.
   *                               If no value provided the existing metadata will be removed.
   * @param options - Optional options to Set Metadata operation.
   */


  BlobClient.prototype.setMetadata = function (metadata, options) {
    var _a;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, e_8;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            _b = (0, _tracing.createSpan)("BlobClient-setMetadata", options), span = _b.span, updatedOptions = _b.updatedOptions;
            options.conditions = options.conditions || {};
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
            return [4
            /*yield*/
            , this.blobContext.setMetadata((0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              leaseAccessConditions: options.conditions,
              metadata: metadata,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
              }),
              cpkInfo: options.customerProvidedKey,
              encryptionScope: options.encryptionScope
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _c.sent()];

          case 3:
            e_8 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_8.message
            });
            throw e_8;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Sets tags on the underlying blob.
   * A blob can have up to 10 tags. Tag keys must be between 1 and 128 characters.  Tag values must be between 0 and 256 characters.
   * Valid tag key and value characters include lower and upper case letters, digits (0-9),
   * space (' '), plus ('+'), minus ('-'), period ('.'), foward slash ('/'), colon (':'), equals ('='), and underscore ('_').
   *
   * @param tags -
   * @param options -
   */


  BlobClient.prototype.setTags = function (tags, options) {
    var _a;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, e_9;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            _b = (0, _tracing.createSpan)("BlobClient-setTags", options), span = _b.span, updatedOptions = _b.updatedOptions;
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.blobContext.setTags((0, _tslib.__assign)((0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              leaseAccessConditions: options.conditions,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
              })
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)), {
              tags: (0, _utils.toBlobTags)(tags)
            }))];

          case 2:
            return [2
            /*return*/
            , _c.sent()];

          case 3:
            e_9 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_9.message
            });
            throw e_9;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Gets the tags associated with the underlying blob.
   *
   * @param options -
   */


  BlobClient.prototype.getTags = function (options) {
    var _a;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, response, wrappedResponse, e_10;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            _b = (0, _tracing.createSpan)("BlobClient-getTags", options), span = _b.span, updatedOptions = _b.updatedOptions;
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.blobContext.getTags((0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              leaseAccessConditions: options.conditions,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
              })
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            response = _c.sent();
            wrappedResponse = (0, _tslib.__assign)((0, _tslib.__assign)({}, response), {
              _response: response._response,
              tags: (0, _utils.toTags)({
                blobTagSet: response.blobTagSet
              }) || {}
            });
            return [2
            /*return*/
            , wrappedResponse];

          case 3:
            e_10 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_10.message
            });
            throw e_10;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Get a {@link BlobLeaseClient} that manages leases on the blob.
   *
   * @param proposeLeaseId - Initial proposed lease Id.
   * @returns A new BlobLeaseClient object for managing leases on the blob.
   */


  BlobClient.prototype.getBlobLeaseClient = function (proposeLeaseId) {
    return new _BlobLeaseClient.BlobLeaseClient(this, proposeLeaseId);
  };
  /**
   * Creates a read-only snapshot of a blob.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/snapshot-blob
   *
   * @param options - Optional options to the Blob Create Snapshot operation.
   */


  BlobClient.prototype.createSnapshot = function (options) {
    var _a;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, e_11;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            _b = (0, _tracing.createSpan)("BlobClient-createSnapshot", options), span = _b.span, updatedOptions = _b.updatedOptions;
            options.conditions = options.conditions || {};
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
            return [4
            /*yield*/
            , this.blobContext.createSnapshot((0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              leaseAccessConditions: options.conditions,
              metadata: options.metadata,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
              }),
              cpkInfo: options.customerProvidedKey,
              encryptionScope: options.encryptionScope
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _c.sent()];

          case 3:
            e_11 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_11.message
            });
            throw e_11;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Asynchronously copies a blob to a destination within the storage account.
   * This method returns a long running operation poller that allows you to wait
   * indefinitely until the copy is completed.
   * You can also cancel a copy before it is completed by calling `cancelOperation` on the poller.
   * Note that the onProgress callback will not be invoked if the operation completes in the first
   * request, and attempting to cancel a completed copy will result in an error being thrown.
   *
   * In version 2012-02-12 and later, the source for a Copy Blob operation can be
   * a committed blob in any Azure storage account.
   * Beginning with version 2015-02-21, the source for a Copy Blob operation can be
   * an Azure file in any Azure storage account.
   * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob
   * operation to copy from another storage account.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob
   *
   * Example using automatic polling:
   *
   * ```js
   * const copyPoller = await blobClient.beginCopyFromURL('url');
   * const result = await copyPoller.pollUntilDone();
   * ```
   *
   * Example using manual polling:
   *
   * ```js
   * const copyPoller = await blobClient.beginCopyFromURL('url');
   * while (!poller.isDone()) {
   *    await poller.poll();
   * }
   * const result = copyPoller.getResult();
   * ```
   *
   * Example using progress updates:
   *
   * ```js
   * const copyPoller = await blobClient.beginCopyFromURL('url', {
   *   onProgress(state) {
   *     console.log(`Progress: ${state.copyProgress}`);
   *   }
   * });
   * const result = await copyPoller.pollUntilDone();
   * ```
   *
   * Example using a changing polling interval (default 15 seconds):
   *
   * ```js
   * const copyPoller = await blobClient.beginCopyFromURL('url', {
   *   intervalInMs: 1000 // poll blob every 1 second for copy progress
   * });
   * const result = await copyPoller.pollUntilDone();
   * ```
   *
   * Example using copy cancellation:
   *
   * ```js
   * const copyPoller = await blobClient.beginCopyFromURL('url');
   * // cancel operation after starting it.
   * try {
   *   await copyPoller.cancelOperation();
   *   // calls to get the result now throw PollerCancelledError
   *   await copyPoller.getResult();
   * } catch (err) {
   *   if (err.name === 'PollerCancelledError') {
   *     console.log('The copy was cancelled.');
   *   }
   * }
   * ```
   *
   * @param copySource - url to the source Azure Blob/File.
   * @param options - Optional options to the Blob Start Copy From URL operation.
   */


  BlobClient.prototype.beginCopyFromURL = function (copySource, options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var client, poller;

      var _this = this;

      return (0, _tslib.__generator)(this, function (_a) {
        switch (_a.label) {
          case 0:
            client = {
              abortCopyFromURL: function () {
                var args = [];

                for (var _i = 0; _i < arguments.length; _i++) {
                  args[_i] = arguments[_i];
                }

                return _this.abortCopyFromURL.apply(_this, args);
              },
              getProperties: function () {
                var args = [];

                for (var _i = 0; _i < arguments.length; _i++) {
                  args[_i] = arguments[_i];
                }

                return _this.getProperties.apply(_this, args);
              },
              startCopyFromURL: function () {
                var args = [];

                for (var _i = 0; _i < arguments.length; _i++) {
                  args[_i] = arguments[_i];
                }

                return _this.startCopyFromURL.apply(_this, args);
              }
            };
            poller = new _BlobStartCopyFromUrlPoller.BlobBeginCopyFromUrlPoller({
              blobClient: client,
              copySource: copySource,
              intervalInMs: options.intervalInMs,
              onProgress: options.onProgress,
              resumeFrom: options.resumeFrom,
              startCopyFromURLOptions: options
            }); // Trigger the startCopyFromURL call by calling poll.
            // Any errors from this method should be surfaced to the user.

            return [4
            /*yield*/
            , poller.poll()];

          case 1:
            // Trigger the startCopyFromURL call by calling poll.
            // Any errors from this method should be surfaced to the user.
            _a.sent();

            return [2
            /*return*/
            , poller];
        }
      });
    });
  };
  /**
   * Aborts a pending asynchronous Copy Blob operation, and leaves a destination blob with zero
   * length and full metadata. Version 2012-02-12 and newer.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-blob
   *
   * @param copyId - Id of the Copy From URL operation.
   * @param options - Optional options to the Blob Abort Copy From URL operation.
   */


  BlobClient.prototype.abortCopyFromURL = function (copyId, options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, e_12;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = (0, _tracing.createSpan)("BlobClient-abortCopyFromURL", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.blobContext.abortCopyFromURL(copyId, (0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              leaseAccessConditions: options.conditions
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _b.sent()];

          case 3:
            e_12 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_12.message
            });
            throw e_12;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * The synchronous Copy From URL operation copies a blob or an internet resource to a new blob. It will not
   * return a response until the copy is complete.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob-from-url
   *
   * @param copySource - The source URL to copy from, Shared Access Signature(SAS) maybe needed for authentication
   * @param options -
   */


  BlobClient.prototype.syncCopyFromURL = function (copySource, options) {
    var _a;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, e_13;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            _b = (0, _tracing.createSpan)("BlobClient-syncCopyFromURL", options), span = _b.span, updatedOptions = _b.updatedOptions;
            options.conditions = options.conditions || {};
            options.sourceConditions = options.sourceConditions || {};
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.blobContext.copyFromURL(copySource, (0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              metadata: options.metadata,
              leaseAccessConditions: options.conditions,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
              }),
              sourceModifiedAccessConditions: {
                sourceIfMatch: options.sourceConditions.ifMatch,
                sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,
                sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,
                sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince
              },
              sourceContentMD5: options.sourceContentMD5,
              blobTagsString: (0, _utils.toBlobTagsString)(options.tags)
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _c.sent()];

          case 3:
            e_13 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_13.message
            });
            throw e_13;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Sets the tier on a blob. The operation is allowed on a page blob in a premium
   * storage account and on a block blob in a blob storage account (locally redundant
   * storage only). A premium page blob's tier determines the allowed size, IOPS,
   * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive
   * storage type. This operation does not update the blob's ETag.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier
   *
   * @param tier - The tier to be set on the blob. Valid values are Hot, Cool, or Archive.
   * @param options - Optional options to the Blob Set Tier operation.
   */


  BlobClient.prototype.setAccessTier = function (tier, options) {
    var _a;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, e_14;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            _b = (0, _tracing.createSpan)("BlobClient-setAccessTier", options), span = _b.span, updatedOptions = _b.updatedOptions;
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.blobContext.setTier((0, _models.toAccessTier)(tier), (0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              leaseAccessConditions: options.conditions,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
              }),
              rehydratePriority: options.rehydratePriority
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _c.sent()];

          case 3:
            e_14 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_14.message
            });
            throw e_14;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  BlobClient.prototype.downloadToBuffer = function (param1, param2, param3, param4) {
    if (param4 === void 0) {
      param4 = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var buffer, offset, count, options, _a, span, updatedOptions, response, transferProgress_1, batch, _loop_1, off, e_15;

      var _this = this;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            offset = 0;
            count = 0;
            options = param4;

            if (param1 instanceof Buffer) {
              buffer = param1;
              offset = param2 || 0;
              count = typeof param3 === "number" ? param3 : 0;
            } else {
              offset = typeof param1 === "number" ? param1 : 0;
              count = typeof param2 === "number" ? param2 : 0;
              options = param3 || {};
            }

            _a = (0, _tracing.createSpan)("BlobClient-downloadToBuffer", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 5, 6, 7]);

            if (!options.blockSize) {
              options.blockSize = 0;
            }

            if (options.blockSize < 0) {
              throw new RangeError("blockSize option must be >= 0");
            }

            if (options.blockSize === 0) {
              options.blockSize = _constants.DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;
            }

            if (offset < 0) {
              throw new RangeError("offset option must be >= 0");
            }

            if (count && count <= 0) {
              throw new RangeError("count option must be greater than 0");
            }

            if (!options.conditions) {
              options.conditions = {};
            }

            if (!!count) return [3
            /*break*/
            , 3];
            return [4
            /*yield*/
            , this.getProperties((0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
              tracingOptions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.tracingOptions), (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions))
            }))];

          case 2:
            response = _b.sent();
            count = response.contentLength - offset;

            if (count < 0) {
              throw new RangeError("offset " + offset + " shouldn't be larger than blob size " + response.contentLength);
            }

            _b.label = 3;

          case 3:
            // Allocate the buffer of size = count if the buffer is not provided
            if (!buffer) {
              try {
                buffer = Buffer.alloc(count);
              } catch (error) {
                throw new Error("Unable to allocate the buffer of size: " + count + "(in bytes). Please try passing your own buffer to the \"downloadToBuffer\" method or try using other methods like \"download\" or \"downloadToFile\".\t " + error.message);
              }
            }

            if (buffer.length < count) {
              throw new RangeError("The buffer's size should be equal to or larger than the request count of bytes: " + count);
            }

            transferProgress_1 = 0;
            batch = new _Batch.Batch(options.concurrency);

            _loop_1 = function (off) {
              batch.addOperation(function () {
                return (0, _tslib.__awaiter)(_this, void 0, void 0, function () {
                  var chunkEnd, response, stream;
                  return (0, _tslib.__generator)(this, function (_a) {
                    switch (_a.label) {
                      case 0:
                        chunkEnd = offset + count;

                        if (off + options.blockSize < chunkEnd) {
                          chunkEnd = off + options.blockSize;
                        }

                        return [4
                        /*yield*/
                        , this.download(off, chunkEnd - off, {
                          abortSignal: options.abortSignal,
                          conditions: options.conditions,
                          maxRetryRequests: options.maxRetryRequestsPerBlock,
                          customerProvidedKey: options.customerProvidedKey,
                          tracingOptions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.tracingOptions), (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions))
                        })];

                      case 1:
                        response = _a.sent();
                        stream = response.readableStreamBody;
                        return [4
                        /*yield*/
                        , (0, _utils2.streamToBuffer)(stream, buffer, off - offset, chunkEnd - offset)];

                      case 2:
                        _a.sent(); // Update progress after block is downloaded, in case of block trying
                        // Could provide finer grained progress updating inside HTTP requests,
                        // only if convenience layer download try is enabled


                        transferProgress_1 += chunkEnd - off;

                        if (options.onProgress) {
                          options.onProgress({
                            loadedBytes: transferProgress_1
                          });
                        }

                        return [2
                        /*return*/
                        ];
                    }
                  });
                });
              });
            };

            for (off = offset; off < offset + count; off = off + options.blockSize) {
              _loop_1(off);
            }

            return [4
            /*yield*/
            , batch.do()];

          case 4:
            _b.sent();

            return [2
            /*return*/
            , buffer];

          case 5:
            e_15 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_15.message
            });
            throw e_15;

          case 6:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 7:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * ONLY AVAILABLE IN NODE.JS RUNTIME.
   *
   * Downloads an Azure Blob to a local file.
   * Fails if the the given file path already exits.
   * Offset and count are optional, pass 0 and undefined respectively to download the entire blob.
   *
   * @param filePath -
   * @param offset - From which position of the block blob to download.
   * @param count - How much data to be downloaded. Will download to the end when passing undefined.
   * @param options - Options to Blob download options.
   * @returns The response data for blob download operation,
   *                                                 but with readableStreamBody set to undefined since its
   *                                                 content is already read and written into a local file
   *                                                 at the specified path.
   */


  BlobClient.prototype.downloadToFile = function (filePath, offset, count, options) {
    if (offset === void 0) {
      offset = 0;
    }

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, response, e_16;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = (0, _tracing.createSpan)("BlobClient-downloadToFile", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 5, 6, 7]);

            return [4
            /*yield*/
            , this.download(offset, count, (0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
              tracingOptions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.tracingOptions), (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions))
            }))];

          case 2:
            response = _b.sent();
            if (!response.readableStreamBody) return [3
            /*break*/
            , 4];
            return [4
            /*yield*/
            , (0, _utils2.readStreamToLocalFile)(response.readableStreamBody, filePath)];

          case 3:
            _b.sent();

            _b.label = 4;

          case 4:
            // The stream is no longer accessible so setting it to undefined.
            response.blobDownloadStream = undefined;
            return [2
            /*return*/
            , response];

          case 5:
            e_16 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_16.message
            });
            throw e_16;

          case 6:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 7:
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  BlobClient.prototype.getBlobAndContainerNamesFromUrl = function () {
    var containerName;
    var blobName;

    try {
      //  URL may look like the following
      // "https://myaccount.blob.core.windows.net/mycontainer/blob?sasString";
      // "https://myaccount.blob.core.windows.net/mycontainer/blob";
      // "https://myaccount.blob.core.windows.net/mycontainer/blob/a.txt?sasString";
      // "https://myaccount.blob.core.windows.net/mycontainer/blob/a.txt";
      // IPv4/IPv6 address hosts, Endpoints - `http://127.0.0.1:10000/devstoreaccount1/containername/blob`
      // http://localhost:10001/devstoreaccount1/containername/blob
      var parsedUrl = _coreHttp.URLBuilder.parse(this.url);

      if (parsedUrl.getHost().split(".")[1] === "blob") {
        // "https://myaccount.blob.core.windows.net/containername/blob".
        // .getPath() -> /containername/blob
        var pathComponents = parsedUrl.getPath().match("/([^/]*)(/(.*))?");
        containerName = pathComponents[1];
        blobName = pathComponents[3];
      } else if ((0, _utils.isIpEndpointStyle)(parsedUrl)) {
        // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/containername/blob
        // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/containername/blob
        // .getPath() -> /devstoreaccount1/containername/blob
        var pathComponents = parsedUrl.getPath().match("/([^/]*)/([^/]*)(/(.*))?");
        containerName = pathComponents[2];
        blobName = pathComponents[4];
      } else {
        // "https://customdomain.com/containername/blob".
        // .getPath() -> /containername/blob
        var pathComponents = parsedUrl.getPath().match("/([^/]*)(/(.*))?");
        containerName = pathComponents[1];
        blobName = pathComponents[3];
      } // decode the encoded blobName, containerName - to get all the special characters that might be present in them


      containerName = decodeURIComponent(containerName);
      blobName = decodeURIComponent(blobName); // Azure Storage Server will replace "\" with "/" in the blob names
      //   doing the same in the SDK side so that the user doesn't have to replace "\" instances in the blobName

      blobName = blobName.replace(/\\/g, "/");

      if (!containerName) {
        throw new Error("Provided containerName is invalid.");
      }

      return {
        blobName: blobName,
        containerName: containerName
      };
    } catch (error) {
      throw new Error("Unable to extract blobName and containerName with provided information.");
    }
  };
  /**
   * Asynchronously copies a blob to a destination within the storage account.
   * In version 2012-02-12 and later, the source for a Copy Blob operation can be
   * a committed blob in any Azure storage account.
   * Beginning with version 2015-02-21, the source for a Copy Blob operation can be
   * an Azure file in any Azure storage account.
   * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob
   * operation to copy from another storage account.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob
   *
   * @param copySource - url to the source Azure Blob/File.
   * @param options - Optional options to the Blob Start Copy From URL operation.
   */


  BlobClient.prototype.startCopyFromURL = function (copySource, options) {
    var _a;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, e_17;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            _b = (0, _tracing.createSpan)("BlobClient-startCopyFromURL", options), span = _b.span, updatedOptions = _b.updatedOptions;
            options.conditions = options.conditions || {};
            options.sourceConditions = options.sourceConditions || {};
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.blobContext.startCopyFromURL(copySource, (0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              leaseAccessConditions: options.conditions,
              metadata: options.metadata,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
              }),
              sourceModifiedAccessConditions: {
                sourceIfMatch: options.sourceConditions.ifMatch,
                sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,
                sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,
                sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince,
                sourceIfTags: options.sourceConditions.tagConditions
              },
              rehydratePriority: options.rehydratePriority,
              tier: (0, _models.toAccessTier)(options.tier),
              blobTagsString: (0, _utils.toBlobTagsString)(options.tags),
              sealBlob: options.sealBlob
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _c.sent()];

          case 3:
            e_17 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_17.message
            });
            throw e_17;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Only available for BlobClient constructed with a shared key credential.
   *
   * Generates a Blob Service Shared Access Signature (SAS) URI based on the client properties
   * and parameters passed in. The SAS is signed by the shared key credential of the client.
   *
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
   *
   * @param options - Optional parameters.
   * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
   */


  BlobClient.prototype.generateSasUrl = function (options) {
    var _this = this;

    return new Promise(function (resolve) {
      if (!(_this.credential instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential)) {
        throw new RangeError("Can only generate the SAS when the client is initialized with a shared key credential");
      }

      var sas = (0, _BlobSASSignatureValues.generateBlobSASQueryParameters)((0, _tslib.__assign)({
        containerName: _this._containerName,
        blobName: _this._name,
        snapshotTime: _this._snapshot,
        versionId: _this._versionId
      }, options), _this.credential).toString();
      resolve((0, _utils.appendToURLQuery)(_this.url, sas));
    });
  };

  return BlobClient;
}(_StorageClient.StorageClient);

exports.BlobClient = BlobClient;

/**
 * AppendBlobClient defines a set of operations applicable to append blobs.
 */
var AppendBlobClient =
/** @class */
function (_super) {
  (0, _tslib.__extends)(AppendBlobClient, _super);

  function AppendBlobClient(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {
    var _this = this; // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.
    //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);


    var pipeline;
    var url;
    options = options || {};

    if (credentialOrPipelineOrContainerName instanceof _Pipeline.Pipeline) {
      // (url: string, pipeline: Pipeline)
      url = urlOrConnectionString;
      pipeline = credentialOrPipelineOrContainerName;
    } else if (_coreHttp.isNode && credentialOrPipelineOrContainerName instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof _AnonymousCredential.AnonymousCredential || (0, _coreHttp.isTokenCredential)(credentialOrPipelineOrContainerName)) {
      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)      url = urlOrConnectionString;
      url = urlOrConnectionString;
      options = blobNameOrOptions;
      pipeline = (0, _Pipeline.newPipeline)(credentialOrPipelineOrContainerName, options);
    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
      url = urlOrConnectionString; // The second parameter is undefined. Use anonymous credential.

      pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string" && blobNameOrOptions && typeof blobNameOrOptions === "string") {
      // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)
      var containerName = credentialOrPipelineOrContainerName;
      var blobName = blobNameOrOptions;
      var extractedCreds = (0, _utils.extractConnectionStringParts)(urlOrConnectionString);

      if (extractedCreds.kind === "AccountConnString") {
        if (_coreHttp.isNode) {
          var sharedKeyCredential = new _StorageSharedKeyCredential.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
          url = (0, _utils.appendToURLPath)((0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));
          options.proxyOptions = (0, _coreHttp.getDefaultProxySettings)(extractedCreds.proxyUri);
          pipeline = (0, _Pipeline.newPipeline)(sharedKeyCredential, options);
        } else {
          throw new Error("Account connection string is only supported in Node.js environment");
        }
      } else if (extractedCreds.kind === "SASConnString") {
        url = (0, _utils.appendToURLPath)((0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas;
        pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
      } else {
        throw new Error("Connection string must be either an Account connection string or a SAS connection string");
      }
    } else {
      throw new Error("Expecting non-empty strings for containerName and blobName parameters");
    }

    _this = _super.call(this, url, pipeline) || this;
    _this.appendBlobContext = new _operations.AppendBlob(_this.storageClientContext);
    return _this;
  }
  /**
   * Creates a new AppendBlobClient object identical to the source but with the
   * specified snapshot timestamp.
   * Provide "" will remove the snapshot and return a Client to the base blob.
   *
   * @param snapshot - The snapshot timestamp.
   * @returns A new AppendBlobClient object identical to the source but with the specified snapshot timestamp.
   */


  AppendBlobClient.prototype.withSnapshot = function (snapshot) {
    return new AppendBlobClient((0, _utils.setURLParameter)(this.url, _constants.URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);
  };
  /**
   * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.
   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
   *
   * @param options - Options to the Append Block Create operation.
   *
   *
   * Example usage:
   *
   * ```js
   * const appendBlobClient = containerClient.getAppendBlobClient("<blob name>");
   * await appendBlobClient.create();
   * ```
   */


  AppendBlobClient.prototype.create = function (options) {
    var _a;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, e_18;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            _b = (0, _tracing.createSpan)("AppendBlobClient-create", options), span = _b.span, updatedOptions = _b.updatedOptions;
            options.conditions = options.conditions || {};
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
            return [4
            /*yield*/
            , this.appendBlobContext.create(0, (0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              blobHTTPHeaders: options.blobHTTPHeaders,
              leaseAccessConditions: options.conditions,
              metadata: options.metadata,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
              }),
              cpkInfo: options.customerProvidedKey,
              encryptionScope: options.encryptionScope,
              blobTagsString: (0, _utils.toBlobTagsString)(options.tags)
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _c.sent()];

          case 3:
            e_18 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_18.message
            });
            throw e_18;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.
   * If the blob with the same name already exists, the content of the existing blob will remain unchanged.
   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
   *
   * @param options -
   */


  AppendBlobClient.prototype.createIfNotExists = function (options) {
    var _a, _b;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _c, span, updatedOptions, conditions, res, e_19;

      return (0, _tslib.__generator)(this, function (_d) {
        switch (_d.label) {
          case 0:
            _c = (0, _tracing.createSpan)("AppendBlobClient-createIfNotExists", options), span = _c.span, updatedOptions = _c.updatedOptions;
            conditions = {
              ifNoneMatch: _constants.ETagAny
            };
            _d.label = 1;

          case 1:
            _d.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.create((0, _tslib.__assign)((0, _tslib.__assign)({}, updatedOptions), {
              conditions: conditions
            }))];

          case 2:
            res = _d.sent();
            return [2
            /*return*/
            , (0, _tslib.__assign)((0, _tslib.__assign)({
              succeeded: true
            }, res), {
              _response: res._response // _response is made non-enumerable

            })];

          case 3:
            e_19 = _d.sent();

            if (((_a = e_19.details) === null || _a === void 0 ? void 0 : _a.errorCode) === "BlobAlreadyExists") {
              span.setStatus({
                code: _api.CanonicalCode.ALREADY_EXISTS,
                message: "Expected exception when creating a blob only if it does not already exist."
              });
              return [2
              /*return*/
              , (0, _tslib.__assign)((0, _tslib.__assign)({
                succeeded: false
              }, (_b = e_19.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), {
                _response: e_19.response
              })];
            }

            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_19.message
            });
            throw e_19;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Seals the append blob, making it read only.
   *
   * @param options -
   */


  AppendBlobClient.prototype.seal = function (options) {
    var _a;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, e_20;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            _b = (0, _tracing.createSpan)("AppendBlobClient-seal", options), span = _b.span, updatedOptions = _b.updatedOptions;
            options.conditions = options.conditions || {};
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.appendBlobContext.seal((0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              appendPositionAccessConditions: options.conditions,
              leaseAccessConditions: options.conditions,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
              })
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _c.sent()];

          case 3:
            e_20 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_20.message
            });
            throw e_20;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Commits a new block of data to the end of the existing append blob.
   * @see https://docs.microsoft.com/rest/api/storageservices/append-block
   *
   * @param body - Data to be appended.
   * @param contentLength - Length of the body in bytes.
   * @param options - Options to the Append Block operation.
   *
   *
   * Example usage:
   *
   * ```js
   * const content = "Hello World!";
   *
   * // Create a new append blob and append data to the blob.
   * const newAppendBlobClient = containerClient.getAppendBlobClient("<blob name>");
   * await newAppendBlobClient.create();
   * await newAppendBlobClient.appendBlock(content, content.length);
   *
   * // Append data to an existing append blob.
   * const existingAppendBlobClient = containerClient.getAppendBlobClient("<blob name>");
   * await existingAppendBlobClient.appendBlock(content, content.length);
   * ```
   */


  AppendBlobClient.prototype.appendBlock = function (body, contentLength, options) {
    var _a;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, e_21;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            _b = (0, _tracing.createSpan)("AppendBlobClient-appendBlock", options), span = _b.span, updatedOptions = _b.updatedOptions;
            options.conditions = options.conditions || {};
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
            return [4
            /*yield*/
            , this.appendBlobContext.appendBlock(body, contentLength, (0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              appendPositionAccessConditions: options.conditions,
              leaseAccessConditions: options.conditions,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
              }),
              onUploadProgress: options.onProgress,
              transactionalContentMD5: options.transactionalContentMD5,
              transactionalContentCrc64: options.transactionalContentCrc64,
              cpkInfo: options.customerProvidedKey,
              encryptionScope: options.encryptionScope
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _c.sent()];

          case 3:
            e_21 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_21.message
            });
            throw e_21;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * The Append Block operation commits a new block of data to the end of an existing append blob
   * where the contents are read from a source url.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/append-block-from-url
   *
   * @param sourceURL -
   *                 The url to the blob that will be the source of the copy. A source blob in the same storage account can
   *                 be authenticated via Shared Key. However, if the source is a blob in another account, the source blob
   *                 must either be public or must be authenticated via a shared access signature. If the source blob is
   *                 public, no authentication is required to perform the operation.
   * @param sourceOffset - Offset in source to be appended
   * @param count - Number of bytes to be appended as a block
   * @param options -
   */


  AppendBlobClient.prototype.appendBlockFromURL = function (sourceURL, sourceOffset, count, options) {
    var _a;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, e_22;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            _b = (0, _tracing.createSpan)("AppendBlobClient-appendBlockFromURL", options), span = _b.span, updatedOptions = _b.updatedOptions;
            options.conditions = options.conditions || {};
            options.sourceConditions = options.sourceConditions || {};
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
            return [4
            /*yield*/
            , this.appendBlobContext.appendBlockFromUrl(sourceURL, 0, (0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              sourceRange: (0, _Range.rangeToString)({
                offset: sourceOffset,
                count: count
              }),
              sourceContentMD5: options.sourceContentMD5,
              sourceContentCrc64: options.sourceContentCrc64,
              leaseAccessConditions: options.conditions,
              appendPositionAccessConditions: options.conditions,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
              }),
              sourceModifiedAccessConditions: {
                sourceIfMatch: options.sourceConditions.ifMatch,
                sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,
                sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,
                sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince
              },
              cpkInfo: options.customerProvidedKey,
              encryptionScope: options.encryptionScope
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _c.sent()];

          case 3:
            e_22 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_22.message
            });
            throw e_22;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  return AppendBlobClient;
}(BlobClient);

exports.AppendBlobClient = AppendBlobClient;

/**
 * BlockBlobClient defines a set of operations applicable to block blobs.
 */
var BlockBlobClient =
/** @class */
function (_super) {
  (0, _tslib.__extends)(BlockBlobClient, _super);

  function BlockBlobClient(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {
    var _this = this; // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.
    //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);


    var pipeline;
    var url;
    options = options || {};

    if (credentialOrPipelineOrContainerName instanceof _Pipeline.Pipeline) {
      // (url: string, pipeline: Pipeline)
      url = urlOrConnectionString;
      pipeline = credentialOrPipelineOrContainerName;
    } else if (_coreHttp.isNode && credentialOrPipelineOrContainerName instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof _AnonymousCredential.AnonymousCredential || (0, _coreHttp.isTokenCredential)(credentialOrPipelineOrContainerName)) {
      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
      url = urlOrConnectionString;
      options = blobNameOrOptions;
      pipeline = (0, _Pipeline.newPipeline)(credentialOrPipelineOrContainerName, options);
    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
      // The second parameter is undefined. Use anonymous credential.
      url = urlOrConnectionString;
      pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string" && blobNameOrOptions && typeof blobNameOrOptions === "string") {
      // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)
      var containerName = credentialOrPipelineOrContainerName;
      var blobName = blobNameOrOptions;
      var extractedCreds = (0, _utils.extractConnectionStringParts)(urlOrConnectionString);

      if (extractedCreds.kind === "AccountConnString") {
        if (_coreHttp.isNode) {
          var sharedKeyCredential = new _StorageSharedKeyCredential.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
          url = (0, _utils.appendToURLPath)((0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));
          options.proxyOptions = (0, _coreHttp.getDefaultProxySettings)(extractedCreds.proxyUri);
          pipeline = (0, _Pipeline.newPipeline)(sharedKeyCredential, options);
        } else {
          throw new Error("Account connection string is only supported in Node.js environment");
        }
      } else if (extractedCreds.kind === "SASConnString") {
        url = (0, _utils.appendToURLPath)((0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas;
        pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
      } else {
        throw new Error("Connection string must be either an Account connection string or a SAS connection string");
      }
    } else {
      throw new Error("Expecting non-empty strings for containerName and blobName parameters");
    }

    _this = _super.call(this, url, pipeline) || this;
    _this.blockBlobContext = new _operations.BlockBlob(_this.storageClientContext);
    _this._blobContext = new _operations.Blob(_this.storageClientContext);
    return _this;
  }
  /**
   * Creates a new BlockBlobClient object identical to the source but with the
   * specified snapshot timestamp.
   * Provide "" will remove the snapshot and return a URL to the base blob.
   *
   * @param snapshot - The snapshot timestamp.
   * @returns A new BlockBlobClient object identical to the source but with the specified snapshot timestamp.
   */


  BlockBlobClient.prototype.withSnapshot = function (snapshot) {
    return new BlockBlobClient((0, _utils.setURLParameter)(this.url, _constants.URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);
  };
  /**
   * ONLY AVAILABLE IN NODE.JS RUNTIME.
   *
   * Quick query for a JSON or CSV formatted blob.
   *
   * Example usage (Node.js):
   *
   * ```js
   * // Query and convert a blob to a string
   * const queryBlockBlobResponse = await blockBlobClient.query("select * from BlobStorage");
   * const downloaded = (await streamToBuffer(queryBlockBlobResponse.readableStreamBody)).toString();
   * console.log("Query blob content:", downloaded);
   *
   * async function streamToBuffer(readableStream) {
   *   return new Promise((resolve, reject) => {
   *     const chunks = [];
   *     readableStream.on("data", (data) => {
   *       chunks.push(data instanceof Buffer ? data : Buffer.from(data));
   *     });
   *     readableStream.on("end", () => {
   *       resolve(Buffer.concat(chunks));
   *     });
   *     readableStream.on("error", reject);
   *   });
   * }
   * ```
   *
   * @param query -
   * @param options -
   */


  BlockBlobClient.prototype.query = function (query, options) {
    var _a;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, response, e_23;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
            _b = (0, _tracing.createSpan)("BlockBlobClient-query", options), span = _b.span, updatedOptions = _b.updatedOptions;
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            if (!_coreHttp.isNode) {
              throw new Error("This operation currently is only supported in Node.js.");
            }

            return [4
            /*yield*/
            , this._blobContext.query((0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              queryRequest: {
                expression: query,
                inputSerialization: (0, _utils.toQuerySerialization)(options.inputTextConfiguration),
                outputSerialization: (0, _utils.toQuerySerialization)(options.outputTextConfiguration)
              },
              leaseAccessConditions: options.conditions,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
              })
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            response = _c.sent();
            return [2
            /*return*/
            , new _BlobQueryResponse.BlobQueryResponse(response, {
              abortSignal: options.abortSignal,
              onProgress: options.onProgress,
              onError: options.onError
            })];

          case 3:
            e_23 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_23.message
            });
            throw e_23;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new block blob, or updates the content of an existing block blob.
   * Updating an existing block blob overwrites any existing metadata on the blob.
   * Partial updates are not supported; the content of the existing blob is
   * overwritten with the new content. To perform a partial update of a block blob's,
   * use {@link stageBlock} and {@link commitBlockList}.
   *
   * This is a non-parallel uploading method, please use {@link uploadFile},
   * {@link uploadStream} or {@link uploadBrowserData} for better performance
   * with concurrency uploading.
   *
   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
   *
   * @param body - Blob, string, ArrayBuffer, ArrayBufferView or a function
   *                               which returns a new Readable stream whose offset is from data source beginning.
   * @param contentLength - Length of body in bytes. Use Buffer.byteLength() to calculate body length for a
   *                               string including non non-Base64/Hex-encoded characters.
   * @param options - Options to the Block Blob Upload operation.
   * @returns Response data for the Block Blob Upload operation.
   *
   * Example usage:
   *
   * ```js
   * const content = "Hello world!";
   * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);
   * ```
   */


  BlockBlobClient.prototype.upload = function (body, contentLength, options) {
    var _a;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, e_24;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            options.conditions = options.conditions || {};
            _b = (0, _tracing.createSpan)("BlockBlobClient-upload", options), span = _b.span, updatedOptions = _b.updatedOptions;
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
            return [4
            /*yield*/
            , this.blockBlobContext.upload(body, contentLength, (0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              blobHTTPHeaders: options.blobHTTPHeaders,
              leaseAccessConditions: options.conditions,
              metadata: options.metadata,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
              }),
              onUploadProgress: options.onProgress,
              cpkInfo: options.customerProvidedKey,
              encryptionScope: options.encryptionScope,
              tier: (0, _models.toAccessTier)(options.tier),
              blobTagsString: (0, _utils.toBlobTagsString)(options.tags)
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _c.sent()];

          case 3:
            e_24 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_24.message
            });
            throw e_24;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new Block Blob where the contents of the blob are read from a given URL.
   * This API is supported beginning with the 2020-04-08 version. Partial updates
   * are not supported with Put Blob from URL; the content of an existing blob is overwritten with
   * the content of the new blob.  To perform partial updates to a block blob’s contents using a
   * source URL, use {@link stageBlockFromURL} and {@link commitBlockList}.
   *
   * @param sourceURL - Specifies the URL of the blob. The value
   *                           may be a URL of up to 2 KB in length that specifies a blob.
   *                           The value should be URL-encoded as it would appear
   *                           in a request URI. The source blob must either be public
   *                           or must be authenticated via a shared access signature.
   *                           If the source blob is public, no authentication is required
   *                           to perform the operation. Here are some examples of source object URLs:
   *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob
   *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>
   * @param options - Optional parameters.
   */


  BlockBlobClient.prototype.syncUploadFromURL = function (sourceURL, options) {
    var _a, _b, _c, _d, _e;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _f, span, updatedOptions, e_25;

      return (0, _tslib.__generator)(this, function (_g) {
        switch (_g.label) {
          case 0:
            options.conditions = options.conditions || {};
            _f = (0, _tracing.createSpan)("BlockBlobClient-syncUploadFromURL", options), span = _f.span, updatedOptions = _f.updatedOptions;
            _g.label = 1;

          case 1:
            _g.trys.push([1, 3, 4, 5]);

            (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
            return [4
            /*yield*/
            , this.blockBlobContext.putBlobFromUrl(0, sourceURL, (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
              leaseAccessConditions: options.conditions,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: options.conditions.tagConditions
              }),
              sourceModifiedAccessConditions: {
                sourceIfMatch: (_a = options.sourceConditions) === null || _a === void 0 ? void 0 : _a.ifMatch,
                sourceIfModifiedSince: (_b = options.sourceConditions) === null || _b === void 0 ? void 0 : _b.ifModifiedSince,
                sourceIfNoneMatch: (_c = options.sourceConditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch,
                sourceIfUnmodifiedSince: (_d = options.sourceConditions) === null || _d === void 0 ? void 0 : _d.ifUnmodifiedSince,
                sourceIfTags: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.tagConditions
              },
              cpkInfo: options.customerProvidedKey,
              tier: (0, _models.toAccessTier)(options.tier),
              blobTagsString: (0, _utils.toBlobTagsString)(options.tags)
            }), (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _g.sent()];

          case 3:
            e_25 = _g.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_25.message
            });
            throw e_25;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Uploads the specified block to the block blob's "staging area" to be later
   * committed by a call to commitBlockList.
   * @see https://docs.microsoft.com/rest/api/storageservices/put-block
   *
   * @param blockId - A 64-byte value that is base64-encoded
   * @param body - Data to upload to the staging area.
   * @param contentLength - Number of bytes to upload.
   * @param options - Options to the Block Blob Stage Block operation.
   * @returns Response data for the Block Blob Stage Block operation.
   */


  BlockBlobClient.prototype.stageBlock = function (blockId, body, contentLength, options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, e_26;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = (0, _tracing.createSpan)("BlockBlobClient-stageBlock", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 3, 4, 5]);

            (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
            return [4
            /*yield*/
            , this.blockBlobContext.stageBlock(blockId, contentLength, body, (0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              leaseAccessConditions: options.conditions,
              onUploadProgress: options.onProgress,
              transactionalContentMD5: options.transactionalContentMD5,
              transactionalContentCrc64: options.transactionalContentCrc64,
              cpkInfo: options.customerProvidedKey,
              encryptionScope: options.encryptionScope
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _b.sent()];

          case 3:
            e_26 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_26.message
            });
            throw e_26;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * The Stage Block From URL operation creates a new block to be committed as part
   * of a blob where the contents are read from a URL.
   * This API is available starting in version 2018-03-28.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-from-url
   *
   * @param blockId - A 64-byte value that is base64-encoded
   * @param sourceURL - Specifies the URL of the blob. The value
   *                           may be a URL of up to 2 KB in length that specifies a blob.
   *                           The value should be URL-encoded as it would appear
   *                           in a request URI. The source blob must either be public
   *                           or must be authenticated via a shared access signature.
   *                           If the source blob is public, no authentication is required
   *                           to perform the operation. Here are some examples of source object URLs:
   *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob
   *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>
   * @param offset - From which position of the blob to download, greater than or equal to 0
   * @param count - How much data to be downloaded, greater than 0. Will download to the end when undefined
   * @param options - Options to the Block Blob Stage Block From URL operation.
   * @returns Response data for the Block Blob Stage Block From URL operation.
   */


  BlockBlobClient.prototype.stageBlockFromURL = function (blockId, sourceURL, offset, count, options) {
    if (offset === void 0) {
      offset = 0;
    }

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, e_27;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = (0, _tracing.createSpan)("BlockBlobClient-stageBlockFromURL", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 3, 4, 5]);

            (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
            return [4
            /*yield*/
            , this.blockBlobContext.stageBlockFromURL(blockId, 0, sourceURL, (0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              leaseAccessConditions: options.conditions,
              sourceContentMD5: options.sourceContentMD5,
              sourceContentCrc64: options.sourceContentCrc64,
              sourceRange: offset === 0 && !count ? undefined : (0, _Range.rangeToString)({
                offset: offset,
                count: count
              }),
              cpkInfo: options.customerProvidedKey,
              encryptionScope: options.encryptionScope
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _b.sent()];

          case 3:
            e_27 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_27.message
            });
            throw e_27;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Writes a blob by specifying the list of block IDs that make up the blob.
   * In order to be written as part of a blob, a block must have been successfully written
   * to the server in a prior {@link stageBlock} operation. You can call {@link commitBlockList} to
   * update a blob by uploading only those blocks that have changed, then committing the new and existing
   * blocks together. Any blocks not specified in the block list and permanently deleted.
   * @see https://docs.microsoft.com/rest/api/storageservices/put-block-list
   *
   * @param blocks -  Array of 64-byte value that is base64-encoded
   * @param options - Options to the Block Blob Commit Block List operation.
   * @returns Response data for the Block Blob Commit Block List operation.
   */


  BlockBlobClient.prototype.commitBlockList = function (blocks, options) {
    var _a;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, e_28;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            options.conditions = options.conditions || {};
            _b = (0, _tracing.createSpan)("BlockBlobClient-commitBlockList", options), span = _b.span, updatedOptions = _b.updatedOptions;
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
            return [4
            /*yield*/
            , this.blockBlobContext.commitBlockList({
              latest: blocks
            }, (0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              blobHTTPHeaders: options.blobHTTPHeaders,
              leaseAccessConditions: options.conditions,
              metadata: options.metadata,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
              }),
              cpkInfo: options.customerProvidedKey,
              encryptionScope: options.encryptionScope,
              tier: (0, _models.toAccessTier)(options.tier),
              blobTagsString: (0, _utils.toBlobTagsString)(options.tags)
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _c.sent()];

          case 3:
            e_28 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_28.message
            });
            throw e_28;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Returns the list of blocks that have been uploaded as part of a block blob
   * using the specified block list filter.
   * @see https://docs.microsoft.com/rest/api/storageservices/get-block-list
   *
   * @param listType - Specifies whether to return the list of committed blocks,
   *                                        the list of uncommitted blocks, or both lists together.
   * @param options - Options to the Block Blob Get Block List operation.
   * @returns Response data for the Block Blob Get Block List operation.
   */


  BlockBlobClient.prototype.getBlockList = function (listType, options) {
    var _a;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, res, e_29;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            _b = (0, _tracing.createSpan)("BlockBlobClient-getBlockList", options), span = _b.span, updatedOptions = _b.updatedOptions;
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.blockBlobContext.getBlockList(listType, (0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              leaseAccessConditions: options.conditions,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
              })
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            res = _c.sent();

            if (!res.committedBlocks) {
              res.committedBlocks = [];
            }

            if (!res.uncommittedBlocks) {
              res.uncommittedBlocks = [];
            }

            return [2
            /*return*/
            , res];

          case 3:
            e_29 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_29.message
            });
            throw e_29;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  }; // High level functions

  /**
   * Uploads a Buffer(Node.js)/Blob(browsers)/ArrayBuffer/ArrayBufferView object to a BlockBlob.
   *
   * When data length is no more than the specifiled {@link BlockBlobParallelUploadOptions.maxSingleShotSize} (default is
   * {@link BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}), this method will use 1 {@link upload} call to finish the upload.
   * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}
   * to commit the block list.
   *
   * @param data - Buffer(Node.js), Blob, ArrayBuffer or ArrayBufferView
   * @param options -
   */


  BlockBlobClient.prototype.uploadData = function (data, options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, buffer_1, browserBlob_1;

      return (0, _tslib.__generator)(this, function (_b) {
        _a = (0, _tracing.createSpan)("BlockBlobClient-uploadData", options), span = _a.span, updatedOptions = _a.updatedOptions;

        try {
          if (_coreHttp.isNode) {
            if (data instanceof Buffer) {
              buffer_1 = data;
            } else if (data instanceof ArrayBuffer) {
              buffer_1 = Buffer.from(data);
            } else {
              data = data;
              buffer_1 = Buffer.from(data.buffer, data.byteOffset, data.byteLength);
            }

            return [2
            /*return*/
            , this.uploadSeekableInternal(function (offset, size) {
              return buffer_1.slice(offset, offset + size);
            }, buffer_1.byteLength, updatedOptions)];
          } else {
            browserBlob_1 = new Blob([data]);
            return [2
            /*return*/
            , this.uploadSeekableInternal(function (offset, size) {
              return browserBlob_1.slice(offset, offset + size);
            }, browserBlob_1.size, updatedOptions)];
          }
        } catch (e) {
          span.setStatus({
            code: _api.CanonicalCode.UNKNOWN,
            message: e.message
          });
          throw e;
        } finally {
          span.end();
        }

        return [2
        /*return*/
        ];
      });
    });
  };
  /**
   * ONLY AVAILABLE IN BROWSERS.
   *
   * Uploads a browser Blob/File/ArrayBuffer/ArrayBufferView object to block blob.
   *
   * When buffer length lesser than or equal to 256MB, this method will use 1 upload call to finish the upload.
   * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call
   * {@link commitBlockList} to commit the block list.
   *
   * @deprecated Use {@link uploadData} instead.
   *
   * @param browserData - Blob, File, ArrayBuffer or ArrayBufferView
   * @param options - Options to upload browser data.
   * @returns Response data for the Blob Upload operation.
   */


  BlockBlobClient.prototype.uploadBrowserData = function (browserData, options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, browserBlob_2, e_30;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = (0, _tracing.createSpan)("BlockBlobClient-uploadBrowserData", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 3, 4, 5]);

            browserBlob_2 = new Blob([browserData]);
            return [4
            /*yield*/
            , this.uploadSeekableInternal(function (offset, size) {
              return browserBlob_2.slice(offset, offset + size);
            }, browserBlob_2.size, updatedOptions)];

          case 2:
            return [2
            /*return*/
            , _b.sent()];

          case 3:
            e_30 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_30.message
            });
            throw e_30;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   *
   * Uploads data to block blob. Requires a bodyFactory as the data source,
   * which need to return a {@link HttpRequestBody} object with the offset and size provided.
   *
   * When data length is no more than the specifiled {@link BlockBlobParallelUploadOptions.maxSingleShotSize} (default is
   * {@link BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}), this method will use 1 {@link upload} call to finish the upload.
   * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}
   * to commit the block list.
   *
   * @param bodyFactory -
   * @param size - size of the data to upload.
   * @param options - Options to Upload to Block Blob operation.
   * @returns Response data for the Blob Upload operation.
   */


  BlockBlobClient.prototype.uploadSeekableInternal = function (bodyFactory, size, options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, numBlocks_1, blockList_1, blockIDPrefix_1, transferProgress_2, batch, _loop_2, i, e_31;

      var _this = this;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!options.blockSize) {
              options.blockSize = 0;
            }

            if (options.blockSize < 0 || options.blockSize > _constants.BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES) {
              throw new RangeError("blockSize option must be >= 0 and <= " + _constants.BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES);
            }

            if (options.maxSingleShotSize !== 0 && !options.maxSingleShotSize) {
              options.maxSingleShotSize = _constants.BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES;
            }

            if (options.maxSingleShotSize < 0 || options.maxSingleShotSize > _constants.BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES) {
              throw new RangeError("maxSingleShotSize option must be >= 0 and <= " + _constants.BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES);
            }

            if (options.blockSize === 0) {
              if (size > _constants.BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES * _constants.BLOCK_BLOB_MAX_BLOCKS) {
                throw new RangeError(size + " is too larger to upload to a block blob.");
              }

              if (size > options.maxSingleShotSize) {
                options.blockSize = Math.ceil(size / _constants.BLOCK_BLOB_MAX_BLOCKS);

                if (options.blockSize < _constants.DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES) {
                  options.blockSize = _constants.DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;
                }
              }
            }

            if (!options.blobHTTPHeaders) {
              options.blobHTTPHeaders = {};
            }

            if (!options.conditions) {
              options.conditions = {};
            }

            _a = (0, _tracing.createSpan)("BlockBlobClient-uploadSeekableInternal", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 5, 6, 7]);

            if (!(size <= options.maxSingleShotSize)) return [3
            /*break*/
            , 3];
            return [4
            /*yield*/
            , this.upload(bodyFactory(0, size), size, updatedOptions)];

          case 2:
            return [2
            /*return*/
            , _b.sent()];

          case 3:
            numBlocks_1 = Math.floor((size - 1) / options.blockSize) + 1;

            if (numBlocks_1 > _constants.BLOCK_BLOB_MAX_BLOCKS) {
              throw new RangeError("The buffer's size is too big or the BlockSize is too small;" + ("the number of blocks must be <= " + _constants.BLOCK_BLOB_MAX_BLOCKS));
            }

            blockList_1 = [];
            blockIDPrefix_1 = (0, _coreHttp.generateUuid)();
            transferProgress_2 = 0;
            batch = new _Batch.Batch(options.concurrency);

            _loop_2 = function (i) {
              batch.addOperation(function () {
                return (0, _tslib.__awaiter)(_this, void 0, void 0, function () {
                  var blockID, start, end, contentLength;
                  return (0, _tslib.__generator)(this, function (_a) {
                    switch (_a.label) {
                      case 0:
                        blockID = (0, _utils.generateBlockID)(blockIDPrefix_1, i);
                        start = options.blockSize * i;
                        end = i === numBlocks_1 - 1 ? size : start + options.blockSize;
                        contentLength = end - start;
                        blockList_1.push(blockID);
                        return [4
                        /*yield*/
                        , this.stageBlock(blockID, bodyFactory(start, contentLength), contentLength, {
                          abortSignal: options.abortSignal,
                          conditions: options.conditions,
                          encryptionScope: options.encryptionScope,
                          tracingOptions: updatedOptions.tracingOptions
                        })];

                      case 1:
                        _a.sent(); // Update progress after block is successfully uploaded to server, in case of block trying
                        // TODO: Hook with convenience layer progress event in finer level


                        transferProgress_2 += contentLength;

                        if (options.onProgress) {
                          options.onProgress({
                            loadedBytes: transferProgress_2
                          });
                        }

                        return [2
                        /*return*/
                        ];
                    }
                  });
                });
              });
            };

            for (i = 0; i < numBlocks_1; i++) {
              _loop_2(i);
            }

            return [4
            /*yield*/
            , batch.do()];

          case 4:
            _b.sent();

            return [2
            /*return*/
            , this.commitBlockList(blockList_1, updatedOptions)];

          case 5:
            e_31 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_31.message
            });
            throw e_31;

          case 6:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 7:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * ONLY AVAILABLE IN NODE.JS RUNTIME.
   *
   * Uploads a local file in blocks to a block blob.
   *
   * When file size lesser than or equal to 256MB, this method will use 1 upload call to finish the upload.
   * Otherwise, this method will call stageBlock to upload blocks, and finally call commitBlockList
   * to commit the block list.
   *
   * @param filePath - Full path of local file
   * @param options - Options to Upload to Block Blob operation.
   * @returns Response data for the Blob Upload operation.
   */


  BlockBlobClient.prototype.uploadFile = function (filePath, options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, size, e_32;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = (0, _tracing.createSpan)("BlockBlobClient-uploadFile", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 4, 5, 6]);

            return [4
            /*yield*/
            , (0, _utils2.fsStat)(filePath)];

          case 2:
            size = _b.sent().size;
            return [4
            /*yield*/
            , this.uploadSeekableInternal(function (offset, count) {
              return function () {
                return (0, _utils2.fsCreateReadStream)(filePath, {
                  autoClose: true,
                  end: count ? offset + count - 1 : Infinity,
                  start: offset
                });
              };
            }, size, (0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
              tracingOptions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.tracingOptions), (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions))
            }))];

          case 3:
            return [2
            /*return*/
            , _b.sent()];

          case 4:
            e_32 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_32.message
            });
            throw e_32;

          case 5:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 6:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * ONLY AVAILABLE IN NODE.JS RUNTIME.
   *
   * Uploads a Node.js Readable stream into block blob.
   *
   * PERFORMANCE IMPROVEMENT TIPS:
   * * Input stream highWaterMark is better to set a same value with bufferSize
   *    parameter, which will avoid Buffer.concat() operations.
   *
   * @param stream - Node.js Readable stream
   * @param bufferSize - Size of every buffer allocated, also the block size in the uploaded block blob. Default value is 8MB
   * @param maxConcurrency -  Max concurrency indicates the max number of buffers that can be allocated,
   *                                 positive correlation with max uploading concurrency. Default value is 5
   * @param options - Options to Upload Stream to Block Blob operation.
   * @returns Response data for the Blob Upload operation.
   */


  BlockBlobClient.prototype.uploadStream = function (stream, bufferSize, maxConcurrency, options) {
    if (bufferSize === void 0) {
      bufferSize = _constants.DEFAULT_BLOCK_BUFFER_SIZE_BYTES;
    }

    if (maxConcurrency === void 0) {
      maxConcurrency = 5;
    }

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, blockNum_1, blockIDPrefix_2, transferProgress_3, blockList_2, scheduler, e_33;

      var _this = this;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!options.blobHTTPHeaders) {
              options.blobHTTPHeaders = {};
            }

            if (!options.conditions) {
              options.conditions = {};
            }

            _a = (0, _tracing.createSpan)("BlockBlobClient-uploadStream", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 4, 5, 6]);

            blockNum_1 = 0;
            blockIDPrefix_2 = (0, _coreHttp.generateUuid)();
            transferProgress_3 = 0;
            blockList_2 = [];
            scheduler = new _src.BufferScheduler(stream, bufferSize, maxConcurrency, function (body, length) {
              return (0, _tslib.__awaiter)(_this, void 0, void 0, function () {
                var blockID;
                return (0, _tslib.__generator)(this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      blockID = (0, _utils.generateBlockID)(blockIDPrefix_2, blockNum_1);
                      blockList_2.push(blockID);
                      blockNum_1++;
                      return [4
                      /*yield*/
                      , this.stageBlock(blockID, body, length, {
                        conditions: options.conditions,
                        encryptionScope: options.encryptionScope,
                        tracingOptions: updatedOptions.tracingOptions
                      })];

                    case 1:
                      _a.sent(); // Update progress after block is successfully uploaded to server, in case of block trying


                      transferProgress_3 += length;

                      if (options.onProgress) {
                        options.onProgress({
                          loadedBytes: transferProgress_3
                        });
                      }

                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            }, // concurrency should set a smaller value than maxConcurrency, which is helpful to
            // reduce the possibility when a outgoing handler waits for stream data, in
            // this situation, outgoing handlers are blocked.
            // Outgoing queue shouldn't be empty.
            Math.ceil(maxConcurrency / 4 * 3));
            return [4
            /*yield*/
            , scheduler.do()];

          case 2:
            _b.sent();

            return [4
            /*yield*/
            , this.commitBlockList(blockList_2, (0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
              tracingOptions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.tracingOptions), (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions))
            }))];

          case 3:
            return [2
            /*return*/
            , _b.sent()];

          case 4:
            e_33 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_33.message
            });
            throw e_33;

          case 5:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 6:
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  return BlockBlobClient;
}(BlobClient);

exports.BlockBlobClient = BlockBlobClient;

/**
 * PageBlobClient defines a set of operations applicable to page blobs.
 */
var PageBlobClient =
/** @class */
function (_super) {
  (0, _tslib.__extends)(PageBlobClient, _super);

  function PageBlobClient(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {
    var _this = this; // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.
    //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);


    var pipeline;
    var url;
    options = options || {};

    if (credentialOrPipelineOrContainerName instanceof _Pipeline.Pipeline) {
      // (url: string, pipeline: Pipeline)
      url = urlOrConnectionString;
      pipeline = credentialOrPipelineOrContainerName;
    } else if (_coreHttp.isNode && credentialOrPipelineOrContainerName instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof _AnonymousCredential.AnonymousCredential || (0, _coreHttp.isTokenCredential)(credentialOrPipelineOrContainerName)) {
      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
      url = urlOrConnectionString;
      options = blobNameOrOptions;
      pipeline = (0, _Pipeline.newPipeline)(credentialOrPipelineOrContainerName, options);
    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
      // The second parameter is undefined. Use anonymous credential.
      url = urlOrConnectionString;
      pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string" && blobNameOrOptions && typeof blobNameOrOptions === "string") {
      // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)
      var containerName = credentialOrPipelineOrContainerName;
      var blobName = blobNameOrOptions;
      var extractedCreds = (0, _utils.extractConnectionStringParts)(urlOrConnectionString);

      if (extractedCreds.kind === "AccountConnString") {
        if (_coreHttp.isNode) {
          var sharedKeyCredential = new _StorageSharedKeyCredential.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
          url = (0, _utils.appendToURLPath)((0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));
          options.proxyOptions = (0, _coreHttp.getDefaultProxySettings)(extractedCreds.proxyUri);
          pipeline = (0, _Pipeline.newPipeline)(sharedKeyCredential, options);
        } else {
          throw new Error("Account connection string is only supported in Node.js environment");
        }
      } else if (extractedCreds.kind === "SASConnString") {
        url = (0, _utils.appendToURLPath)((0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas;
        pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
      } else {
        throw new Error("Connection string must be either an Account connection string or a SAS connection string");
      }
    } else {
      throw new Error("Expecting non-empty strings for containerName and blobName parameters");
    }

    _this = _super.call(this, url, pipeline) || this;
    _this.pageBlobContext = new _operations.PageBlob(_this.storageClientContext);
    return _this;
  }
  /**
   * Creates a new PageBlobClient object identical to the source but with the
   * specified snapshot timestamp.
   * Provide "" will remove the snapshot and return a Client to the base blob.
   *
   * @param snapshot - The snapshot timestamp.
   * @returns A new PageBlobClient object identical to the source but with the specified snapshot timestamp.
   */


  PageBlobClient.prototype.withSnapshot = function (snapshot) {
    return new PageBlobClient((0, _utils.setURLParameter)(this.url, _constants.URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);
  };
  /**
   * Creates a page blob of the specified length. Call uploadPages to upload data
   * data to a page blob.
   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
   *
   * @param size - size of the page blob.
   * @param options - Options to the Page Blob Create operation.
   * @returns Response data for the Page Blob Create operation.
   */


  PageBlobClient.prototype.create = function (size, options) {
    var _a;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, e_34;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            options.conditions = options.conditions || {};
            _b = (0, _tracing.createSpan)("PageBlobClient-create", options), span = _b.span, updatedOptions = _b.updatedOptions;
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
            return [4
            /*yield*/
            , this.pageBlobContext.create(0, size, (0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              blobHTTPHeaders: options.blobHTTPHeaders,
              blobSequenceNumber: options.blobSequenceNumber,
              leaseAccessConditions: options.conditions,
              metadata: options.metadata,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
              }),
              cpkInfo: options.customerProvidedKey,
              encryptionScope: options.encryptionScope,
              tier: (0, _models.toAccessTier)(options.tier),
              blobTagsString: (0, _utils.toBlobTagsString)(options.tags)
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _c.sent()];

          case 3:
            e_34 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_34.message
            });
            throw e_34;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a page blob of the specified length. Call uploadPages to upload data
   * data to a page blob. If the blob with the same name already exists, the content
   * of the existing blob will remain unchanged.
   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
   *
   * @param size - size of the page blob.
   * @param options -
   */


  PageBlobClient.prototype.createIfNotExists = function (size, options) {
    var _a, _b;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _c, span, updatedOptions, conditions, res, e_35;

      return (0, _tslib.__generator)(this, function (_d) {
        switch (_d.label) {
          case 0:
            _c = (0, _tracing.createSpan)("PageBlobClient-createIfNotExists", options), span = _c.span, updatedOptions = _c.updatedOptions;
            _d.label = 1;

          case 1:
            _d.trys.push([1, 3, 4, 5]);

            conditions = {
              ifNoneMatch: _constants.ETagAny
            };
            return [4
            /*yield*/
            , this.create(size, (0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
              conditions: conditions,
              tracingOptions: updatedOptions.tracingOptions
            }))];

          case 2:
            res = _d.sent();
            return [2
            /*return*/
            , (0, _tslib.__assign)((0, _tslib.__assign)({
              succeeded: true
            }, res), {
              _response: res._response // _response is made non-enumerable

            })];

          case 3:
            e_35 = _d.sent();

            if (((_a = e_35.details) === null || _a === void 0 ? void 0 : _a.errorCode) === "BlobAlreadyExists") {
              span.setStatus({
                code: _api.CanonicalCode.ALREADY_EXISTS,
                message: "Expected exception when creating a blob only if it does not already exist."
              });
              return [2
              /*return*/
              , (0, _tslib.__assign)((0, _tslib.__assign)({
                succeeded: false
              }, (_b = e_35.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), {
                _response: e_35.response
              })];
            }

            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_35.message
            });
            throw e_35;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Writes 1 or more pages to the page blob. The start and end offsets must be a multiple of 512.
   * @see https://docs.microsoft.com/rest/api/storageservices/put-page
   *
   * @param body - Data to upload
   * @param offset - Offset of destination page blob
   * @param count - Content length of the body, also number of bytes to be uploaded
   * @param options - Options to the Page Blob Upload Pages operation.
   * @returns Response data for the Page Blob Upload Pages operation.
   */


  PageBlobClient.prototype.uploadPages = function (body, offset, count, options) {
    var _a;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, e_36;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            options.conditions = options.conditions || {};
            _b = (0, _tracing.createSpan)("PageBlobClient-uploadPages", options), span = _b.span, updatedOptions = _b.updatedOptions;
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
            return [4
            /*yield*/
            , this.pageBlobContext.uploadPages(body, count, (0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              leaseAccessConditions: options.conditions,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
              }),
              onUploadProgress: options.onProgress,
              range: (0, _Range.rangeToString)({
                offset: offset,
                count: count
              }),
              sequenceNumberAccessConditions: options.conditions,
              transactionalContentMD5: options.transactionalContentMD5,
              transactionalContentCrc64: options.transactionalContentCrc64,
              cpkInfo: options.customerProvidedKey,
              encryptionScope: options.encryptionScope
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _c.sent()];

          case 3:
            e_36 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_36.message
            });
            throw e_36;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * The Upload Pages operation writes a range of pages to a page blob where the
   * contents are read from a URL.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-page-from-url
   *
   * @param sourceURL - Specify a URL to the copy source, Shared Access Signature(SAS) maybe needed for authentication
   * @param sourceOffset - The source offset to copy from. Pass 0 to copy from the beginning of source page blob
   * @param destOffset - Offset of destination page blob
   * @param count - Number of bytes to be uploaded from source page blob
   * @param options -
   */


  PageBlobClient.prototype.uploadPagesFromURL = function (sourceURL, sourceOffset, destOffset, count, options) {
    var _a;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, e_37;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            options.conditions = options.conditions || {};
            options.sourceConditions = options.sourceConditions || {};
            _b = (0, _tracing.createSpan)("PageBlobClient-uploadPagesFromURL", options), span = _b.span, updatedOptions = _b.updatedOptions;
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            (0, _models.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);
            return [4
            /*yield*/
            , this.pageBlobContext.uploadPagesFromURL(sourceURL, (0, _Range.rangeToString)({
              offset: sourceOffset,
              count: count
            }), 0, (0, _Range.rangeToString)({
              offset: destOffset,
              count: count
            }), (0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              sourceContentMD5: options.sourceContentMD5,
              sourceContentCrc64: options.sourceContentCrc64,
              leaseAccessConditions: options.conditions,
              sequenceNumberAccessConditions: options.conditions,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
              }),
              sourceModifiedAccessConditions: {
                sourceIfMatch: options.sourceConditions.ifMatch,
                sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,
                sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,
                sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince
              },
              cpkInfo: options.customerProvidedKey,
              encryptionScope: options.encryptionScope
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _c.sent()];

          case 3:
            e_37 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_37.message
            });
            throw e_37;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Frees the specified pages from the page blob.
   * @see https://docs.microsoft.com/rest/api/storageservices/put-page
   *
   * @param offset - Starting byte position of the pages to clear.
   * @param count - Number of bytes to clear.
   * @param options - Options to the Page Blob Clear Pages operation.
   * @returns Response data for the Page Blob Clear Pages operation.
   */


  PageBlobClient.prototype.clearPages = function (offset, count, options) {
    var _a;

    if (offset === void 0) {
      offset = 0;
    }

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, e_38;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            options.conditions = options.conditions || {};
            _b = (0, _tracing.createSpan)("PageBlobClient-clearPages", options), span = _b.span, updatedOptions = _b.updatedOptions;
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.pageBlobContext.clearPages(0, (0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              leaseAccessConditions: options.conditions,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
              }),
              range: (0, _Range.rangeToString)({
                offset: offset,
                count: count
              }),
              sequenceNumberAccessConditions: options.conditions,
              cpkInfo: options.customerProvidedKey,
              encryptionScope: options.encryptionScope
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _c.sent()];

          case 3:
            e_38 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_38.message
            });
            throw e_38;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Returns the list of valid page ranges for a page blob or snapshot of a page blob.
   * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
   *
   * @param offset - Starting byte position of the page ranges.
   * @param count - Number of bytes to get.
   * @param options - Options to the Page Blob Get Ranges operation.
   * @returns Response data for the Page Blob Get Ranges operation.
   */


  PageBlobClient.prototype.getPageRanges = function (offset, count, options) {
    var _a;

    if (offset === void 0) {
      offset = 0;
    }

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, e_39;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            options.conditions = options.conditions || {};
            _b = (0, _tracing.createSpan)("PageBlobClient-getPageRanges", options), span = _b.span, updatedOptions = _b.updatedOptions;
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.pageBlobContext.getPageRanges((0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              leaseAccessConditions: options.conditions,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
              }),
              range: (0, _Range.rangeToString)({
                offset: offset,
                count: count
              })
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions))).then(_PageBlobRangeResponse.rangeResponseFromModel)];

          case 2:
            return [2
            /*return*/
            , _c.sent()];

          case 3:
            e_39 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_39.message
            });
            throw e_39;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Gets the collection of page ranges that differ between a specified snapshot and this page blob.
   * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
   *
   * @param offset - Starting byte position of the page blob
   * @param count - Number of bytes to get ranges diff.
   * @param prevSnapshot - Timestamp of snapshot to retrieve the difference.
   * @param options - Options to the Page Blob Get Page Ranges Diff operation.
   * @returns Response data for the Page Blob Get Page Range Diff operation.
   */


  PageBlobClient.prototype.getPageRangesDiff = function (offset, count, prevSnapshot, options) {
    var _a;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, e_40;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            options.conditions = options.conditions || {};
            _b = (0, _tracing.createSpan)("PageBlobClient-getPageRangesDiff", options), span = _b.span, updatedOptions = _b.updatedOptions;
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.pageBlobContext.getPageRangesDiff((0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              leaseAccessConditions: options.conditions,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
              }),
              prevsnapshot: prevSnapshot,
              range: (0, _Range.rangeToString)({
                offset: offset,
                count: count
              })
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions))).then(_PageBlobRangeResponse.rangeResponseFromModel)];

          case 2:
            return [2
            /*return*/
            , _c.sent()];

          case 3:
            e_40 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_40.message
            });
            throw e_40;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Gets the collection of page ranges that differ between a specified snapshot and this page blob for managed disks.
   * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
   *
   * @param offset - Starting byte position of the page blob
   * @param count - Number of bytes to get ranges diff.
   * @param prevSnapshotUrl - URL of snapshot to retrieve the difference.
   * @param options - Options to the Page Blob Get Page Ranges Diff operation.
   * @returns Response data for the Page Blob Get Page Range Diff operation.
   */


  PageBlobClient.prototype.getPageRangesDiffForManagedDisks = function (offset, count, prevSnapshotUrl, options) {
    var _a;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, e_41;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            options.conditions = options.conditions || {};
            _b = (0, _tracing.createSpan)("PageBlobClient-GetPageRangesDiffForManagedDisks", options), span = _b.span, updatedOptions = _b.updatedOptions;
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.pageBlobContext.getPageRangesDiff((0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              leaseAccessConditions: options.conditions,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
              }),
              prevSnapshotUrl: prevSnapshotUrl,
              range: (0, _Range.rangeToString)({
                offset: offset,
                count: count
              })
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions))).then(_PageBlobRangeResponse.rangeResponseFromModel)];

          case 2:
            return [2
            /*return*/
            , _c.sent()];

          case 3:
            e_41 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_41.message
            });
            throw e_41;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Resizes the page blob to the specified size (which must be a multiple of 512).
   * @see https://docs.microsoft.com/rest/api/storageservices/set-blob-properties
   *
   * @param size - Target size
   * @param options - Options to the Page Blob Resize operation.
   * @returns Response data for the Page Blob Resize operation.
   */


  PageBlobClient.prototype.resize = function (size, options) {
    var _a;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, e_42;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            options.conditions = options.conditions || {};
            _b = (0, _tracing.createSpan)("PageBlobClient-resize", options), span = _b.span, updatedOptions = _b.updatedOptions;
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.pageBlobContext.resize(size, (0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              leaseAccessConditions: options.conditions,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
              }),
              encryptionScope: options.encryptionScope
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _c.sent()];

          case 3:
            e_42 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_42.message
            });
            throw e_42;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Sets a page blob's sequence number.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties
   *
   * @param sequenceNumberAction - Indicates how the service should modify the blob's sequence number.
   * @param sequenceNumber - Required if sequenceNumberAction is max or update
   * @param options - Options to the Page Blob Update Sequence Number operation.
   * @returns Response data for the Page Blob Update Sequence Number operation.
   */


  PageBlobClient.prototype.updateSequenceNumber = function (sequenceNumberAction, sequenceNumber, options) {
    var _a;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, e_43;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            options.conditions = options.conditions || {};
            _b = (0, _tracing.createSpan)("PageBlobClient-updateSequenceNumber", options), span = _b.span, updatedOptions = _b.updatedOptions;
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.pageBlobContext.updateSequenceNumber(sequenceNumberAction, (0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              blobSequenceNumber: sequenceNumber,
              leaseAccessConditions: options.conditions,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
              })
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _c.sent()];

          case 3:
            e_43 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_43.message
            });
            throw e_43;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Begins an operation to start an incremental copy from one page blob's snapshot to this page blob.
   * The snapshot is copied such that only the differential changes between the previously
   * copied snapshot are transferred to the destination.
   * The copied snapshots are complete copies of the original snapshot and can be read or copied from as usual.
   * @see https://docs.microsoft.com/rest/api/storageservices/incremental-copy-blob
   * @see https://docs.microsoft.com/en-us/azure/virtual-machines/windows/incremental-snapshots
   *
   * @param copySource - Specifies the name of the source page blob snapshot. For example,
   *                            https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>
   * @param options - Options to the Page Blob Copy Incremental operation.
   * @returns Response data for the Page Blob Copy Incremental operation.
   */


  PageBlobClient.prototype.startCopyIncremental = function (copySource, options) {
    var _a;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, e_44;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            _b = (0, _tracing.createSpan)("PageBlobClient-startCopyIncremental", options), span = _b.span, updatedOptions = _b.updatedOptions;
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.pageBlobContext.copyIncremental(copySource, (0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              modifiedAccessConditions: (0, _tslib.__assign)((0, _tslib.__assign)({}, options.conditions), {
                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions
              })
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _c.sent()];

          case 3:
            e_44 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_44.message
            });
            throw e_44;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  return PageBlobClient;
}(BlobClient);

exports.PageBlobClient = PageBlobClient;
},{"tslib":"node_modules/tslib/tslib.es6.js","@azure/core-http":"node_modules/@azure/core-http/es/src/coreHttp.js","@opentelemetry/api":"node_modules/@opentelemetry/api/build/src/index.js","./BlobDownloadResponse":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobDownloadResponse.browser.js","./BlobQueryResponse":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobQueryResponse.browser.js","./credentials/AnonymousCredential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js","./credentials/StorageSharedKeyCredential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js","./generated/src/operations":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/index.js","./models":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js","./PageBlobRangeResponse":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/PageBlobRangeResponse.js","./Pipeline":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js","./pollers/BlobStartCopyFromUrlPoller":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/pollers/BlobStartCopyFromUrlPoller.js","./Range":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Range.js","./StorageClient":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js","./utils/Batch":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Batch.js","../../storage-common/src":"node_modules/@azure/storage-blob/dist-esm/storage-common/src/index.browser.js","./utils/constants":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js","./utils/tracing":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js","./utils/utils.common":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js","./utils/utils.node":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.browser.js","./sas/BlobSASSignatureValues":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js","./BlobLeaseClient":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js","buffer":"../../../AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBodyAsText = getBodyAsText;
exports.utf8ByteLength = utf8ByteLength;

var _tslib = require("tslib");

var _utils = require("./utils/utils.browser");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
function getBodyAsText(batchResponse) {
  return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
    var blob;
    return (0, _tslib.__generator)(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4
          /*yield*/
          , batchResponse.blobBody];

        case 1:
          blob = _a.sent();
          return [4
          /*yield*/
          , (0, _utils.blobToString)(blob)];

        case 2:
          return [2
          /*return*/
          , _a.sent()];
      }
    });
  });
}

function utf8ByteLength(str) {
  return new Blob([str]).size;
}
},{"tslib":"node_modules/tslib/tslib.es6.js","./utils/utils.browser":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.browser.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponseParser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BatchResponseParser = void 0;

var _tslib = require("tslib");

var _coreHttp = require("@azure/core-http");

var _constants = require("./utils/constants");

var _BatchUtils = require("./BatchUtils");

var _log = require("./log");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var HTTP_HEADER_DELIMITER = ": ";
var SPACE_DELIMITER = " ";
var NOT_FOUND = -1;
/**
 * Util class for parsing batch response.
 */

var BatchResponseParser =
/** @class */
function () {
  function BatchResponseParser(batchResponse, subRequests) {
    if (!batchResponse || !batchResponse.contentType) {
      // In special case(reported), server may return invalid content-type which could not be parsed.
      throw new RangeError("batchResponse is malformed or doesn't contain valid content-type.");
    }

    if (!subRequests || subRequests.size === 0) {
      // This should be prevent during coding.
      throw new RangeError("Invalid state: subRequests is not provided or size is 0.");
    }

    this.batchResponse = batchResponse;
    this.subRequests = subRequests;
    this.responseBatchBoundary = this.batchResponse.contentType.split("=")[1];
    this.perResponsePrefix = "--" + this.responseBatchBoundary + _constants.HTTP_LINE_ENDING;
    this.batchResponseEnding = "--" + this.responseBatchBoundary + "--";
  } // For example of response, please refer to https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#response


  BatchResponseParser.prototype.parseBatchResponse = function () {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var responseBodyAsText, subResponses, subResponseCount, deserializedSubResponses, subResponsesSucceededCount, subResponsesFailedCount, index, subResponse, deserializedSubResponse, responseLines, subRespHeaderStartFound, subRespHeaderEndFound, subRespFailed, contentId, _i, responseLines_1, responseLine, tokens, tokens;

      return (0, _tslib.__generator)(this, function (_a) {
        switch (_a.label) {
          case 0:
            // When logic reach here, suppose batch request has already succeeded with 202, so we can further parse
            // sub request's response.
            if (this.batchResponse._response.status != _constants.HTTPURLConnection.HTTP_ACCEPTED) {
              throw new Error("Invalid state: batch request failed with status: '" + this.batchResponse._response.status + "'.");
            }

            return [4
            /*yield*/
            , (0, _BatchUtils.getBodyAsText)(this.batchResponse)];

          case 1:
            responseBodyAsText = _a.sent();
            subResponses = responseBodyAsText.split(this.batchResponseEnding)[0] // string after ending is useless
            .split(this.perResponsePrefix).slice(1);
            subResponseCount = subResponses.length; // Defensive coding in case of potential error parsing.
            // Note: subResponseCount == 1 is special case where sub request is invalid.
            // We try to prevent such cases through early validation, e.g. validate sub request count >= 1.
            // While in unexpected sub request invalid case, we allow sub response to be parsed and return to user.

            if (subResponseCount != this.subRequests.size && subResponseCount != 1) {
              throw new Error("Invalid state: sub responses' count is not equal to sub requests' count.");
            }

            deserializedSubResponses = new Array(subResponseCount);
            subResponsesSucceededCount = 0;
            subResponsesFailedCount = 0; // Parse sub subResponses.

            for (index = 0; index < subResponseCount; index++) {
              subResponse = subResponses[index];
              deserializedSubResponse = {};
              deserializedSubResponse.headers = new _coreHttp.HttpHeaders();
              responseLines = subResponse.split("" + _constants.HTTP_LINE_ENDING);
              subRespHeaderStartFound = false;
              subRespHeaderEndFound = false;
              subRespFailed = false;
              contentId = NOT_FOUND;

              for (_i = 0, responseLines_1 = responseLines; _i < responseLines_1.length; _i++) {
                responseLine = responseLines_1[_i];

                if (!subRespHeaderStartFound) {
                  // Convention line to indicate content ID
                  if (responseLine.startsWith(_constants.HeaderConstants.CONTENT_ID)) {
                    contentId = parseInt(responseLine.split(HTTP_HEADER_DELIMITER)[1]);
                  } // Http version line with status code indicates the start of sub request's response.
                  // Example: HTTP/1.1 202 Accepted


                  if (responseLine.startsWith(_constants.HTTP_VERSION_1_1)) {
                    subRespHeaderStartFound = true;
                    tokens = responseLine.split(SPACE_DELIMITER);
                    deserializedSubResponse.status = parseInt(tokens[1]);
                    deserializedSubResponse.statusMessage = tokens.slice(2).join(SPACE_DELIMITER);
                  }

                  continue; // Skip convention headers not specifically for sub request i.e. Content-Type: application/http and Content-ID: *
                }

                if (responseLine.trim() === "") {
                  // Sub response's header start line already found, and the first empty line indicates header end line found.
                  if (!subRespHeaderEndFound) {
                    subRespHeaderEndFound = true;
                  }

                  continue; // Skip empty line
                } // Note: when code reach here, it indicates subRespHeaderStartFound == true


                if (!subRespHeaderEndFound) {
                  if (responseLine.indexOf(HTTP_HEADER_DELIMITER) === -1) {
                    // Defensive coding to prevent from missing valuable lines.
                    throw new Error("Invalid state: find non-empty line '" + responseLine + "' without HTTP header delimiter '" + HTTP_HEADER_DELIMITER + "'.");
                  }

                  tokens = responseLine.split(HTTP_HEADER_DELIMITER);
                  deserializedSubResponse.headers.set(tokens[0], tokens[1]);

                  if (tokens[0] === _constants.HeaderConstants.X_MS_ERROR_CODE) {
                    deserializedSubResponse.errorCode = tokens[1];
                    subRespFailed = true;
                  }
                } else {
                  // Assemble body of sub response.
                  if (!deserializedSubResponse.bodyAsText) {
                    deserializedSubResponse.bodyAsText = "";
                  }

                  deserializedSubResponse.bodyAsText += responseLine;
                }
              } // Inner for end
              // The response will contain the Content-ID header for each corresponding subrequest response to use for tracking.
              // The Content-IDs are set to a valid index in the subrequests we sent. In the status code 202 path, we could expect it
              // to be 1-1 mapping from the [0, subRequests.size) to the Content-IDs returned. If not, we simply don't return that
              // unexpected subResponse in the parsed reponse and we can always look it up in the raw response for debugging purpose.


              if (contentId != NOT_FOUND && Number.isInteger(contentId) && contentId >= 0 && contentId < this.subRequests.size && deserializedSubResponses[contentId] === undefined) {
                deserializedSubResponse._request = this.subRequests.get(contentId);
                deserializedSubResponses[contentId] = deserializedSubResponse;
              } else {
                _log.logger.error("subResponses[" + index + "] is dropped as the Content-ID is not found or invalid, Content-ID: " + contentId);
              }

              if (subRespFailed) {
                subResponsesFailedCount++;
              } else {
                subResponsesSucceededCount++;
              }
            }

            return [2
            /*return*/
            , {
              subResponses: deserializedSubResponses,
              subResponsesSucceededCount: subResponsesSucceededCount,
              subResponsesFailedCount: subResponsesFailedCount
            }];
        }
      });
    });
  };

  return BatchResponseParser;
}();

exports.BatchResponseParser = BatchResponseParser;
},{"tslib":"node_modules/tslib/tslib.es6.js","@azure/core-http":"node_modules/@azure/core-http/es/src/coreHttp.js","./utils/constants":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js","./BatchUtils":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.browser.js","./log":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Mutex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Mutex = void 0;

var _tslib = require("tslib");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var MutexLockStatus;

(function (MutexLockStatus) {
  MutexLockStatus[MutexLockStatus["LOCKED"] = 0] = "LOCKED";
  MutexLockStatus[MutexLockStatus["UNLOCKED"] = 1] = "UNLOCKED";
})(MutexLockStatus || (MutexLockStatus = {}));
/**
 * An async mutex lock.
 */


var Mutex =
/** @class */
function () {
  function Mutex() {}
  /**
   * Lock for a specific key. If the lock has been acquired by another customer, then
   * will wait until getting the lock.
   *
   * @param key - lock key
   */


  Mutex.lock = function (key) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _this = this;

      return (0, _tslib.__generator)(this, function (_a) {
        return [2
        /*return*/
        , new Promise(function (resolve) {
          if (_this.keys[key] === undefined || _this.keys[key] === MutexLockStatus.UNLOCKED) {
            _this.keys[key] = MutexLockStatus.LOCKED;
            resolve();
          } else {
            _this.onUnlockEvent(key, function () {
              _this.keys[key] = MutexLockStatus.LOCKED;
              resolve();
            });
          }
        })];
      });
    });
  };
  /**
   * Unlock a key.
   *
   * @param key -
   */


  Mutex.unlock = function (key) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _this = this;

      return (0, _tslib.__generator)(this, function (_a) {
        return [2
        /*return*/
        , new Promise(function (resolve) {
          if (_this.keys[key] === MutexLockStatus.LOCKED) {
            _this.emitUnlockEvent(key);
          }

          delete _this.keys[key];
          resolve();
        })];
      });
    });
  };

  Mutex.onUnlockEvent = function (key, handler) {
    if (this.listeners[key] === undefined) {
      this.listeners[key] = [handler];
    } else {
      this.listeners[key].push(handler);
    }
  };

  Mutex.emitUnlockEvent = function (key) {
    var _this = this;

    if (this.listeners[key] !== undefined && this.listeners[key].length > 0) {
      var handler_1 = this.listeners[key].shift();
      setImmediate(function () {
        handler_1.call(_this);
      });
    }
  };

  Mutex.keys = {};
  Mutex.listeners = {};
  return Mutex;
}();

exports.Mutex = Mutex;
},{"tslib":"node_modules/tslib/tslib.es6.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlobBatch = void 0;

var _tslib = require("tslib");

var _coreHttp = require("@azure/core-http");

var _api = require("@opentelemetry/api");

var _AnonymousCredential = require("./credentials/AnonymousCredential");

var _Clients = require("./Clients");

var _Mutex = require("./utils/Mutex");

var _Pipeline = require("./Pipeline");

var _utils = require("./utils/utils.common");

var _constants = require("./utils/constants");

var _StorageSharedKeyCredential = require("./credentials/StorageSharedKeyCredential");

var _tracing = require("./utils/tracing");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * A BlobBatch represents an aggregated set of operations on blobs.
 * Currently, only `delete` and `setAccessTier` are supported.
 */
var BlobBatch =
/** @class */
function () {
  function BlobBatch() {
    this.batch = "batch";
    this.batchRequest = new InnerBatchRequest();
  }
  /**
   * Get the value of Content-Type for a batch request.
   * The value must be multipart/mixed with a batch boundary.
   * Example: multipart/mixed; boundary=batch_a81786c8-e301-4e42-a729-a32ca24ae252
   */


  BlobBatch.prototype.getMultiPartContentType = function () {
    return this.batchRequest.getMultipartContentType();
  };
  /**
   * Get assembled HTTP request body for sub requests.
   */


  BlobBatch.prototype.getHttpRequestBody = function () {
    return this.batchRequest.getHttpRequestBody();
  };
  /**
   * Get sub requests that are added into the batch request.
   */


  BlobBatch.prototype.getSubRequests = function () {
    return this.batchRequest.getSubRequests();
  };

  BlobBatch.prototype.addSubRequestInternal = function (subRequest, assembleSubRequestFunc) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      return (0, _tslib.__generator)(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , _Mutex.Mutex.lock(this.batch)];

          case 1:
            _a.sent();

            _a.label = 2;

          case 2:
            _a.trys.push([2,, 4, 6]);

            this.batchRequest.preAddSubRequest(subRequest);
            return [4
            /*yield*/
            , assembleSubRequestFunc()];

          case 3:
            _a.sent();

            this.batchRequest.postAddSubRequest(subRequest);
            return [3
            /*break*/
            , 6];

          case 4:
            return [4
            /*yield*/
            , _Mutex.Mutex.unlock(this.batch)];

          case 5:
            _a.sent();

            return [7
            /*endfinally*/
            ];

          case 6:
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  BlobBatch.prototype.setBatchType = function (batchType) {
    if (!this.batchType) {
      this.batchType = batchType;
    }

    if (this.batchType !== batchType) {
      throw new RangeError("BlobBatch only supports one operation type per batch and it already is being used for " + this.batchType + " operations.");
    }
  };

  BlobBatch.prototype.deleteBlob = function (urlOrBlobClient, credentialOrOptions, options) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var url, credential, _a, span, updatedOptions, e_1;

      var _this = this;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            if (typeof urlOrBlobClient === "string" && (_coreHttp.isNode && credentialOrOptions instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential || credentialOrOptions instanceof _AnonymousCredential.AnonymousCredential || (0, _coreHttp.isTokenCredential)(credentialOrOptions))) {
              // First overload
              url = urlOrBlobClient;
              credential = credentialOrOptions;
            } else if (urlOrBlobClient instanceof _Clients.BlobClient) {
              // Second overload
              url = urlOrBlobClient.url;
              credential = urlOrBlobClient.credential;
              options = credentialOrOptions;
            } else {
              throw new RangeError("Invalid arguments. Either url and credential, or BlobClient need be provided.");
            }

            if (!options) {
              options = {};
            }

            _a = (0, _tracing.createSpan)("BatchDeleteRequest-addSubRequest", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 3, 4, 5]);

            this.setBatchType("delete");
            return [4
            /*yield*/
            , this.addSubRequestInternal({
              url: url,
              credential: credential
            }, function () {
              return (0, _tslib.__awaiter)(_this, void 0, void 0, function () {
                return (0, _tslib.__generator)(this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      return [4
                      /*yield*/
                      , new _Clients.BlobClient(url, this.batchRequest.createPipeline(credential)).delete(updatedOptions)];

                    case 1:
                      _a.sent();

                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            })];

          case 2:
            _b.sent();

            return [3
            /*break*/
            , 5];

          case 3:
            e_1 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_1.message
            });
            throw e_1;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  BlobBatch.prototype.setBlobAccessTier = function (urlOrBlobClient, credentialOrTier, tierOrOptions, options) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var url, credential, tier, _a, span, updatedOptions, e_2;

      var _this = this;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            if (typeof urlOrBlobClient === "string" && (_coreHttp.isNode && credentialOrTier instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential || credentialOrTier instanceof _AnonymousCredential.AnonymousCredential || (0, _coreHttp.isTokenCredential)(credentialOrTier))) {
              // First overload
              url = urlOrBlobClient;
              credential = credentialOrTier;
              tier = tierOrOptions;
            } else if (urlOrBlobClient instanceof _Clients.BlobClient) {
              // Second overload
              url = urlOrBlobClient.url;
              credential = urlOrBlobClient.credential;
              tier = credentialOrTier;
              options = tierOrOptions;
            } else {
              throw new RangeError("Invalid arguments. Either url and credential, or BlobClient need be provided.");
            }

            if (!options) {
              options = {};
            }

            _a = (0, _tracing.createSpan)("BatchSetTierRequest-addSubRequest", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 3, 4, 5]);

            this.setBatchType("setAccessTier");
            return [4
            /*yield*/
            , this.addSubRequestInternal({
              url: url,
              credential: credential
            }, function () {
              return (0, _tslib.__awaiter)(_this, void 0, void 0, function () {
                return (0, _tslib.__generator)(this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      return [4
                      /*yield*/
                      , new _Clients.BlobClient(url, this.batchRequest.createPipeline(credential)).setAccessTier(tier, updatedOptions)];

                    case 1:
                      _a.sent();

                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            })];

          case 2:
            _b.sent();

            return [3
            /*break*/
            , 5];

          case 3:
            e_2 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_2.message
            });
            throw e_2;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  return BlobBatch;
}();

exports.BlobBatch = BlobBatch;

/**
 * Inner batch request class which is responsible for assembling and serializing sub requests.
 * See https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#request-body for how requests are assembled.
 */
var InnerBatchRequest =
/** @class */
function () {
  function InnerBatchRequest() {
    this.operationCount = 0;
    this.body = "";
    var tempGuid = (0, _coreHttp.generateUuid)(); // batch_{batchid}

    this.boundary = "batch_" + tempGuid; // --batch_{batchid}
    // Content-Type: application/http
    // Content-Transfer-Encoding: binary

    this.subRequestPrefix = "--" + this.boundary + _constants.HTTP_LINE_ENDING + _constants.HeaderConstants.CONTENT_TYPE + ": application/http" + _constants.HTTP_LINE_ENDING + _constants.HeaderConstants.CONTENT_TRANSFER_ENCODING + ": binary"; // multipart/mixed; boundary=batch_{batchid}

    this.multipartContentType = "multipart/mixed; boundary=" + this.boundary; // --batch_{batchid}--

    this.batchRequestEnding = "--" + this.boundary + "--";
    this.subRequests = new Map();
  }
  /**
   * Create pipeline to assemble sub requests. The idea here is to use existing
   * credential and serialization/deserialization components, with additional policies to
   * filter unnecessary headers, assemble sub requests into request's body
   * and intercept request from going to wire.
   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.
   */


  InnerBatchRequest.prototype.createPipeline = function (credential) {
    var isAnonymousCreds = credential instanceof _AnonymousCredential.AnonymousCredential;
    var policyFactoryLength = 3 + (isAnonymousCreds ? 0 : 1); // [deserializationPolicy, BatchHeaderFilterPolicyFactory, (Optional)Credential, BatchRequestAssemblePolicyFactory]

    var factories = new Array(policyFactoryLength);
    factories[0] = (0, _coreHttp.deserializationPolicy)(); // Default deserializationPolicy is provided by protocol layer

    factories[1] = new BatchHeaderFilterPolicyFactory(); // Use batch header filter policy to exclude unnecessary headers

    if (!isAnonymousCreds) {
      factories[2] = (0, _coreHttp.isTokenCredential)(credential) ? (0, _utils.attachCredential)((0, _coreHttp.bearerTokenAuthenticationPolicy)(credential, _constants.StorageOAuthScopes), credential) : credential;
    }

    factories[policyFactoryLength - 1] = new BatchRequestAssemblePolicyFactory(this); // Use batch assemble policy to assemble request and intercept request from going to wire

    return new _Pipeline.Pipeline(factories, {});
  };

  InnerBatchRequest.prototype.appendSubRequestToBody = function (request) {
    // Start to assemble sub request
    this.body += [this.subRequestPrefix, _constants.HeaderConstants.CONTENT_ID + ": " + this.operationCount, "", request.method.toString() + " " + (0, _utils.getURLPathAndQuery)(request.url) + " " + _constants.HTTP_VERSION_1_1 + _constants.HTTP_LINE_ENDING // sub request start line with method
    ].join(_constants.HTTP_LINE_ENDING);

    for (var _i = 0, _a = request.headers.headersArray(); _i < _a.length; _i++) {
      var header = _a[_i];
      this.body += header.name + ": " + header.value + _constants.HTTP_LINE_ENDING;
    }

    this.body += _constants.HTTP_LINE_ENDING; // sub request's headers need be ending with an empty line
    // No body to assemble for current batch request support
    // End to assemble sub request
  };

  InnerBatchRequest.prototype.preAddSubRequest = function (subRequest) {
    if (this.operationCount >= _constants.BATCH_MAX_REQUEST) {
      throw new RangeError("Cannot exceed " + _constants.BATCH_MAX_REQUEST + " sub requests in a single batch");
    } // Fast fail if url for sub request is invalid


    var path = (0, _utils.getURLPath)(subRequest.url);

    if (!path || path == "") {
      throw new RangeError("Invalid url for sub request: '" + subRequest.url + "'");
    }
  };

  InnerBatchRequest.prototype.postAddSubRequest = function (subRequest) {
    this.subRequests.set(this.operationCount, subRequest);
    this.operationCount++;
  }; // Return the http request body with assembling the ending line to the sub request body.


  InnerBatchRequest.prototype.getHttpRequestBody = function () {
    return "" + this.body + this.batchRequestEnding + _constants.HTTP_LINE_ENDING;
  };

  InnerBatchRequest.prototype.getMultipartContentType = function () {
    return this.multipartContentType;
  };

  InnerBatchRequest.prototype.getSubRequests = function () {
    return this.subRequests;
  };

  return InnerBatchRequest;
}();

var BatchRequestAssemblePolicy =
/** @class */
function (_super) {
  (0, _tslib.__extends)(BatchRequestAssemblePolicy, _super);

  function BatchRequestAssemblePolicy(batchRequest, nextPolicy, options) {
    var _this = _super.call(this, nextPolicy, options) || this;

    _this.dummyResponse = {
      request: new _coreHttp.WebResource(),
      status: 200,
      headers: new _coreHttp.HttpHeaders()
    };
    _this.batchRequest = batchRequest;
    return _this;
  }

  BatchRequestAssemblePolicy.prototype.sendRequest = function (request) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      return (0, _tslib.__generator)(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.batchRequest.appendSubRequestToBody(request)];

          case 1:
            _a.sent();

            return [2
            /*return*/
            , this.dummyResponse];
          // Intercept request from going to wire
        }
      });
    });
  };

  return BatchRequestAssemblePolicy;
}(_coreHttp.BaseRequestPolicy);

var BatchRequestAssemblePolicyFactory =
/** @class */
function () {
  function BatchRequestAssemblePolicyFactory(batchRequest) {
    this.batchRequest = batchRequest;
  }

  BatchRequestAssemblePolicyFactory.prototype.create = function (nextPolicy, options) {
    return new BatchRequestAssemblePolicy(this.batchRequest, nextPolicy, options);
  };

  return BatchRequestAssemblePolicyFactory;
}();

var BatchHeaderFilterPolicy =
/** @class */
function (_super) {
  (0, _tslib.__extends)(BatchHeaderFilterPolicy, _super);

  function BatchHeaderFilterPolicy(nextPolicy, options) {
    return _super.call(this, nextPolicy, options) || this;
  }

  BatchHeaderFilterPolicy.prototype.sendRequest = function (request) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var xMsHeaderName, _i, _a, header;

      return (0, _tslib.__generator)(this, function (_b) {
        xMsHeaderName = "";

        for (_i = 0, _a = request.headers.headersArray(); _i < _a.length; _i++) {
          header = _a[_i];

          if ((0, _utils.iEqual)(header.name, _constants.HeaderConstants.X_MS_VERSION)) {
            xMsHeaderName = header.name;
          }
        }

        if (xMsHeaderName !== "") {
          request.headers.remove(xMsHeaderName); // The subrequests should not have the x-ms-version header.
        }

        return [2
        /*return*/
        , this._nextPolicy.sendRequest(request)];
      });
    });
  };

  return BatchHeaderFilterPolicy;
}(_coreHttp.BaseRequestPolicy);

var BatchHeaderFilterPolicyFactory =
/** @class */
function () {
  function BatchHeaderFilterPolicyFactory() {}

  BatchHeaderFilterPolicyFactory.prototype.create = function (nextPolicy, options) {
    return new BatchHeaderFilterPolicy(nextPolicy, options);
  };

  return BatchHeaderFilterPolicyFactory;
}();
},{"tslib":"node_modules/tslib/tslib.es6.js","@azure/core-http":"node_modules/@azure/core-http/es/src/coreHttp.js","@opentelemetry/api":"node_modules/@opentelemetry/api/build/src/index.js","./credentials/AnonymousCredential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js","./Clients":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js","./utils/Mutex":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Mutex.js","./Pipeline":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js","./utils/utils.common":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js","./utils/constants":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js","./credentials/StorageSharedKeyCredential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js","./utils/tracing":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlobBatchClient = void 0;

var _tslib = require("tslib");

var _BatchResponseParser = require("./BatchResponseParser");

var _BatchUtils = require("./BatchUtils");

var _BlobBatch = require("./BlobBatch");

var _api = require("@opentelemetry/api");

var _tracing = require("./utils/tracing");

var _operations = require("./generated/src/operations");

var _AnonymousCredential = require("./credentials/AnonymousCredential");

var _storageClientContext = require("./generated/src/storageClientContext");

var _Pipeline = require("./Pipeline");

var _utils = require("./utils/utils.common");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * A BlobBatchClient allows you to make batched requests to the Azure Storage Blob service.
 *
 * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch
 */
var BlobBatchClient =
/** @class */
function () {
  function BlobBatchClient(url, credentialOrPipeline, options) {
    var pipeline;

    if (credentialOrPipeline instanceof _Pipeline.Pipeline) {
      pipeline = credentialOrPipeline;
    } else if (!credentialOrPipeline) {
      // no credential provided
      pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
    } else {
      pipeline = (0, _Pipeline.newPipeline)(credentialOrPipeline, options);
    }

    var storageClientContext = new _storageClientContext.StorageClientContext(url, pipeline.toServiceClientOptions());
    var path = (0, _utils.getURLPath)(url);

    if (path && path !== "/") {
      // Container scoped.
      this.serviceOrContainerContext = new _operations.Container(storageClientContext);
    } else {
      this.serviceOrContainerContext = new _operations.Service(storageClientContext);
    }
  }
  /**
   * Creates a {@link BlobBatch}.
   * A BlobBatch represents an aggregated set of operations on blobs.
   */


  BlobBatchClient.prototype.createBatch = function () {
    return new _BlobBatch.BlobBatch();
  };

  BlobBatchClient.prototype.deleteBlobs = function (urlsOrBlobClients, credentialOrOptions, options) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var batch, _i, urlsOrBlobClients_1, urlOrBlobClient;

      return (0, _tslib.__generator)(this, function (_a) {
        switch (_a.label) {
          case 0:
            batch = new _BlobBatch.BlobBatch();
            _i = 0, urlsOrBlobClients_1 = urlsOrBlobClients;
            _a.label = 1;

          case 1:
            if (!(_i < urlsOrBlobClients_1.length)) return [3
            /*break*/
            , 6];
            urlOrBlobClient = urlsOrBlobClients_1[_i];
            if (!(typeof urlOrBlobClient === "string")) return [3
            /*break*/
            , 3];
            return [4
            /*yield*/
            , batch.deleteBlob(urlOrBlobClient, credentialOrOptions, options)];

          case 2:
            _a.sent();

            return [3
            /*break*/
            , 5];

          case 3:
            return [4
            /*yield*/
            , batch.deleteBlob(urlOrBlobClient, credentialOrOptions)];

          case 4:
            _a.sent();

            _a.label = 5;

          case 5:
            _i++;
            return [3
            /*break*/
            , 1];

          case 6:
            return [2
            /*return*/
            , this.submitBatch(batch)];
        }
      });
    });
  };

  BlobBatchClient.prototype.setBlobsAccessTier = function (urlsOrBlobClients, credentialOrTier, tierOrOptions, options) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var batch, _i, urlsOrBlobClients_2, urlOrBlobClient;

      return (0, _tslib.__generator)(this, function (_a) {
        switch (_a.label) {
          case 0:
            batch = new _BlobBatch.BlobBatch();
            _i = 0, urlsOrBlobClients_2 = urlsOrBlobClients;
            _a.label = 1;

          case 1:
            if (!(_i < urlsOrBlobClients_2.length)) return [3
            /*break*/
            , 6];
            urlOrBlobClient = urlsOrBlobClients_2[_i];
            if (!(typeof urlOrBlobClient === "string")) return [3
            /*break*/
            , 3];
            return [4
            /*yield*/
            , batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options)];

          case 2:
            _a.sent();

            return [3
            /*break*/
            , 5];

          case 3:
            return [4
            /*yield*/
            , batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions)];

          case 4:
            _a.sent();

            _a.label = 5;

          case 5:
            _i++;
            return [3
            /*break*/
            , 1];

          case 6:
            return [2
            /*return*/
            , this.submitBatch(batch)];
        }
      });
    });
  };
  /**
   * Submit batch request which consists of multiple subrequests.
   *
   * Get `blobBatchClient` and other details before running the snippets.
   * `blobServiceClient.getBlobBatchClient()` gives the `blobBatchClient`
   *
   * Example usage:
   *
   * ```js
   * let batchRequest = new BlobBatch();
   * await batchRequest.deleteBlob(urlInString0, credential0);
   * await batchRequest.deleteBlob(urlInString1, credential1, {
   *  deleteSnapshots: "include"
   * });
   * const batchResp = await blobBatchClient.submitBatch(batchRequest);
   * console.log(batchResp.subResponsesSucceededCount);
   * ```
   *
   * Example using a lease:
   *
   * ```js
   * let batchRequest = new BlobBatch();
   * await batchRequest.setBlobAccessTier(blockBlobClient0, "Cool");
   * await batchRequest.setBlobAccessTier(blockBlobClient1, "Cool", {
   *  conditions: { leaseId: leaseId }
   * });
   * const batchResp = await blobBatchClient.submitBatch(batchRequest);
   * console.log(batchResp.subResponsesSucceededCount);
   * ```
   *
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch
   *
   * @param batchRequest - A set of Delete or SetTier operations.
   * @param options -
   */


  BlobBatchClient.prototype.submitBatch = function (batchRequest, options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, batchRequestBody, rawBatchResponse, batchResponseParser, responseSummary, res, e_1;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!batchRequest || batchRequest.getSubRequests().size == 0) {
              throw new RangeError("Batch request should contain one or more sub requests.");
            }

            _a = (0, _tracing.createSpan)("BlobBatchClient-submitBatch", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 4, 5, 6]);

            batchRequestBody = batchRequest.getHttpRequestBody();
            return [4
            /*yield*/
            , this.serviceOrContainerContext.submitBatch(batchRequestBody, (0, _BatchUtils.utf8ByteLength)(batchRequestBody), batchRequest.getMultiPartContentType(), (0, _tslib.__assign)((0, _tslib.__assign)({}, options), (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            rawBatchResponse = _b.sent();
            batchResponseParser = new _BatchResponseParser.BatchResponseParser(rawBatchResponse, batchRequest.getSubRequests());
            return [4
            /*yield*/
            , batchResponseParser.parseBatchResponse()];

          case 3:
            responseSummary = _b.sent();
            res = {
              _response: rawBatchResponse._response,
              contentType: rawBatchResponse.contentType,
              errorCode: rawBatchResponse.errorCode,
              requestId: rawBatchResponse.requestId,
              clientRequestId: rawBatchResponse.clientRequestId,
              version: rawBatchResponse.version,
              subResponses: responseSummary.subResponses,
              subResponsesSucceededCount: responseSummary.subResponsesSucceededCount,
              subResponsesFailedCount: responseSummary.subResponsesFailedCount
            };
            return [2
            /*return*/
            , res];

          case 4:
            e_1 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_1.message
            });
            throw e_1;

          case 5:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 6:
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  return BlobBatchClient;
}();

exports.BlobBatchClient = BlobBatchClient;
},{"tslib":"node_modules/tslib/tslib.es6.js","./BatchResponseParser":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponseParser.js","./BatchUtils":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.browser.js","./BlobBatch":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js","@opentelemetry/api":"node_modules/@opentelemetry/api/build/src/index.js","./utils/tracing":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js","./generated/src/operations":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/index.js","./credentials/AnonymousCredential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js","./generated/src/storageClientContext":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClientContext.js","./Pipeline":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js","./utils/utils.common":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/ContainerClient.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContainerClient = void 0;

var _tslib = require("tslib");

var _coreHttp = require("@azure/core-http");

var _api = require("@opentelemetry/api");

var _AnonymousCredential = require("./credentials/AnonymousCredential");

var _StorageSharedKeyCredential = require("./credentials/StorageSharedKeyCredential");

var _operations = require("./generated/src/operations");

var _Pipeline = require("./Pipeline");

var _StorageClient = require("./StorageClient");

var _tracing = require("./utils/tracing");

var _utils = require("./utils/utils.common");

var _BlobSASSignatureValues = require("./sas/BlobSASSignatureValues");

var _BlobLeaseClient = require("./BlobLeaseClient");

var _Clients = require("./Clients");

var _BlobBatchClient = require("./BlobBatchClient");

/**
 * A ContainerClient represents a URL to the Azure Storage container allowing you to manipulate its blobs.
 */
var ContainerClient =
/** @class */
function (_super) {
  (0, _tslib.__extends)(ContainerClient, _super);

  function ContainerClient(urlOrConnectionString, credentialOrPipelineOrContainerName, options) {
    var _this = this;

    var pipeline;
    var url;
    options = options || {};

    if (credentialOrPipelineOrContainerName instanceof _Pipeline.Pipeline) {
      // (url: string, pipeline: Pipeline)
      url = urlOrConnectionString;
      pipeline = credentialOrPipelineOrContainerName;
    } else if (_coreHttp.isNode && credentialOrPipelineOrContainerName instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof _AnonymousCredential.AnonymousCredential || (0, _coreHttp.isTokenCredential)(credentialOrPipelineOrContainerName)) {
      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
      url = urlOrConnectionString;
      pipeline = (0, _Pipeline.newPipeline)(credentialOrPipelineOrContainerName, options);
    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
      // The second parameter is undefined. Use anonymous credential.
      url = urlOrConnectionString;
      pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string") {
      // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)
      var containerName = credentialOrPipelineOrContainerName;
      var extractedCreds = (0, _utils.extractConnectionStringParts)(urlOrConnectionString);

      if (extractedCreds.kind === "AccountConnString") {
        if (_coreHttp.isNode) {
          var sharedKeyCredential = new _StorageSharedKeyCredential.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
          url = (0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName));
          options.proxyOptions = (0, _coreHttp.getDefaultProxySettings)(extractedCreds.proxyUri);
          pipeline = (0, _Pipeline.newPipeline)(sharedKeyCredential, options);
        } else {
          throw new Error("Account connection string is only supported in Node.js environment");
        }
      } else if (extractedCreds.kind === "SASConnString") {
        url = (0, _utils.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)) + "?" + extractedCreds.accountSas;
        pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
      } else {
        throw new Error("Connection string must be either an Account connection string or a SAS connection string");
      }
    } else {
      throw new Error("Expecting non-empty strings for containerName parameter");
    }

    _this = _super.call(this, url, pipeline) || this;
    _this._containerName = _this.getContainerNameFromUrl();
    _this.containerContext = new _operations.Container(_this.storageClientContext);
    return _this;
  }

  Object.defineProperty(ContainerClient.prototype, "containerName", {
    /**
     * The name of the container.
     */
    get: function () {
      return this._containerName;
    },
    enumerable: false,
    configurable: true
  });
  /**
   * Creates a new container under the specified account. If the container with
   * the same name already exists, the operation fails.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container
   *
   * @param options - Options to Container Create operation.
   *
   *
   * Example usage:
   *
   * ```js
   * const containerClient = blobServiceClient.getContainerClient("<container name>");
   * const createContainerResponse = await containerClient.create();
   * console.log("Container was created successfully", createContainerResponse.requestId);
   * ```
   */

  ContainerClient.prototype.create = function (options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, e_1;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = (0, _tracing.createSpan)("ContainerClient-create", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.containerContext.create((0, _tslib.__assign)((0, _tslib.__assign)({}, options), (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            // Spread operator in destructuring assignments,
            // this will filter out unwanted properties from the response object into result object
            return [2
            /*return*/
            , _b.sent()];

          case 3:
            e_1 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_1.message
            });
            throw e_1;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a new container under the specified account. If the container with
   * the same name already exists, it is not changed.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container
   *
   * @param options -
   */


  ContainerClient.prototype.createIfNotExists = function (options) {
    var _a, _b;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _c, span, updatedOptions, res, e_2;

      return (0, _tslib.__generator)(this, function (_d) {
        switch (_d.label) {
          case 0:
            _c = (0, _tracing.createSpan)("ContainerClient-createIfNotExists", options), span = _c.span, updatedOptions = _c.updatedOptions;
            _d.label = 1;

          case 1:
            _d.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.create(updatedOptions)];

          case 2:
            res = _d.sent();
            return [2
            /*return*/
            , (0, _tslib.__assign)((0, _tslib.__assign)({
              succeeded: true
            }, res), {
              _response: res._response // _response is made non-enumerable

            })];

          case 3:
            e_2 = _d.sent();

            if (((_a = e_2.details) === null || _a === void 0 ? void 0 : _a.errorCode) === "ContainerAlreadyExists") {
              span.setStatus({
                code: _api.CanonicalCode.ALREADY_EXISTS,
                message: "Expected exception when creating a container only if it does not already exist."
              });
              return [2
              /*return*/
              , (0, _tslib.__assign)((0, _tslib.__assign)({
                succeeded: false
              }, (_b = e_2.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), {
                _response: e_2.response
              })];
            }

            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_2.message
            });
            throw e_2;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Returns true if the Azure container resource represented by this client exists; false otherwise.
   *
   * NOTE: use this function with care since an existing container might be deleted by other clients or
   * applications. Vice versa new containers with the same name might be added by other clients or
   * applications after this function completes.
   *
   * @param options -
   */


  ContainerClient.prototype.exists = function (options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, e_3;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = (0, _tracing.createSpan)("ContainerClient-exists", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.getProperties({
              abortSignal: options.abortSignal,
              tracingOptions: updatedOptions.tracingOptions
            })];

          case 2:
            _b.sent();

            return [2
            /*return*/
            , true];

          case 3:
            e_3 = _b.sent();

            if (e_3.statusCode === 404) {
              span.setStatus({
                code: _api.CanonicalCode.NOT_FOUND,
                message: "Expected exception when checking container existence"
              });
              return [2
              /*return*/
              , false];
            }

            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_3.message
            });
            throw e_3;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a {@link BlobClient}
   *
   * @param blobName - A blob name
   * @returns A new BlobClient object for the given blob name.
   */


  ContainerClient.prototype.getBlobClient = function (blobName) {
    return new _Clients.BlobClient((0, _utils.appendToURLPath)(this.url, encodeURIComponent(blobName)), this.pipeline);
  };
  /**
   * Creates an {@link AppendBlobClient}
   *
   * @param blobName - An append blob name
   */


  ContainerClient.prototype.getAppendBlobClient = function (blobName) {
    return new _Clients.AppendBlobClient((0, _utils.appendToURLPath)(this.url, encodeURIComponent(blobName)), this.pipeline);
  };
  /**
   * Creates a {@link BlockBlobClient}
   *
   * @param blobName - A block blob name
   *
   *
   * Example usage:
   *
   * ```js
   * const content = "Hello world!";
   *
   * const blockBlobClient = containerClient.getBlockBlobClient("<blob name>");
   * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);
   * ```
   */


  ContainerClient.prototype.getBlockBlobClient = function (blobName) {
    return new _Clients.BlockBlobClient((0, _utils.appendToURLPath)(this.url, encodeURIComponent(blobName)), this.pipeline);
  };
  /**
   * Creates a {@link PageBlobClient}
   *
   * @param blobName - A page blob name
   */


  ContainerClient.prototype.getPageBlobClient = function (blobName) {
    return new _Clients.PageBlobClient((0, _utils.appendToURLPath)(this.url, encodeURIComponent(blobName)), this.pipeline);
  };
  /**
   * Returns all user-defined metadata and system properties for the specified
   * container. The data returned does not include the container's list of blobs.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-properties
   *
   * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if
   * they originally contained uppercase characters. This differs from the metadata keys returned by
   * the `listContainers` method of {@link BlobServiceClient} using the `includeMetadata` option, which
   * will retain their original casing.
   *
   * @param options - Options to Container Get Properties operation.
   */


  ContainerClient.prototype.getProperties = function (options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, e_4;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!options.conditions) {
              options.conditions = {};
            }

            _a = (0, _tracing.createSpan)("ContainerClient-getProperties", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.containerContext.getProperties((0, _tslib.__assign)((0, _tslib.__assign)({
              abortSignal: options.abortSignal
            }, options.conditions), (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _b.sent()];

          case 3:
            e_4 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_4.message
            });
            throw e_4;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Marks the specified container for deletion. The container and any blobs
   * contained within it are later deleted during garbage collection.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container
   *
   * @param options - Options to Container Delete operation.
   */


  ContainerClient.prototype.delete = function (options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, e_5;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!options.conditions) {
              options.conditions = {};
            }

            _a = (0, _tracing.createSpan)("ContainerClient-delete", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.containerContext.deleteMethod((0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              leaseAccessConditions: options.conditions,
              modifiedAccessConditions: options.conditions
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _b.sent()];

          case 3:
            e_5 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_5.message
            });
            throw e_5;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Marks the specified container for deletion if it exists. The container and any blobs
   * contained within it are later deleted during garbage collection.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container
   *
   * @param options - Options to Container Delete operation.
   */


  ContainerClient.prototype.deleteIfExists = function (options) {
    var _a, _b;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _c, span, updatedOptions, res, e_6;

      return (0, _tslib.__generator)(this, function (_d) {
        switch (_d.label) {
          case 0:
            _c = (0, _tracing.createSpan)("ContainerClient-deleteIfExists", options), span = _c.span, updatedOptions = _c.updatedOptions;
            _d.label = 1;

          case 1:
            _d.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.delete(updatedOptions)];

          case 2:
            res = _d.sent();
            return [2
            /*return*/
            , (0, _tslib.__assign)((0, _tslib.__assign)({
              succeeded: true
            }, res), {
              _response: res._response // _response is made non-enumerable

            })];

          case 3:
            e_6 = _d.sent();

            if (((_a = e_6.details) === null || _a === void 0 ? void 0 : _a.errorCode) === "ContainerNotFound") {
              span.setStatus({
                code: _api.CanonicalCode.NOT_FOUND,
                message: "Expected exception when deleting a container only if it exists."
              });
              return [2
              /*return*/
              , (0, _tslib.__assign)((0, _tslib.__assign)({
                succeeded: false
              }, (_b = e_6.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), {
                _response: e_6.response
              })];
            }

            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_6.message
            });
            throw e_6;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Sets one or more user-defined name-value pairs for the specified container.
   *
   * If no option provided, or no metadata defined in the parameter, the container
   * metadata will be removed.
   *
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-metadata
   *
   * @param metadata - Replace existing metadata with this value.
   *                            If no value provided the existing metadata will be removed.
   * @param options - Options to Container Set Metadata operation.
   */


  ContainerClient.prototype.setMetadata = function (metadata, options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, e_7;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!options.conditions) {
              options.conditions = {};
            }

            if (options.conditions.ifUnmodifiedSince) {
              throw new RangeError("the IfUnmodifiedSince must have their default values because they are ignored by the blob service");
            }

            _a = (0, _tracing.createSpan)("ContainerClient-setMetadata", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.containerContext.setMetadata((0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              leaseAccessConditions: options.conditions,
              metadata: metadata,
              modifiedAccessConditions: options.conditions
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _b.sent()];

          case 3:
            e_7 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_7.message
            });
            throw e_7;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Gets the permissions for the specified container. The permissions indicate
   * whether container data may be accessed publicly.
   *
   * WARNING: JavaScript Date will potentially lose precision when parsing startsOn and expiresOn strings.
   * For example, new Date("2018-12-31T03:44:23.8827891Z").toISOString() will get "2018-12-31T03:44:23.882Z".
   *
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-acl
   *
   * @param options - Options to Container Get Access Policy operation.
   */


  ContainerClient.prototype.getAccessPolicy = function (options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, response, res, _i, response_1, identifier, accessPolicy, e_8;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!options.conditions) {
              options.conditions = {};
            }

            _a = (0, _tracing.createSpan)("ContainerClient-getAccessPolicy", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.containerContext.getAccessPolicy((0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              leaseAccessConditions: options.conditions
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            response = _b.sent();
            res = {
              _response: response._response,
              blobPublicAccess: response.blobPublicAccess,
              date: response.date,
              etag: response.etag,
              errorCode: response.errorCode,
              lastModified: response.lastModified,
              requestId: response.requestId,
              clientRequestId: response.clientRequestId,
              signedIdentifiers: [],
              version: response.version
            };

            for (_i = 0, response_1 = response; _i < response_1.length; _i++) {
              identifier = response_1[_i];
              accessPolicy = undefined;

              if (identifier.accessPolicy) {
                accessPolicy = {
                  permissions: identifier.accessPolicy.permissions
                };

                if (identifier.accessPolicy.expiresOn) {
                  accessPolicy.expiresOn = new Date(identifier.accessPolicy.expiresOn);
                }

                if (identifier.accessPolicy.startsOn) {
                  accessPolicy.startsOn = new Date(identifier.accessPolicy.startsOn);
                }
              }

              res.signedIdentifiers.push({
                accessPolicy: accessPolicy,
                id: identifier.id
              });
            }

            return [2
            /*return*/
            , res];

          case 3:
            e_8 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_8.message
            });
            throw e_8;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Sets the permissions for the specified container. The permissions indicate
   * whether blobs in a container may be accessed publicly.
   *
   * When you set permissions for a container, the existing permissions are replaced.
   * If no access or containerAcl provided, the existing container ACL will be
   * removed.
   *
   * When you establish a stored access policy on a container, it may take up to 30 seconds to take effect.
   * During this interval, a shared access signature that is associated with the stored access policy will
   * fail with status code 403 (Forbidden), until the access policy becomes active.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-acl
   *
   * @param access - The level of public access to data in the container.
   * @param containerAcl - Array of elements each having a unique Id and details of the access policy.
   * @param options - Options to Container Set Access Policy operation.
   */


  ContainerClient.prototype.setAccessPolicy = function (access, containerAcl, options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, acl, _i, _b, identifier, e_9;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            options.conditions = options.conditions || {};
            _a = (0, _tracing.createSpan)("ContainerClient-setAccessPolicy", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            acl = [];

            for (_i = 0, _b = containerAcl || []; _i < _b.length; _i++) {
              identifier = _b[_i];
              acl.push({
                accessPolicy: {
                  expiresOn: identifier.accessPolicy.expiresOn ? (0, _utils.truncatedISO8061Date)(identifier.accessPolicy.expiresOn) : "",
                  permissions: identifier.accessPolicy.permissions,
                  startsOn: identifier.accessPolicy.startsOn ? (0, _utils.truncatedISO8061Date)(identifier.accessPolicy.startsOn) : ""
                },
                id: identifier.id
              });
            }

            return [4
            /*yield*/
            , this.containerContext.setAccessPolicy((0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              access: access,
              containerAcl: acl,
              leaseAccessConditions: options.conditions,
              modifiedAccessConditions: options.conditions
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _c.sent()];

          case 3:
            e_9 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_9.message
            });
            throw e_9;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Get a {@link BlobLeaseClient} that manages leases on the container.
   *
   * @param proposeLeaseId - Initial proposed lease Id.
   * @returns A new BlobLeaseClient object for managing leases on the container.
   */


  ContainerClient.prototype.getBlobLeaseClient = function (proposeLeaseId) {
    return new _BlobLeaseClient.BlobLeaseClient(this, proposeLeaseId);
  };
  /**
   * Creates a new block blob, or updates the content of an existing block blob.
   *
   * Updating an existing block blob overwrites any existing metadata on the blob.
   * Partial updates are not supported; the content of the existing blob is
   * overwritten with the new content. To perform a partial update of a block blob's,
   * use {@link BlockBlobClient.stageBlock} and {@link BlockBlobClient.commitBlockList}.
   *
   * This is a non-parallel uploading method, please use {@link BlockBlobClient.uploadFile},
   * {@link BlockBlobClient.uploadStream} or {@link BlockBlobClient.uploadBrowserData} for better
   * performance with concurrency uploading.
   *
   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
   *
   * @param blobName - Name of the block blob to create or update.
   * @param body - Blob, string, ArrayBuffer, ArrayBufferView or a function
   *                               which returns a new Readable stream whose offset is from data source beginning.
   * @param contentLength - Length of body in bytes. Use Buffer.byteLength() to calculate body length for a
   *                               string including non non-Base64/Hex-encoded characters.
   * @param options - Options to configure the Block Blob Upload operation.
   * @returns Block Blob upload response data and the corresponding BlockBlobClient instance.
   */


  ContainerClient.prototype.uploadBlockBlob = function (blobName, body, contentLength, options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, blockBlobClient, response, e_10;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = (0, _tracing.createSpan)("ContainerClient-uploadBlockBlob", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 3, 4, 5]);

            blockBlobClient = this.getBlockBlobClient(blobName);
            return [4
            /*yield*/
            , blockBlobClient.upload(body, contentLength, updatedOptions)];

          case 2:
            response = _b.sent();
            return [2
            /*return*/
            , {
              blockBlobClient: blockBlobClient,
              response: response
            }];

          case 3:
            e_10 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_10.message
            });
            throw e_10;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Marks the specified blob or snapshot for deletion. The blob is later deleted
   * during garbage collection. Note that in order to delete a blob, you must delete
   * all of its snapshots. You can delete both at the same time with the Delete
   * Blob operation.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob
   *
   * @param blobName -
   * @param options - Options to Blob Delete operation.
   * @returns Block blob deletion response data.
   */


  ContainerClient.prototype.deleteBlob = function (blobName, options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, blobClient, e_11;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = (0, _tracing.createSpan)("ContainerClient-deleteBlob", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 3, 4, 5]);

            blobClient = this.getBlobClient(blobName);

            if (options.versionId) {
              blobClient = blobClient.withVersion(options.versionId);
            }

            return [4
            /*yield*/
            , blobClient.delete(updatedOptions)];

          case 2:
            return [2
            /*return*/
            , _b.sent()];

          case 3:
            e_11 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_11.message
            });
            throw e_11;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * listBlobFlatSegment returns a single segment of blobs starting from the
   * specified Marker. Use an empty Marker to start enumeration from the beginning.
   * After getting a segment, process it, and then call listBlobsFlatSegment again
   * (passing the the previously-returned Marker) to get the next segment.
   * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs
   *
   * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.
   * @param options - Options to Container List Blob Flat Segment operation.
   */


  ContainerClient.prototype.listBlobFlatSegment = function (marker, options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, response, wrappedResponse, e_12;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = (0, _tracing.createSpan)("ContainerClient-listBlobFlatSegment", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.containerContext.listBlobFlatSegment((0, _tslib.__assign)((0, _tslib.__assign)({
              marker: marker
            }, options), (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            response = _b.sent();
            wrappedResponse = (0, _tslib.__assign)((0, _tslib.__assign)({}, response), {
              _response: response._response,
              segment: (0, _tslib.__assign)((0, _tslib.__assign)({}, response.segment), {
                blobItems: response.segment.blobItems.map(function (blobItemInteral) {
                  var blobItem = (0, _tslib.__assign)((0, _tslib.__assign)({}, blobItemInteral), {
                    tags: (0, _utils.toTags)(blobItemInteral.blobTags),
                    objectReplicationSourceProperties: (0, _utils.parseObjectReplicationRecord)(blobItemInteral.objectReplicationMetadata)
                  });
                  return blobItem;
                })
              })
            });
            return [2
            /*return*/
            , wrappedResponse];

          case 3:
            e_12 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_12.message
            });
            throw e_12;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * listBlobHierarchySegment returns a single segment of blobs starting from
   * the specified Marker. Use an empty Marker to start enumeration from the
   * beginning. After getting a segment, process it, and then call listBlobsHierarchicalSegment
   * again (passing the the previously-returned Marker) to get the next segment.
   * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs
   *
   * @param delimiter - The character or string used to define the virtual hierarchy
   * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.
   * @param options - Options to Container List Blob Hierarchy Segment operation.
   */


  ContainerClient.prototype.listBlobHierarchySegment = function (delimiter, marker, options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, response, wrappedResponse, e_13;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = (0, _tracing.createSpan)("ContainerClient-listBlobHierarchySegment", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.containerContext.listBlobHierarchySegment(delimiter, (0, _tslib.__assign)((0, _tslib.__assign)({
              marker: marker
            }, options), (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            response = _b.sent();
            wrappedResponse = (0, _tslib.__assign)((0, _tslib.__assign)({}, response), {
              _response: response._response,
              segment: (0, _tslib.__assign)((0, _tslib.__assign)({}, response.segment), {
                blobItems: response.segment.blobItems.map(function (blobItemInteral) {
                  var blobItem = (0, _tslib.__assign)((0, _tslib.__assign)({}, blobItemInteral), {
                    tags: (0, _utils.toTags)(blobItemInteral.blobTags),
                    objectReplicationSourceProperties: (0, _utils.parseObjectReplicationRecord)(blobItemInteral.objectReplicationMetadata)
                  });
                  return blobItem;
                })
              })
            });
            return [2
            /*return*/
            , wrappedResponse];

          case 3:
            e_13 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_13.message
            });
            throw e_13;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Returns an AsyncIterableIterator for ContainerListBlobFlatSegmentResponse
   *
   * @param marker - A string value that identifies the portion of
   *                          the list of blobs to be returned with the next listing operation. The
   *                          operation returns the ContinuationToken value within the response body if the
   *                          listing operation did not return all blobs remaining to be listed
   *                          with the current page. The ContinuationToken value can be used as the value for
   *                          the marker parameter in a subsequent call to request the next page of list
   *                          items. The marker value is opaque to the client.
   * @param options - Options to list blobs operation.
   */


  ContainerClient.prototype.listSegments = function (marker, options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__asyncGenerator)(this, arguments, function listSegments_1() {
      var listBlobsFlatSegmentResponse;
      return (0, _tslib.__generator)(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!(!!marker || marker === undefined)) return [3
            /*break*/
            , 7];
            _a.label = 1;

          case 1:
            return [4
            /*yield*/
            , (0, _tslib.__await)(this.listBlobFlatSegment(marker, options))];

          case 2:
            listBlobsFlatSegmentResponse = _a.sent();
            marker = listBlobsFlatSegmentResponse.continuationToken;
            return [4
            /*yield*/
            , (0, _tslib.__await)(listBlobsFlatSegmentResponse)];

          case 3:
            return [4
            /*yield*/
            , _tslib.__await.apply(void 0, [_a.sent()])];

          case 4:
            return [4
            /*yield*/
            , _a.sent()];

          case 5:
            _a.sent();

            _a.label = 6;

          case 6:
            if (marker) return [3
            /*break*/
            , 1];
            _a.label = 7;

          case 7:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Returns an AsyncIterableIterator of {@link BlobItem} objects
   *
   * @param options - Options to list blobs operation.
   */


  ContainerClient.prototype.listItems = function (options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__asyncGenerator)(this, arguments, function listItems_1() {
      var marker, _a, _b, listBlobsFlatSegmentResponse, e_14_1;

      var e_14, _c;

      return (0, _tslib.__generator)(this, function (_d) {
        switch (_d.label) {
          case 0:
            _d.trys.push([0, 7, 8, 13]);

            _a = (0, _tslib.__asyncValues)(this.listSegments(marker, options));
            _d.label = 1;

          case 1:
            return [4
            /*yield*/
            , (0, _tslib.__await)(_a.next())];

          case 2:
            if (!(_b = _d.sent(), !_b.done)) return [3
            /*break*/
            , 6];
            listBlobsFlatSegmentResponse = _b.value;
            return [5
            /*yield**/
            , (0, _tslib.__values)((0, _tslib.__asyncDelegator)((0, _tslib.__asyncValues)(listBlobsFlatSegmentResponse.segment.blobItems)))];

          case 3:
            return [4
            /*yield*/
            , _tslib.__await.apply(void 0, [_d.sent()])];

          case 4:
            _d.sent();

            _d.label = 5;

          case 5:
            return [3
            /*break*/
            , 1];

          case 6:
            return [3
            /*break*/
            , 13];

          case 7:
            e_14_1 = _d.sent();
            e_14 = {
              error: e_14_1
            };
            return [3
            /*break*/
            , 13];

          case 8:
            _d.trys.push([8,, 11, 12]);

            if (!(_b && !_b.done && (_c = _a.return))) return [3
            /*break*/
            , 10];
            return [4
            /*yield*/
            , (0, _tslib.__await)(_c.call(_a))];

          case 9:
            _d.sent();

            _d.label = 10;

          case 10:
            return [3
            /*break*/
            , 12];

          case 11:
            if (e_14) throw e_14.error;
            return [7
            /*endfinally*/
            ];

          case 12:
            return [7
            /*endfinally*/
            ];

          case 13:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Returns an async iterable iterator to list all the blobs
   * under the specified account.
   *
   * .byPage() returns an async iterable iterator to list the blobs in pages.
   *
   * Example using `for await` syntax:
   *
   * ```js
   * // Get the containerClient before you run these snippets,
   * // Can be obtained from `blobServiceClient.getContainerClient("<your-container-name>");`
   * let i = 1;
   * for await (const blob of containerClient.listBlobsFlat()) {
   *   console.log(`Blob ${i++}: ${blob.name}`);
   * }
   * ```
   *
   * Example using `iter.next()`:
   *
   * ```js
   * let i = 1;
   * let iter = containerClient.listBlobsFlat();
   * let blobItem = await iter.next();
   * while (!blobItem.done) {
   *   console.log(`Blob ${i++}: ${blobItem.value.name}`);
   *   blobItem = await iter.next();
   * }
   * ```
   *
   * Example using `byPage()`:
   *
   * ```js
   * // passing optional maxPageSize in the page settings
   * let i = 1;
   * for await (const response of containerClient.listBlobsFlat().byPage({ maxPageSize: 20 })) {
   *   for (const blob of response.segment.blobItems) {
   *     console.log(`Blob ${i++}: ${blob.name}`);
   *   }
   * }
   * ```
   *
   * Example using paging with a marker:
   *
   * ```js
   * let i = 1;
   * let iterator = containerClient.listBlobsFlat().byPage({ maxPageSize: 2 });
   * let response = (await iterator.next()).value;
   *
   * // Prints 2 blob names
   * for (const blob of response.segment.blobItems) {
   *   console.log(`Blob ${i++}: ${blob.name}`);
   * }
   *
   * // Gets next marker
   * let marker = response.continuationToken;
   *
   * // Passing next marker as continuationToken
   *
   * iterator = containerClient.listBlobsFlat().byPage({ continuationToken: marker, maxPageSize: 10 });
   * response = (await iterator.next()).value;
   *
   * // Prints 10 blob names
   * for (const blob of response.segment.blobItems) {
   *   console.log(`Blob ${i++}: ${blob.name}`);
   * }
   * ```
   *
   * @param options - Options to list blobs.
   * @returns An asyncIterableIterator that supports paging.
   */


  ContainerClient.prototype.listBlobsFlat = function (options) {
    var _a;

    var _this = this;

    if (options === void 0) {
      options = {};
    }

    var include = [];

    if (options.includeCopy) {
      include.push("copy");
    }

    if (options.includeDeleted) {
      include.push("deleted");
    }

    if (options.includeMetadata) {
      include.push("metadata");
    }

    if (options.includeSnapshots) {
      include.push("snapshots");
    }

    if (options.includeVersions) {
      include.push("versions");
    }

    if (options.includeUncommitedBlobs) {
      include.push("uncommittedblobs");
    }

    if (options.includeTags) {
      include.push("tags");
    }

    if (options.prefix === "") {
      options.prefix = undefined;
    }

    var updatedOptions = (0, _tslib.__assign)((0, _tslib.__assign)({}, options), include.length > 0 ? {
      include: include
    } : {}); // AsyncIterableIterator to iterate over blobs

    var iter = this.listItems(updatedOptions);
    return _a = {
      /**
       * The next method, part of the iteration protocol
       */
      next: function () {
        return iter.next();
      }
    },
    /**
     * The connection to the async iterator, part of the iteration protocol
     */
    _a[Symbol.asyncIterator] = function () {
      return this;
    },
    /**
     * Return an AsyncIterableIterator that works a page at a time
     */
    _a.byPage = function (settings) {
      if (settings === void 0) {
        settings = {};
      }

      return _this.listSegments(settings.continuationToken, (0, _tslib.__assign)({
        maxPageSize: settings.maxPageSize
      }, updatedOptions));
    }, _a;
  };
  /**
   * Returns an AsyncIterableIterator for ContainerListBlobHierarchySegmentResponse
   *
   * @param delimiter - The character or string used to define the virtual hierarchy
   * @param marker - A string value that identifies the portion of
   *                          the list of blobs to be returned with the next listing operation. The
   *                          operation returns the ContinuationToken value within the response body if the
   *                          listing operation did not return all blobs remaining to be listed
   *                          with the current page. The ContinuationToken value can be used as the value for
   *                          the marker parameter in a subsequent call to request the next page of list
   *                          items. The marker value is opaque to the client.
   * @param options - Options to list blobs operation.
   */


  ContainerClient.prototype.listHierarchySegments = function (delimiter, marker, options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__asyncGenerator)(this, arguments, function listHierarchySegments_1() {
      var listBlobsHierarchySegmentResponse;
      return (0, _tslib.__generator)(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!(!!marker || marker === undefined)) return [3
            /*break*/
            , 7];
            _a.label = 1;

          case 1:
            return [4
            /*yield*/
            , (0, _tslib.__await)(this.listBlobHierarchySegment(delimiter, marker, options))];

          case 2:
            listBlobsHierarchySegmentResponse = _a.sent();
            marker = listBlobsHierarchySegmentResponse.continuationToken;
            return [4
            /*yield*/
            , (0, _tslib.__await)(listBlobsHierarchySegmentResponse)];

          case 3:
            return [4
            /*yield*/
            , _tslib.__await.apply(void 0, [_a.sent()])];

          case 4:
            return [4
            /*yield*/
            , _a.sent()];

          case 5:
            _a.sent();

            _a.label = 6;

          case 6:
            if (marker) return [3
            /*break*/
            , 1];
            _a.label = 7;

          case 7:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Returns an AsyncIterableIterator for {@link BlobPrefix} and {@link BlobItem} objects.
   *
   * @param delimiter - The character or string used to define the virtual hierarchy
   * @param options - Options to list blobs operation.
   */


  ContainerClient.prototype.listItemsByHierarchy = function (delimiter, options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__asyncGenerator)(this, arguments, function listItemsByHierarchy_1() {
      var marker, _a, _b, listBlobsHierarchySegmentResponse, segment, _i, _c, prefix, _d, _e, blob, e_15_1;

      var e_15, _f;

      return (0, _tslib.__generator)(this, function (_g) {
        switch (_g.label) {
          case 0:
            _g.trys.push([0, 14, 15, 20]);

            _a = (0, _tslib.__asyncValues)(this.listHierarchySegments(delimiter, marker, options));
            _g.label = 1;

          case 1:
            return [4
            /*yield*/
            , (0, _tslib.__await)(_a.next())];

          case 2:
            if (!(_b = _g.sent(), !_b.done)) return [3
            /*break*/
            , 13];
            listBlobsHierarchySegmentResponse = _b.value;
            segment = listBlobsHierarchySegmentResponse.segment;
            if (!segment.blobPrefixes) return [3
            /*break*/
            , 7];
            _i = 0, _c = segment.blobPrefixes;
            _g.label = 3;

          case 3:
            if (!(_i < _c.length)) return [3
            /*break*/
            , 7];
            prefix = _c[_i];
            return [4
            /*yield*/
            , (0, _tslib.__await)((0, _tslib.__assign)({
              kind: "prefix"
            }, prefix))];

          case 4:
            return [4
            /*yield*/
            , _g.sent()];

          case 5:
            _g.sent();

            _g.label = 6;

          case 6:
            _i++;
            return [3
            /*break*/
            , 3];

          case 7:
            _d = 0, _e = segment.blobItems;
            _g.label = 8;

          case 8:
            if (!(_d < _e.length)) return [3
            /*break*/
            , 12];
            blob = _e[_d];
            return [4
            /*yield*/
            , (0, _tslib.__await)((0, _tslib.__assign)({
              kind: "blob"
            }, blob))];

          case 9:
            return [4
            /*yield*/
            , _g.sent()];

          case 10:
            _g.sent();

            _g.label = 11;

          case 11:
            _d++;
            return [3
            /*break*/
            , 8];

          case 12:
            return [3
            /*break*/
            , 1];

          case 13:
            return [3
            /*break*/
            , 20];

          case 14:
            e_15_1 = _g.sent();
            e_15 = {
              error: e_15_1
            };
            return [3
            /*break*/
            , 20];

          case 15:
            _g.trys.push([15,, 18, 19]);

            if (!(_b && !_b.done && (_f = _a.return))) return [3
            /*break*/
            , 17];
            return [4
            /*yield*/
            , (0, _tslib.__await)(_f.call(_a))];

          case 16:
            _g.sent();

            _g.label = 17;

          case 17:
            return [3
            /*break*/
            , 19];

          case 18:
            if (e_15) throw e_15.error;
            return [7
            /*endfinally*/
            ];

          case 19:
            return [7
            /*endfinally*/
            ];

          case 20:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Returns an async iterable iterator to list all the blobs by hierarchy.
   * under the specified account.
   *
   * .byPage() returns an async iterable iterator to list the blobs by hierarchy in pages.
   *
   * Example using `for await` syntax:
   *
   * ```js
   * for await (const item of containerClient.listBlobsByHierarchy("/")) {
   *   if (item.kind === "prefix") {
   *     console.log(`\tBlobPrefix: ${item.name}`);
   *   } else {
   *     console.log(`\tBlobItem: name - ${item.name}, last modified - ${item.properties.lastModified}`);
   *   }
   * }
   * ```
   *
   * Example using `iter.next()`:
   *
   * ```js
   * let iter = containerClient.listBlobsByHierarchy("/", { prefix: "prefix1/" });
   * let entity = await iter.next();
   * while (!entity.done) {
   *   let item = entity.value;
   *   if (item.kind === "prefix") {
   *     console.log(`\tBlobPrefix: ${item.name}`);
   *   } else {
   *     console.log(`\tBlobItem: name - ${item.name}, last modified - ${item.properties.lastModified}`);
   *   }
   *   entity = await iter.next();
   * }
   * ```
   *
   * Example using `byPage()`:
   *
   * ```js
   * console.log("Listing blobs by hierarchy by page");
   * for await (const response of containerClient.listBlobsByHierarchy("/").byPage()) {
   *   const segment = response.segment;
   *   if (segment.blobPrefixes) {
   *     for (const prefix of segment.blobPrefixes) {
   *       console.log(`\tBlobPrefix: ${prefix.name}`);
   *     }
   *   }
   *   for (const blob of response.segment.blobItems) {
   *     console.log(`\tBlobItem: name - ${blob.name}, last modified - ${blob.properties.lastModified}`);
   *   }
   * }
   * ```
   *
   * Example using paging with a max page size:
   *
   * ```js
   * console.log("Listing blobs by hierarchy by page, specifying a prefix and a max page size");
   *
   * let i = 1;
   * for await (const response of containerClient.listBlobsByHierarchy("/", { prefix: "prefix2/sub1/"}).byPage({ maxPageSize: 2 })) {
   *   console.log(`Page ${i++}`);
   *   const segment = response.segment;
   *
   *   if (segment.blobPrefixes) {
   *     for (const prefix of segment.blobPrefixes) {
   *       console.log(`\tBlobPrefix: ${prefix.name}`);
   *     }
   *   }
   *
   *   for (const blob of response.segment.blobItems) {
   *     console.log(`\tBlobItem: name - ${blob.name}, last modified - ${blob.properties.lastModified}`);
   *   }
   * }
   * ```
   *
   * @param delimiter - The character or string used to define the virtual hierarchy
   * @param options - Options to list blobs operation.
   */


  ContainerClient.prototype.listBlobsByHierarchy = function (delimiter, options) {
    var _a;

    var _this = this;

    if (options === void 0) {
      options = {};
    }

    if (delimiter === "") {
      throw new RangeError("delimiter should contain one or more characters");
    }

    var include = [];

    if (options.includeCopy) {
      include.push("copy");
    }

    if (options.includeDeleted) {
      include.push("deleted");
    }

    if (options.includeMetadata) {
      include.push("metadata");
    }

    if (options.includeSnapshots) {
      include.push("snapshots");
    }

    if (options.includeVersions) {
      include.push("versions");
    }

    if (options.includeUncommitedBlobs) {
      include.push("uncommittedblobs");
    }

    if (options.includeTags) {
      include.push("tags");
    }

    if (options.prefix === "") {
      options.prefix = undefined;
    }

    var updatedOptions = (0, _tslib.__assign)((0, _tslib.__assign)({}, options), include.length > 0 ? {
      include: include
    } : {}); // AsyncIterableIterator to iterate over blob prefixes and blobs

    var iter = this.listItemsByHierarchy(delimiter, updatedOptions);
    return _a = {
      /**
       * The next method, part of the iteration protocol
       */
      next: function () {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
          return (0, _tslib.__generator)(this, function (_a) {
            return [2
            /*return*/
            , iter.next()];
          });
        });
      }
    },
    /**
     * The connection to the async iterator, part of the iteration protocol
     */
    _a[Symbol.asyncIterator] = function () {
      return this;
    },
    /**
     * Return an AsyncIterableIterator that works a page at a time
     */
    _a.byPage = function (settings) {
      if (settings === void 0) {
        settings = {};
      }

      return _this.listHierarchySegments(delimiter, settings.continuationToken, (0, _tslib.__assign)({
        maxPageSize: settings.maxPageSize
      }, updatedOptions));
    }, _a;
  };

  ContainerClient.prototype.getContainerNameFromUrl = function () {
    var containerName;

    try {
      //  URL may look like the following
      // "https://myaccount.blob.core.windows.net/mycontainer?sasString";
      // "https://myaccount.blob.core.windows.net/mycontainer";
      // IPv4/IPv6 address hosts, Endpoints - `http://127.0.0.1:10000/devstoreaccount1/containername`
      // http://localhost:10001/devstoreaccount1/containername
      var parsedUrl = _coreHttp.URLBuilder.parse(this.url);

      if (parsedUrl.getHost().split(".")[1] === "blob") {
        // "https://myaccount.blob.core.windows.net/containername".
        // "https://customdomain.com/containername".
        // .getPath() -> /containername
        containerName = parsedUrl.getPath().split("/")[1];
      } else if ((0, _utils.isIpEndpointStyle)(parsedUrl)) {
        // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/containername
        // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/containername
        // .getPath() -> /devstoreaccount1/containername
        containerName = parsedUrl.getPath().split("/")[2];
      } else {
        // "https://customdomain.com/containername".
        // .getPath() -> /containername
        containerName = parsedUrl.getPath().split("/")[1];
      } // decode the encoded containerName - to get all the special characters that might be present in it


      containerName = decodeURIComponent(containerName);

      if (!containerName) {
        throw new Error("Provided containerName is invalid.");
      }

      return containerName;
    } catch (error) {
      throw new Error("Unable to extract containerName with provided information.");
    }
  };
  /**
   * Only available for ContainerClient constructed with a shared key credential.
   *
   * Generates a Blob Container Service Shared Access Signature (SAS) URI based on the client properties
   * and parameters passed in. The SAS is signed by the shared key credential of the client.
   *
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
   *
   * @param options - Optional parameters.
   * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
   */


  ContainerClient.prototype.generateSasUrl = function (options) {
    var _this = this;

    return new Promise(function (resolve) {
      if (!(_this.credential instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential)) {
        throw new RangeError("Can only generate the SAS when the client is initialized with a shared key credential");
      }

      var sas = (0, _BlobSASSignatureValues.generateBlobSASQueryParameters)((0, _tslib.__assign)({
        containerName: _this._containerName
      }, options), _this.credential).toString();
      resolve((0, _utils.appendToURLQuery)(_this.url, sas));
    });
  };
  /**
   * Creates a BlobBatchClient object to conduct batch operations.
   *
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch
   *
   * @returns A new BlobBatchClient object for this container.
   */


  ContainerClient.prototype.getBlobBatchClient = function () {
    return new _BlobBatchClient.BlobBatchClient(this.url, this.pipeline);
  };

  return ContainerClient;
}(_StorageClient.StorageClient);

exports.ContainerClient = ContainerClient;
},{"tslib":"node_modules/tslib/tslib.es6.js","@azure/core-http":"node_modules/@azure/core-http/es/src/coreHttp.js","@opentelemetry/api":"node_modules/@opentelemetry/api/build/src/index.js","./credentials/AnonymousCredential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js","./credentials/StorageSharedKeyCredential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js","./generated/src/operations":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/index.js","./Pipeline":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js","./StorageClient":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js","./utils/tracing":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js","./utils/utils.common":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js","./sas/BlobSASSignatureValues":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js","./BlobLeaseClient":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js","./Clients":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js","./BlobBatchClient":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js"}],"node_modules/@azure/core-paging/dist-esm/src/index.js":[function(require,module,exports) {
"use strict";

require("@azure/core-asynciterator-polyfill");
},{"@azure/core-asynciterator-polyfill":"node_modules/@azure/core-asynciterator-polyfill/dist-esm/index.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASPermissions.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccountSASPermissions = void 0;

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 *
 * This is a helper class to construct a string representing the permissions granted by an AccountSAS. Setting a value
 * to true means that any SAS which uses these permissions will grant permissions for that operation. Once all the
 * values are set, this should be serialized with toString and set as the permissions field on an
 * {@link AccountSASSignatureValues} object. It is possible to construct the permissions string without this class, but
 * the order of the permissions is particular and this class guarantees correctness.
 */
var AccountSASPermissions =
/** @class */
function () {
  function AccountSASPermissions() {
    /**
     * Permission to read resources and list queues and tables granted.
     */
    this.read = false;
    /**
     * Permission to write resources granted.
     */

    this.write = false;
    /**
     * Permission to create blobs and files granted.
     */

    this.delete = false;
    /**
     * Permission to delete versions granted.
     */

    this.deleteVersion = false;
    /**
     * Permission to list blob containers, blobs, shares, directories, and files granted.
     */

    this.list = false;
    /**
     * Permission to add messages, table entities, and append to blobs granted.
     */

    this.add = false;
    /**
     * Permission to create blobs and files granted.
     */

    this.create = false;
    /**
     * Permissions to update messages and table entities granted.
     */

    this.update = false;
    /**
     * Permission to get and delete messages granted.
     */

    this.process = false;
    /**
     * Specfies Tag access granted.
     */

    this.tag = false;
    /**
     * Permission to filter blobs.
     */

    this.filter = false;
  }
  /**
   * Parse initializes the AccountSASPermissions fields from a string.
   *
   * @param permissions -
   */


  AccountSASPermissions.parse = function (permissions) {
    var accountSASPermissions = new AccountSASPermissions();

    for (var _i = 0, permissions_1 = permissions; _i < permissions_1.length; _i++) {
      var c = permissions_1[_i];

      switch (c) {
        case "r":
          accountSASPermissions.read = true;
          break;

        case "w":
          accountSASPermissions.write = true;
          break;

        case "d":
          accountSASPermissions.delete = true;
          break;

        case "x":
          accountSASPermissions.deleteVersion = true;
          break;

        case "l":
          accountSASPermissions.list = true;
          break;

        case "a":
          accountSASPermissions.add = true;
          break;

        case "c":
          accountSASPermissions.create = true;
          break;

        case "u":
          accountSASPermissions.update = true;
          break;

        case "p":
          accountSASPermissions.process = true;
          break;

        case "t":
          accountSASPermissions.tag = true;
          break;

        case "f":
          accountSASPermissions.filter = true;
          break;

        default:
          throw new RangeError("Invalid permission character: " + c);
      }
    }

    return accountSASPermissions;
  };
  /**
   * Creates a {@link AccountSASPermissions} from a raw object which contains same keys as it
   * and boolean values for them.
   *
   * @param permissionLike -
   */


  AccountSASPermissions.from = function (permissionLike) {
    var accountSASPermissions = new AccountSASPermissions();

    if (permissionLike.read) {
      accountSASPermissions.read = true;
    }

    if (permissionLike.write) {
      accountSASPermissions.write = true;
    }

    if (permissionLike.delete) {
      accountSASPermissions.delete = true;
    }

    if (permissionLike.deleteVersion) {
      accountSASPermissions.deleteVersion = true;
    }

    if (permissionLike.filter) {
      accountSASPermissions.filter = true;
    }

    if (permissionLike.tag) {
      accountSASPermissions.tag = true;
    }

    if (permissionLike.list) {
      accountSASPermissions.list = true;
    }

    if (permissionLike.add) {
      accountSASPermissions.add = true;
    }

    if (permissionLike.create) {
      accountSASPermissions.create = true;
    }

    if (permissionLike.update) {
      accountSASPermissions.update = true;
    }

    if (permissionLike.process) {
      accountSASPermissions.process = true;
    }

    return accountSASPermissions;
  };
  /**
   * Produces the SAS permissions string for an Azure Storage account.
   * Call this method to set AccountSASSignatureValues Permissions field.
   *
   * Using this method will guarantee the resource types are in
   * an order accepted by the service.
   *
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas
   *
   */


  AccountSASPermissions.prototype.toString = function () {
    // The order of the characters should be as specified here to ensure correctness:
    // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas
    // Use a string array instead of string concatenating += operator for performance
    var permissions = [];

    if (this.read) {
      permissions.push("r");
    }

    if (this.write) {
      permissions.push("w");
    }

    if (this.delete) {
      permissions.push("d");
    }

    if (this.deleteVersion) {
      permissions.push("x");
    }

    if (this.filter) {
      permissions.push("f");
    }

    if (this.tag) {
      permissions.push("t");
    }

    if (this.list) {
      permissions.push("l");
    }

    if (this.add) {
      permissions.push("a");
    }

    if (this.create) {
      permissions.push("c");
    }

    if (this.update) {
      permissions.push("u");
    }

    if (this.process) {
      permissions.push("p");
    }

    return permissions.join("");
  };

  return AccountSASPermissions;
}();

exports.AccountSASPermissions = AccountSASPermissions;
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASResourceTypes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccountSASResourceTypes = void 0;

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 *
 * This is a helper class to construct a string representing the resources accessible by an AccountSAS. Setting a value
 * to true means that any SAS which uses these permissions will grant access to that resource type. Once all the
 * values are set, this should be serialized with toString and set as the resources field on an
 * {@link AccountSASSignatureValues} object. It is possible to construct the resources string without this class, but
 * the order of the resources is particular and this class guarantees correctness.
 */
var AccountSASResourceTypes =
/** @class */
function () {
  function AccountSASResourceTypes() {
    /**
     * Permission to access service level APIs granted.
     */
    this.service = false;
    /**
     * Permission to access container level APIs (Blob Containers, Tables, Queues, File Shares) granted.
     */

    this.container = false;
    /**
     * Permission to access object level APIs (Blobs, Table Entities, Queue Messages, Files) granted.
     */

    this.object = false;
  }
  /**
   * Creates an {@link AccountSASResourceTypes} from the specified resource types string. This method will throw an
   * Error if it encounters a character that does not correspond to a valid resource type.
   *
   * @param resourceTypes -
   */


  AccountSASResourceTypes.parse = function (resourceTypes) {
    var accountSASResourceTypes = new AccountSASResourceTypes();

    for (var _i = 0, resourceTypes_1 = resourceTypes; _i < resourceTypes_1.length; _i++) {
      var c = resourceTypes_1[_i];

      switch (c) {
        case "s":
          accountSASResourceTypes.service = true;
          break;

        case "c":
          accountSASResourceTypes.container = true;
          break;

        case "o":
          accountSASResourceTypes.object = true;
          break;

        default:
          throw new RangeError("Invalid resource type: " + c);
      }
    }

    return accountSASResourceTypes;
  };
  /**
   * Converts the given resource types to a string.
   *
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas
   *
   */


  AccountSASResourceTypes.prototype.toString = function () {
    var resourceTypes = [];

    if (this.service) {
      resourceTypes.push("s");
    }

    if (this.container) {
      resourceTypes.push("c");
    }

    if (this.object) {
      resourceTypes.push("o");
    }

    return resourceTypes.join("");
  };

  return AccountSASResourceTypes;
}();

exports.AccountSASResourceTypes = AccountSASResourceTypes;
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASServices.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccountSASServices = void 0;

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 *
 * This is a helper class to construct a string representing the services accessible by an AccountSAS. Setting a value
 * to true means that any SAS which uses these permissions will grant access to that service. Once all the
 * values are set, this should be serialized with toString and set as the services field on an
 * {@link AccountSASSignatureValues} object. It is possible to construct the services string without this class, but
 * the order of the services is particular and this class guarantees correctness.
 */
var AccountSASServices =
/** @class */
function () {
  function AccountSASServices() {
    /**
     * Permission to access blob resources granted.
     */
    this.blob = false;
    /**
     * Permission to access file resources granted.
     */

    this.file = false;
    /**
     * Permission to access queue resources granted.
     */

    this.queue = false;
    /**
     * Permission to access table resources granted.
     */

    this.table = false;
  }
  /**
   * Creates an {@link AccountSASServices} from the specified services string. This method will throw an
   * Error if it encounters a character that does not correspond to a valid service.
   *
   * @param services -
   */


  AccountSASServices.parse = function (services) {
    var accountSASServices = new AccountSASServices();

    for (var _i = 0, services_1 = services; _i < services_1.length; _i++) {
      var c = services_1[_i];

      switch (c) {
        case "b":
          accountSASServices.blob = true;
          break;

        case "f":
          accountSASServices.file = true;
          break;

        case "q":
          accountSASServices.queue = true;
          break;

        case "t":
          accountSASServices.table = true;
          break;

        default:
          throw new RangeError("Invalid service character: " + c);
      }
    }

    return accountSASServices;
  };
  /**
   * Converts the given services to a string.
   *
   */


  AccountSASServices.prototype.toString = function () {
    var services = [];

    if (this.blob) {
      services.push("b");
    }

    if (this.table) {
      services.push("t");
    }

    if (this.queue) {
      services.push("q");
    }

    if (this.file) {
      services.push("f");
    }

    return services.join("");
  };

  return AccountSASServices;
}();

exports.AccountSASServices = AccountSASServices;
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASSignatureValues.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateAccountSASQueryParameters = generateAccountSASQueryParameters;

var _AccountSASPermissions = require("./AccountSASPermissions");

var _AccountSASResourceTypes = require("./AccountSASResourceTypes");

var _AccountSASServices = require("./AccountSASServices");

var _SasIPRange = require("./SasIPRange");

var _SASQueryParameters = require("./SASQueryParameters");

var _constants = require("../utils/constants");

var _utils = require("../utils/utils.common");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 *
 * Generates a {@link SASQueryParameters} object which contains all SAS query parameters needed to make an actual
 * REST request.
 *
 * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas
 *
 * @param accountSASSignatureValues -
 * @param sharedKeyCredential -
 */
function generateAccountSASQueryParameters(accountSASSignatureValues, sharedKeyCredential) {
  var version = accountSASSignatureValues.version ? accountSASSignatureValues.version : _constants.SERVICE_VERSION;

  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.deleteVersion && version < "2019-10-10") {
    throw RangeError("'version' must be >= '2019-10-10' when provided 'x' permission.");
  }

  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.tag && version < "2019-12-12") {
    throw RangeError("'version' must be >= '2019-12-12' when provided 't' permission.");
  }

  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.filter && version < "2019-12-12") {
    throw RangeError("'version' must be >= '2019-12-12' when provided 'f' permission.");
  }

  var parsedPermissions = _AccountSASPermissions.AccountSASPermissions.parse(accountSASSignatureValues.permissions.toString());

  var parsedServices = _AccountSASServices.AccountSASServices.parse(accountSASSignatureValues.services).toString();

  var parsedResourceTypes = _AccountSASResourceTypes.AccountSASResourceTypes.parse(accountSASSignatureValues.resourceTypes).toString();

  var stringToSign = [sharedKeyCredential.accountName, parsedPermissions, parsedServices, parsedResourceTypes, accountSASSignatureValues.startsOn ? (0, _utils.truncatedISO8061Date)(accountSASSignatureValues.startsOn, false) : "", (0, _utils.truncatedISO8061Date)(accountSASSignatureValues.expiresOn, false), accountSASSignatureValues.ipRange ? (0, _SasIPRange.ipRangeToString)(accountSASSignatureValues.ipRange) : "", accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : "", version, "" // Account SAS requires an additional newline character
  ].join("\n");
  var signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
  return new _SASQueryParameters.SASQueryParameters(version, signature, parsedPermissions.toString(), parsedServices, parsedResourceTypes, accountSASSignatureValues.protocol, accountSASSignatureValues.startsOn, accountSASSignatureValues.expiresOn, accountSASSignatureValues.ipRange);
}
},{"./AccountSASPermissions":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASPermissions.js","./AccountSASResourceTypes":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASResourceTypes.js","./AccountSASServices":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASServices.js","./SasIPRange":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js","./SASQueryParameters":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js","../utils/constants":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js","../utils/utils.common":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobServiceClient.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlobServiceClient = void 0;

var _tslib = require("tslib");

var _coreHttp = require("@azure/core-http");

var _api = require("@opentelemetry/api");

var _operations = require("./generated/src/operations");

var _Pipeline = require("./Pipeline");

var _ContainerClient = require("./ContainerClient");

var _utils = require("./utils/utils.common");

var _StorageSharedKeyCredential = require("./credentials/StorageSharedKeyCredential");

var _AnonymousCredential = require("./credentials/AnonymousCredential");

require("@azure/core-paging");

var _tracing = require("./utils/tracing");

var _BlobBatchClient = require("./BlobBatchClient");

var _StorageClient = require("./StorageClient");

var _AccountSASPermissions = require("./sas/AccountSASPermissions");

var _AccountSASSignatureValues = require("./sas/AccountSASSignatureValues");

var _AccountSASServices = require("./sas/AccountSASServices");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * A BlobServiceClient represents a Client to the Azure Storage Blob service allowing you
 * to manipulate blob containers.
 */
var BlobServiceClient =
/** @class */
function (_super) {
  (0, _tslib.__extends)(BlobServiceClient, _super);

  function BlobServiceClient(url, credentialOrPipeline, options) {
    var _this = this;

    var pipeline;

    if (credentialOrPipeline instanceof _Pipeline.Pipeline) {
      pipeline = credentialOrPipeline;
    } else if (_coreHttp.isNode && credentialOrPipeline instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential || credentialOrPipeline instanceof _AnonymousCredential.AnonymousCredential || (0, _coreHttp.isTokenCredential)(credentialOrPipeline)) {
      pipeline = (0, _Pipeline.newPipeline)(credentialOrPipeline, options);
    } else {
      // The second parameter is undefined. Use anonymous credential
      pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
    }

    _this = _super.call(this, url, pipeline) || this;
    _this.serviceContext = new _operations.Service(_this.storageClientContext);
    return _this;
  }
  /**
   *
   * Creates an instance of BlobServiceClient from connection string.
   *
   * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.
   *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]
   *                                  Account connection string example -
   *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
   *                                  SAS connection string example -
   *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
   * @param options - Optional. Options to configure the HTTP pipeline.
   */


  BlobServiceClient.fromConnectionString = function (connectionString, options) {
    options = options || {};
    var extractedCreds = (0, _utils.extractConnectionStringParts)(connectionString);

    if (extractedCreds.kind === "AccountConnString") {
      if (_coreHttp.isNode) {
        var sharedKeyCredential = new _StorageSharedKeyCredential.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
        options.proxyOptions = (0, _coreHttp.getDefaultProxySettings)(extractedCreds.proxyUri);
        var pipeline = (0, _Pipeline.newPipeline)(sharedKeyCredential, options);
        return new BlobServiceClient(extractedCreds.url, pipeline);
      } else {
        throw new Error("Account connection string is only supported in Node.js environment");
      }
    } else if (extractedCreds.kind === "SASConnString") {
      var pipeline = (0, _Pipeline.newPipeline)(new _AnonymousCredential.AnonymousCredential(), options);
      return new BlobServiceClient(extractedCreds.url + "?" + extractedCreds.accountSas, pipeline);
    } else {
      throw new Error("Connection string must be either an Account connection string or a SAS connection string");
    }
  };
  /**
   * Creates a {@link ContainerClient} object
   *
   * @param containerName - A container name
   * @returns A new ContainerClient object for the given container name.
   *
   * Example usage:
   *
   * ```js
   * const containerClient = blobServiceClient.getContainerClient("<container name>");
   * ```
   */


  BlobServiceClient.prototype.getContainerClient = function (containerName) {
    return new _ContainerClient.ContainerClient((0, _utils.appendToURLPath)(this.url, encodeURIComponent(containerName)), this.pipeline);
  };
  /**
   * Create a Blob container.
   *
   * @param containerName - Name of the container to create.
   * @param options - Options to configure Container Create operation.
   * @returns Container creation response and the corresponding container client.
   */


  BlobServiceClient.prototype.createContainer = function (containerName, options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, containerClient, containerCreateResponse, e_1;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = (0, _tracing.createSpan)("BlobServiceClient-createContainer", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 3, 4, 5]);

            containerClient = this.getContainerClient(containerName);
            return [4
            /*yield*/
            , containerClient.create(updatedOptions)];

          case 2:
            containerCreateResponse = _b.sent();
            return [2
            /*return*/
            , {
              containerClient: containerClient,
              containerCreateResponse: containerCreateResponse
            }];

          case 3:
            e_1 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_1.message
            });
            throw e_1;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Deletes a Blob container.
   *
   * @param containerName - Name of the container to delete.
   * @param options - Options to configure Container Delete operation.
   * @returns Container deletion response.
   */


  BlobServiceClient.prototype.deleteContainer = function (containerName, options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, containerClient, e_2;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = (0, _tracing.createSpan)("BlobServiceClient-deleteContainer", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 3, 4, 5]);

            containerClient = this.getContainerClient(containerName);
            return [4
            /*yield*/
            , containerClient.delete(updatedOptions)];

          case 2:
            return [2
            /*return*/
            , _b.sent()];

          case 3:
            e_2 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_2.message
            });
            throw e_2;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Restore a previously deleted Blob container.
   * This API is only functional if Container Soft Delete is enabled for the storage account associated with the container.
   *
   * @param deletedContainerName - Name of the previously deleted container.
   * @param deletedContainerVersion - Version of the previously deleted container, used to uniquely identify the deleted container.
   * @param options - Options to configure Container Restore operation.
   * @returns Container deletion response.
   */


  BlobServiceClient.prototype.undeleteContainer = function (deletedContainerName, deletedContainerVersion, options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, containerClient, containerContext, containerUndeleteResponse, e_3;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = (0, _tracing.createSpan)("BlobServiceClient-undeleteContainer", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 3, 4, 5]);

            containerClient = this.getContainerClient(options.destinationContainerName || deletedContainerName);
            containerContext = new _operations.Container(containerClient["storageClientContext"]);
            return [4
            /*yield*/
            , containerContext.restore((0, _tslib.__assign)({
              deletedContainerName: deletedContainerName,
              deletedContainerVersion: deletedContainerVersion
            }, updatedOptions))];

          case 2:
            containerUndeleteResponse = _b.sent();
            return [2
            /*return*/
            , {
              containerClient: containerClient,
              containerUndeleteResponse: containerUndeleteResponse
            }];

          case 3:
            e_3 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_3.message
            });
            throw e_3;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Rename an existing Blob Container.
   *
   * @param sourceContainerName - The name of the source container.
   * @param destinationContainerName - The new name of the container.
   * @param options - Options to configure Container Rename operation.
   */
  // @ts-ignore Need to hide this interface for now. Make it public and turn on the live tests for it when the service is ready.


  BlobServiceClient.prototype.renameContainer = function (sourceContainerName, destinationContainerName, options) {
    var _a;

    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _b, span, updatedOptions, containerClient, containerContext, containerRenameResponse, e_4;

      return (0, _tslib.__generator)(this, function (_c) {
        switch (_c.label) {
          case 0:
            _b = (0, _tracing.createSpan)("BlobServiceClient-renameContainer", options), span = _b.span, updatedOptions = _b.updatedOptions;
            _c.label = 1;

          case 1:
            _c.trys.push([1, 3, 4, 5]);

            containerClient = this.getContainerClient(destinationContainerName);
            containerContext = new _operations.Container(containerClient["storageClientContext"]);
            return [4
            /*yield*/
            , containerContext.rename(sourceContainerName, (0, _tslib.__assign)((0, _tslib.__assign)({}, updatedOptions), {
              sourceLeaseId: (_a = options.sourceCondition) === null || _a === void 0 ? void 0 : _a.leaseId
            }))];

          case 2:
            containerRenameResponse = _c.sent();
            return [2
            /*return*/
            , {
              containerClient: containerClient,
              containerRenameResponse: containerRenameResponse
            }];

          case 3:
            e_4 = _c.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_4.message
            });
            throw e_4;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Gets the properties of a storage account’s Blob service, including properties
   * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties
   *
   * @param options - Options to the Service Get Properties operation.
   * @returns Response data for the Service Get Properties operation.
   */


  BlobServiceClient.prototype.getProperties = function (options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, e_5;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = (0, _tracing.createSpan)("BlobServiceClient-getProperties", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.serviceContext.getProperties((0, _tslib.__assign)({
              abortSignal: options.abortSignal
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _b.sent()];

          case 3:
            e_5 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_5.message
            });
            throw e_5;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Sets properties for a storage account’s Blob service endpoint, including properties
   * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties
   *
   * @param properties -
   * @param options - Options to the Service Set Properties operation.
   * @returns Response data for the Service Set Properties operation.
   */


  BlobServiceClient.prototype.setProperties = function (properties, options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, e_6;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = (0, _tracing.createSpan)("BlobServiceClient-setProperties", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.serviceContext.setProperties(properties, (0, _tslib.__assign)({
              abortSignal: options.abortSignal
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _b.sent()];

          case 3:
            e_6 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_6.message
            });
            throw e_6;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Retrieves statistics related to replication for the Blob service. It is only
   * available on the secondary location endpoint when read-access geo-redundant
   * replication is enabled for the storage account.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-stats
   *
   * @param options - Options to the Service Get Statistics operation.
   * @returns Response data for the Service Get Statistics operation.
   */


  BlobServiceClient.prototype.getStatistics = function (options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, e_7;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = (0, _tracing.createSpan)("BlobServiceClient-getStatistics", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.serviceContext.getStatistics((0, _tslib.__assign)({
              abortSignal: options.abortSignal
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _b.sent()];

          case 3:
            e_7 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_7.message
            });
            throw e_7;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * The Get Account Information operation returns the sku name and account kind
   * for the specified account.
   * The Get Account Information operation is available on service versions beginning
   * with version 2018-03-28.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information
   *
   * @param options - Options to the Service Get Account Info operation.
   * @returns Response data for the Service Get Account Info operation.
   */


  BlobServiceClient.prototype.getAccountInfo = function (options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, e_8;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = (0, _tracing.createSpan)("BlobServiceClient-getAccountInfo", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.serviceContext.getAccountInfo((0, _tslib.__assign)({
              abortSignal: options.abortSignal
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _b.sent()];

          case 3:
            e_8 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_8.message
            });
            throw e_8;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Returns a list of the containers under the specified account.
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-containers2
   *
   * @param marker - A string value that identifies the portion of
   *                        the list of containers to be returned with the next listing operation. The
   *                        operation returns the continuationToken value within the response body if the
   *                        listing operation did not return all containers remaining to be listed
   *                        with the current page. The continuationToken value can be used as the value for
   *                        the marker parameter in a subsequent call to request the next page of list
   *                        items. The marker value is opaque to the client.
   * @param options - Options to the Service List Container Segment operation.
   * @returns Response data for the Service List Container Segment operation.
   */


  BlobServiceClient.prototype.listContainersSegment = function (marker, options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, e_9;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = (0, _tracing.createSpan)("BlobServiceClient-listContainersSegment", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.serviceContext.listContainersSegment((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              marker: marker
            }, options), {
              include: typeof options.include === "string" ? [options.include] : options.include
            }), (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            return [2
            /*return*/
            , _b.sent()];

          case 3:
            e_9 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_9.message
            });
            throw e_9;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * The Filter Blobs operation enables callers to list blobs across all containers whose tags
   * match a given search expression. Filter blobs searches across all containers within a
   * storage account but can be scoped within the expression to a single container.
   *
   * @param tagFilterSqlExpression - The where parameter enables the caller to query blobs whose tags match a given expression.
   *                                        The given expression must evaluate to true for a blob to be returned in the results.
   *                                        The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
   *                                        however, only a subset of the OData filter syntax is supported in the Blob service.
   * @param marker - A string value that identifies the portion of
   *                          the list of blobs to be returned with the next listing operation. The
   *                          operation returns the continuationToken value within the response body if the
   *                          listing operation did not return all blobs remaining to be listed
   *                          with the current page. The continuationToken value can be used as the value for
   *                          the marker parameter in a subsequent call to request the next page of list
   *                          items. The marker value is opaque to the client.
   * @param options - Options to find blobs by tags.
   */


  BlobServiceClient.prototype.findBlobsByTagsSegment = function (tagFilterSqlExpression, marker, options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, response, wrappedResponse, e_10;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = (0, _tracing.createSpan)("BlobServiceClient-findBlobsByTagsSegment", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.serviceContext.filterBlobs((0, _tslib.__assign)({
              abortSignal: options.abortSignal,
              where: tagFilterSqlExpression,
              marker: marker,
              maxPageSize: options.maxPageSize
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            response = _b.sent();
            wrappedResponse = (0, _tslib.__assign)((0, _tslib.__assign)({}, response), {
              _response: response._response,
              blobs: response.blobs.map(function (blob) {
                var _a;

                var tagValue = "";

                if (((_a = blob.tags) === null || _a === void 0 ? void 0 : _a.blobTagSet.length) === 1) {
                  tagValue = blob.tags.blobTagSet[0].value;
                }

                return (0, _tslib.__assign)((0, _tslib.__assign)({}, blob), {
                  tags: (0, _utils.toTags)(blob.tags),
                  tagValue: tagValue
                });
              })
            });
            return [2
            /*return*/
            , wrappedResponse];

          case 3:
            e_10 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_10.message
            });
            throw e_10;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Returns an AsyncIterableIterator for ServiceFindBlobsByTagsSegmentResponse.
   *
   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
   *                                         The given expression must evaluate to true for a blob to be returned in the results.
   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
   * @param marker - A string value that identifies the portion of
   *                          the list of blobs to be returned with the next listing operation. The
   *                          operation returns the continuationToken value within the response body if the
   *                          listing operation did not return all blobs remaining to be listed
   *                          with the current page. The continuationToken value can be used as the value for
   *                          the marker parameter in a subsequent call to request the next page of list
   *                          items. The marker value is opaque to the client.
   * @param options - Options to find blobs by tags.
   */


  BlobServiceClient.prototype.findBlobsByTagsSegments = function (tagFilterSqlExpression, marker, options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__asyncGenerator)(this, arguments, function findBlobsByTagsSegments_1() {
      var response;
      return (0, _tslib.__generator)(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!(!!marker || marker === undefined)) return [3
            /*break*/
            , 6];
            _a.label = 1;

          case 1:
            return [4
            /*yield*/
            , (0, _tslib.__await)(this.findBlobsByTagsSegment(tagFilterSqlExpression, marker, options))];

          case 2:
            response = _a.sent();
            response.blobs = response.blobs || [];
            marker = response.continuationToken;
            return [4
            /*yield*/
            , (0, _tslib.__await)(response)];

          case 3:
            return [4
            /*yield*/
            , _a.sent()];

          case 4:
            _a.sent();

            _a.label = 5;

          case 5:
            if (marker) return [3
            /*break*/
            , 1];
            _a.label = 6;

          case 6:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Returns an AsyncIterableIterator for blobs.
   *
   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
   *                                         The given expression must evaluate to true for a blob to be returned in the results.
   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
   * @param options - Options to findBlobsByTagsItems.
   */


  BlobServiceClient.prototype.findBlobsByTagsItems = function (tagFilterSqlExpression, options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__asyncGenerator)(this, arguments, function findBlobsByTagsItems_1() {
      var marker, _a, _b, segment, e_11_1;

      var e_11, _c;

      return (0, _tslib.__generator)(this, function (_d) {
        switch (_d.label) {
          case 0:
            _d.trys.push([0, 7, 8, 13]);

            _a = (0, _tslib.__asyncValues)(this.findBlobsByTagsSegments(tagFilterSqlExpression, marker, options));
            _d.label = 1;

          case 1:
            return [4
            /*yield*/
            , (0, _tslib.__await)(_a.next())];

          case 2:
            if (!(_b = _d.sent(), !_b.done)) return [3
            /*break*/
            , 6];
            segment = _b.value;
            return [5
            /*yield**/
            , (0, _tslib.__values)((0, _tslib.__asyncDelegator)((0, _tslib.__asyncValues)(segment.blobs)))];

          case 3:
            return [4
            /*yield*/
            , _tslib.__await.apply(void 0, [_d.sent()])];

          case 4:
            _d.sent();

            _d.label = 5;

          case 5:
            return [3
            /*break*/
            , 1];

          case 6:
            return [3
            /*break*/
            , 13];

          case 7:
            e_11_1 = _d.sent();
            e_11 = {
              error: e_11_1
            };
            return [3
            /*break*/
            , 13];

          case 8:
            _d.trys.push([8,, 11, 12]);

            if (!(_b && !_b.done && (_c = _a.return))) return [3
            /*break*/
            , 10];
            return [4
            /*yield*/
            , (0, _tslib.__await)(_c.call(_a))];

          case 9:
            _d.sent();

            _d.label = 10;

          case 10:
            return [3
            /*break*/
            , 12];

          case 11:
            if (e_11) throw e_11.error;
            return [7
            /*endfinally*/
            ];

          case 12:
            return [7
            /*endfinally*/
            ];

          case 13:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Returns an async iterable iterator to find all blobs with specified tag
   * under the specified account.
   *
   * .byPage() returns an async iterable iterator to list the blobs in pages.
   *
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties
   *
   * Example using `for await` syntax:
   *
   * ```js
   * let i = 1;
   * for await (const blob of blobServiceClient.findBlobsByTags("tagkey='tagvalue'")) {
   *   console.log(`Blob ${i++}: ${container.name}`);
   * }
   * ```
   *
   * Example using `iter.next()`:
   *
   * ```js
   * let i = 1;
   * const iter = blobServiceClient.findBlobsByTags("tagkey='tagvalue'");
   * let blobItem = await iter.next();
   * while (!blobItem.done) {
   *   console.log(`Blob ${i++}: ${blobItem.value.name}`);
   *   blobItem = await iter.next();
   * }
   * ```
   *
   * Example using `byPage()`:
   *
   * ```js
   * // passing optional maxPageSize in the page settings
   * let i = 1;
   * for await (const response of blobServiceClient.findBlobsByTags("tagkey='tagvalue'").byPage({ maxPageSize: 20 })) {
   *   if (response.blobs) {
   *     for (const blob of response.blobs) {
   *       console.log(`Blob ${i++}: ${blob.name}`);
   *     }
   *   }
   * }
   * ```
   *
   * Example using paging with a marker:
   *
   * ```js
   * let i = 1;
   * let iterator = blobServiceClient.findBlobsByTags("tagkey='tagvalue'").byPage({ maxPageSize: 2 });
   * let response = (await iterator.next()).value;
   *
   * // Prints 2 blob names
   * if (response.blobs) {
   *   for (const blob of response.blobs) {
   *     console.log(`Blob ${i++}: ${blob.name}`);
   *   }
   * }
   *
   * // Gets next marker
   * let marker = response.continuationToken;
   * // Passing next marker as continuationToken
   * iterator = blobServiceClient
   *   .findBlobsByTags("tagkey='tagvalue'")
   *   .byPage({ continuationToken: marker, maxPageSize: 10 });
   * response = (await iterator.next()).value;
   *
   * // Prints blob names
   * if (response.blobs) {
   *   for (const blob of response.blobs) {
   *      console.log(`Blob ${i++}: ${blob.name}`);
   *   }
   * }
   * ```
   *
   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
   *                                         The given expression must evaluate to true for a blob to be returned in the results.
   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
   * @param options - Options to find blobs by tags.
   */


  BlobServiceClient.prototype.findBlobsByTags = function (tagFilterSqlExpression, options) {
    var _a;

    var _this = this;

    if (options === void 0) {
      options = {};
    } // AsyncIterableIterator to iterate over blobs


    var listSegmentOptions = (0, _tslib.__assign)({}, options);
    var iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);
    return _a = {
      /**
       * The next method, part of the iteration protocol
       */
      next: function () {
        return iter.next();
      }
    },
    /**
     * The connection to the async iterator, part of the iteration protocol
     */
    _a[Symbol.asyncIterator] = function () {
      return this;
    },
    /**
     * Return an AsyncIterableIterator that works a page at a time
     */
    _a.byPage = function (settings) {
      if (settings === void 0) {
        settings = {};
      }

      return _this.findBlobsByTagsSegments(tagFilterSqlExpression, settings.continuationToken, (0, _tslib.__assign)({
        maxPageSize: settings.maxPageSize
      }, listSegmentOptions));
    }, _a;
  };
  /**
   * Returns an AsyncIterableIterator for ServiceListContainersSegmentResponses
   *
   * @param marker - A string value that identifies the portion of
   *                        the list of containers to be returned with the next listing operation. The
   *                        operation returns the continuationToken value within the response body if the
   *                        listing operation did not return all containers remaining to be listed
   *                        with the current page. The continuationToken value can be used as the value for
   *                        the marker parameter in a subsequent call to request the next page of list
   *                        items. The marker value is opaque to the client.
   * @param options - Options to list containers operation.
   */


  BlobServiceClient.prototype.listSegments = function (marker, options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__asyncGenerator)(this, arguments, function listSegments_1() {
      var listContainersSegmentResponse;
      return (0, _tslib.__generator)(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!(!!marker || marker === undefined)) return [3
            /*break*/
            , 7];
            _a.label = 1;

          case 1:
            return [4
            /*yield*/
            , (0, _tslib.__await)(this.listContainersSegment(marker, options))];

          case 2:
            listContainersSegmentResponse = _a.sent();
            listContainersSegmentResponse.containerItems = listContainersSegmentResponse.containerItems || [];
            marker = listContainersSegmentResponse.continuationToken;
            return [4
            /*yield*/
            , (0, _tslib.__await)(listContainersSegmentResponse)];

          case 3:
            return [4
            /*yield*/
            , _tslib.__await.apply(void 0, [_a.sent()])];

          case 4:
            return [4
            /*yield*/
            , _a.sent()];

          case 5:
            _a.sent();

            _a.label = 6;

          case 6:
            if (marker) return [3
            /*break*/
            , 1];
            _a.label = 7;

          case 7:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Returns an AsyncIterableIterator for Container Items
   *
   * @param options - Options to list containers operation.
   */


  BlobServiceClient.prototype.listItems = function (options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__asyncGenerator)(this, arguments, function listItems_1() {
      var marker, _a, _b, segment, e_12_1;

      var e_12, _c;

      return (0, _tslib.__generator)(this, function (_d) {
        switch (_d.label) {
          case 0:
            _d.trys.push([0, 7, 8, 13]);

            _a = (0, _tslib.__asyncValues)(this.listSegments(marker, options));
            _d.label = 1;

          case 1:
            return [4
            /*yield*/
            , (0, _tslib.__await)(_a.next())];

          case 2:
            if (!(_b = _d.sent(), !_b.done)) return [3
            /*break*/
            , 6];
            segment = _b.value;
            return [5
            /*yield**/
            , (0, _tslib.__values)((0, _tslib.__asyncDelegator)((0, _tslib.__asyncValues)(segment.containerItems)))];

          case 3:
            return [4
            /*yield*/
            , _tslib.__await.apply(void 0, [_d.sent()])];

          case 4:
            _d.sent();

            _d.label = 5;

          case 5:
            return [3
            /*break*/
            , 1];

          case 6:
            return [3
            /*break*/
            , 13];

          case 7:
            e_12_1 = _d.sent();
            e_12 = {
              error: e_12_1
            };
            return [3
            /*break*/
            , 13];

          case 8:
            _d.trys.push([8,, 11, 12]);

            if (!(_b && !_b.done && (_c = _a.return))) return [3
            /*break*/
            , 10];
            return [4
            /*yield*/
            , (0, _tslib.__await)(_c.call(_a))];

          case 9:
            _d.sent();

            _d.label = 10;

          case 10:
            return [3
            /*break*/
            , 12];

          case 11:
            if (e_12) throw e_12.error;
            return [7
            /*endfinally*/
            ];

          case 12:
            return [7
            /*endfinally*/
            ];

          case 13:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Returns an async iterable iterator to list all the containers
   * under the specified account.
   *
   * .byPage() returns an async iterable iterator to list the containers in pages.
   *
   * Example using `for await` syntax:
   *
   * ```js
   * let i = 1;
   * for await (const container of blobServiceClient.listContainers()) {
   *   console.log(`Container ${i++}: ${container.name}`);
   * }
   * ```
   *
   * Example using `iter.next()`:
   *
   * ```js
   * let i = 1;
   * const iter = blobServiceClient.listContainers();
   * let containerItem = await iter.next();
   * while (!containerItem.done) {
   *   console.log(`Container ${i++}: ${containerItem.value.name}`);
   *   containerItem = await iter.next();
   * }
   * ```
   *
   * Example using `byPage()`:
   *
   * ```js
   * // passing optional maxPageSize in the page settings
   * let i = 1;
   * for await (const response of blobServiceClient.listContainers().byPage({ maxPageSize: 20 })) {
   *   if (response.containerItems) {
   *     for (const container of response.containerItems) {
   *       console.log(`Container ${i++}: ${container.name}`);
   *     }
   *   }
   * }
   * ```
   *
   * Example using paging with a marker:
   *
   * ```js
   * let i = 1;
   * let iterator = blobServiceClient.listContainers().byPage({ maxPageSize: 2 });
   * let response = (await iterator.next()).value;
   *
   * // Prints 2 container names
   * if (response.containerItems) {
   *   for (const container of response.containerItems) {
   *     console.log(`Container ${i++}: ${container.name}`);
   *   }
   * }
   *
   * // Gets next marker
   * let marker = response.continuationToken;
   * // Passing next marker as continuationToken
   * iterator = blobServiceClient
   *   .listContainers()
   *   .byPage({ continuationToken: marker, maxPageSize: 10 });
   * response = (await iterator.next()).value;
   *
   * // Prints 10 container names
   * if (response.containerItems) {
   *   for (const container of response.containerItems) {
   *      console.log(`Container ${i++}: ${container.name}`);
   *   }
   * }
   * ```
   *
   * @param options - Options to list containers.
   * @returns An asyncIterableIterator that supports paging.
   */


  BlobServiceClient.prototype.listContainers = function (options) {
    var _a;

    var _this = this;

    if (options === void 0) {
      options = {};
    }

    if (options.prefix === "") {
      options.prefix = undefined;
    }

    var include = [];

    if (options.includeDeleted) {
      include.push("deleted");
    }

    if (options.includeMetadata) {
      include.push("metadata");
    } // AsyncIterableIterator to iterate over containers


    var listSegmentOptions = (0, _tslib.__assign)((0, _tslib.__assign)({}, options), include.length > 0 ? {
      include: include
    } : {});
    var iter = this.listItems(listSegmentOptions);
    return _a = {
      /**
       * The next method, part of the iteration protocol
       */
      next: function () {
        return iter.next();
      }
    },
    /**
     * The connection to the async iterator, part of the iteration protocol
     */
    _a[Symbol.asyncIterator] = function () {
      return this;
    },
    /**
     * Return an AsyncIterableIterator that works a page at a time
     */
    _a.byPage = function (settings) {
      if (settings === void 0) {
        settings = {};
      }

      return _this.listSegments(settings.continuationToken, (0, _tslib.__assign)({
        maxPageSize: settings.maxPageSize
      }, listSegmentOptions));
    }, _a;
  };
  /**
   * ONLY AVAILABLE WHEN USING BEARER TOKEN AUTHENTICATION (TokenCredential).
   *
   * Retrieves a user delegation key for the Blob service. This is only a valid operation when using
   * bearer token authentication.
   *
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-user-delegation-key
   *
   * @param startsOn -      The start time for the user delegation SAS. Must be within 7 days of the current time
   * @param expiresOn -     The end time for the user delegation SAS. Must be within 7 days of the current time
   */


  BlobServiceClient.prototype.getUserDelegationKey = function (startsOn, expiresOn, options) {
    if (options === void 0) {
      options = {};
    }

    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, span, updatedOptions, response, userDelegationKey, res, e_13;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            _a = (0, _tracing.createSpan)("BlobServiceClient-getUserDelegationKey", options), span = _a.span, updatedOptions = _a.updatedOptions;
            _b.label = 1;

          case 1:
            _b.trys.push([1, 3, 4, 5]);

            return [4
            /*yield*/
            , this.serviceContext.getUserDelegationKey({
              startsOn: (0, _utils.truncatedISO8061Date)(startsOn, false),
              expiresOn: (0, _utils.truncatedISO8061Date)(expiresOn, false)
            }, (0, _tslib.__assign)({
              abortSignal: options.abortSignal
            }, (0, _tracing.convertTracingToRequestOptionsBase)(updatedOptions)))];

          case 2:
            response = _b.sent();
            userDelegationKey = {
              signedObjectId: response.signedObjectId,
              signedTenantId: response.signedTenantId,
              signedStartsOn: new Date(response.signedStartsOn),
              signedExpiresOn: new Date(response.signedExpiresOn),
              signedService: response.signedService,
              signedVersion: response.signedVersion,
              value: response.value
            };
            res = (0, _tslib.__assign)({
              _response: response._response,
              requestId: response.requestId,
              clientRequestId: response.clientRequestId,
              version: response.version,
              date: response.date,
              errorCode: response.errorCode
            }, userDelegationKey);
            return [2
            /*return*/
            , res];

          case 3:
            e_13 = _b.sent();
            span.setStatus({
              code: _api.CanonicalCode.UNKNOWN,
              message: e_13.message
            });
            throw e_13;

          case 4:
            span.end();
            return [7
            /*endfinally*/
            ];

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Creates a BlobBatchClient object to conduct batch operations.
   *
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch
   *
   * @returns A new BlobBatchClient object for this service.
   */


  BlobServiceClient.prototype.getBlobBatchClient = function () {
    return new _BlobBatchClient.BlobBatchClient(this.url, this.pipeline);
  };
  /**
   * Only available for BlobServiceClient constructed with a shared key credential.
   *
   * Generates a Blob account Shared Access Signature (SAS) URI based on the client properties
   * and parameters passed in. The SAS is signed by the shared key credential of the client.
   *
   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas
   *
   * @param expiresOn - Optional. The time at which the shared access signature becomes invalid. Default to an hour later if not provided.
   * @param permissions - Specifies the list of permissions to be associated with the SAS.
   * @param resourceTypes - Specifies the resource types associated with the shared access signature.
   * @param options - Optional parameters.
   * @returns An account SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
   */


  BlobServiceClient.prototype.generateAccountSasUrl = function (expiresOn, permissions, resourceTypes, options) {
    if (permissions === void 0) {
      permissions = _AccountSASPermissions.AccountSASPermissions.parse("r");
    }

    if (resourceTypes === void 0) {
      resourceTypes = "sco";
    }

    if (options === void 0) {
      options = {};
    }

    if (!(this.credential instanceof _StorageSharedKeyCredential.StorageSharedKeyCredential)) {
      throw RangeError("Can only generate the account SAS when the client is initialized with a shared key credential");
    }

    if (expiresOn === undefined) {
      var now = new Date();
      expiresOn = new Date(now.getTime() + 3600 * 1000);
    }

    var sas = (0, _AccountSASSignatureValues.generateAccountSASQueryParameters)((0, _tslib.__assign)({
      permissions: permissions,
      expiresOn: expiresOn,
      resourceTypes: resourceTypes,
      services: _AccountSASServices.AccountSASServices.parse("b").toString()
    }, options), this.credential).toString();
    return (0, _utils.appendToURLQuery)(this.url, sas);
  };

  return BlobServiceClient;
}(_StorageClient.StorageClient);

exports.BlobServiceClient = BlobServiceClient;
},{"tslib":"node_modules/tslib/tslib.es6.js","@azure/core-http":"node_modules/@azure/core-http/es/src/coreHttp.js","@opentelemetry/api":"node_modules/@opentelemetry/api/build/src/index.js","./generated/src/operations":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/index.js","./Pipeline":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js","./ContainerClient":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/ContainerClient.js","./utils/utils.common":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js","./credentials/StorageSharedKeyCredential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js","./credentials/AnonymousCredential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js","@azure/core-paging":"node_modules/@azure/core-paging/dist-esm/src/index.js","./utils/tracing":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js","./BlobBatchClient":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js","./StorageClient":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js","./sas/AccountSASPermissions":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASPermissions.js","./sas/AccountSASSignatureValues":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASSignatureValues.js","./sas/AccountSASServices":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASServices.js"}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generatedModels.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
},{}],"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/index.browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  RestError: true,
  BlockBlobTier: true,
  PremiumPageBlobTier: true,
  logger: true
};
Object.defineProperty(exports, "RestError", {
  enumerable: true,
  get: function () {
    return _coreHttp.RestError;
  }
});
Object.defineProperty(exports, "BlockBlobTier", {
  enumerable: true,
  get: function () {
    return _models.BlockBlobTier;
  }
});
Object.defineProperty(exports, "PremiumPageBlobTier", {
  enumerable: true,
  get: function () {
    return _models.PremiumPageBlobTier;
  }
});
Object.defineProperty(exports, "logger", {
  enumerable: true,
  get: function () {
    return _log.logger;
  }
});

var _coreHttp = require("@azure/core-http");

var _BlobServiceClient = require("./BlobServiceClient");

Object.keys(_BlobServiceClient).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _BlobServiceClient[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _BlobServiceClient[key];
    }
  });
});

var _Clients = require("./Clients");

Object.keys(_Clients).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Clients[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Clients[key];
    }
  });
});

var _ContainerClient = require("./ContainerClient");

Object.keys(_ContainerClient).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _ContainerClient[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ContainerClient[key];
    }
  });
});

var _BlobLeaseClient = require("./BlobLeaseClient");

Object.keys(_BlobLeaseClient).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _BlobLeaseClient[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _BlobLeaseClient[key];
    }
  });
});

var _BlobBatch = require("./BlobBatch");

Object.keys(_BlobBatch).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _BlobBatch[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _BlobBatch[key];
    }
  });
});

var _BlobBatchClient = require("./BlobBatchClient");

Object.keys(_BlobBatchClient).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _BlobBatchClient[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _BlobBatchClient[key];
    }
  });
});

var _BatchResponse = require("./BatchResponse");

Object.keys(_BatchResponse).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _BatchResponse[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _BatchResponse[key];
    }
  });
});

var _StorageBrowserPolicyFactory = require("./StorageBrowserPolicyFactory");

Object.keys(_StorageBrowserPolicyFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _StorageBrowserPolicyFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _StorageBrowserPolicyFactory[key];
    }
  });
});

var _AnonymousCredential = require("./credentials/AnonymousCredential");

Object.keys(_AnonymousCredential).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _AnonymousCredential[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _AnonymousCredential[key];
    }
  });
});

var _Credential = require("./credentials/Credential");

Object.keys(_Credential).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Credential[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Credential[key];
    }
  });
});

var _models = require("./models");

var _Pipeline = require("./Pipeline");

Object.keys(_Pipeline).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Pipeline[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Pipeline[key];
    }
  });
});

var _AnonymousCredentialPolicy = require("./policies/AnonymousCredentialPolicy");

Object.keys(_AnonymousCredentialPolicy).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _AnonymousCredentialPolicy[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _AnonymousCredentialPolicy[key];
    }
  });
});

var _CredentialPolicy = require("./policies/CredentialPolicy");

Object.keys(_CredentialPolicy).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _CredentialPolicy[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _CredentialPolicy[key];
    }
  });
});

var _StorageRetryPolicyFactory = require("./StorageRetryPolicyFactory");

Object.keys(_StorageRetryPolicyFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _StorageRetryPolicyFactory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _StorageRetryPolicyFactory[key];
    }
  });
});

var _generatedModels = require("./generatedModels");

Object.keys(_generatedModels).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _generatedModels[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _generatedModels[key];
    }
  });
});

var _log = require("./log");
},{"@azure/core-http":"node_modules/@azure/core-http/es/src/coreHttp.js","./BlobServiceClient":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobServiceClient.js","./Clients":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js","./ContainerClient":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/ContainerClient.js","./BlobLeaseClient":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js","./BlobBatch":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js","./BlobBatchClient":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js","./BatchResponse":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponse.js","./StorageBrowserPolicyFactory":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js","./credentials/AnonymousCredential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js","./credentials/Credential":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js","./models":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js","./Pipeline":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js","./policies/AnonymousCredentialPolicy":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js","./policies/CredentialPolicy":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js","./StorageRetryPolicyFactory":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js","./generatedModels":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generatedModels.js","./log":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js"}],"index.js":[function(require,module,exports) {
// index.js
const {
  BlobServiceClient
} = require("@azure/storage-blob"); // Now do something interesting with BlobServiceClient


const createContainerButton = document.getElementById("create-container-button");
const deleteContainerButton = document.getElementById("delete-container-button");
const selectButton = document.getElementById("select-button");
const fileInput = document.getElementById("file-input");
const listButton = document.getElementById("list-button");
const deleteButton = document.getElementById("delete-button");
const status = document.getElementById("status");
const fileList = document.getElementById("file-list");

const reportStatus = message => {
  status.innerHTML += `${message}<br/>`;
  status.scrollTop = status.scrollHeight;
}; // Update <placeholder> with your Blob service SAS URL string


const blobSasUrl = "https://huzaifatest.blob.core.windows.net/?sv=2020-02-10&ss=bfqt&srt=sco&sp=rwdlacuptfx&se=2021-05-21T23:09:19Z&st=2021-05-21T15:09:19Z&spr=https&sig=c%2Bxaq6vzQEB%2BR%2BWWoHme0o2%2BTjoPsFR3X8zTiDkJJ5c%3D"; // Create a new BlobServiceClient

const blobServiceClient = new BlobServiceClient(blobSasUrl); // Create a unique name for the container by 
// appending the current time to the file name

const containerName = "container" + new Date().getTime(); // Get a container client from the BlobServiceClient

const containerClient = blobServiceClient.getContainerClient(containerName);

const createContainer = async () => {
  try {
    reportStatus(`Creating container "${containerName}"...`);
    await containerClient.create();
    reportStatus(`Done.`);
  } catch (error) {
    reportStatus(error.message);
  }
};

const deleteContainer = async () => {
  try {
    reportStatus(`Deleting container "${containerName}"...`);
    await containerClient.delete();
    reportStatus(`Done.`);
  } catch (error) {
    reportStatus(error.message);
  }
};

createContainerButton.addEventListener("click", createContainer);
deleteContainerButton.addEventListener("click", deleteContainer);

const listFiles = async () => {
  fileList.size = 0;
  fileList.innerHTML = "";

  try {
    reportStatus("Retrieving file list...");
    let iter = containerClient.listBlobsFlat();
    let blobItem = await iter.next();

    while (!blobItem.done) {
      fileList.size += 1;
      fileList.innerHTML += `<option>${blobItem.value.name}</option>`;
      blobItem = await iter.next();
    }

    if (fileList.size > 0) {
      reportStatus("Done.");
    } else {
      reportStatus("The container does not contain any files.");
    }
  } catch (error) {
    reportStatus(error.message);
  }
};

listButton.addEventListener("click", listFiles);

const uploadFiles = async () => {
  try {
    reportStatus("Uploading files...");
    const promises = [];

    for (const file of fileInput.files) {
      const blockBlobClient = containerClient.getBlockBlobClient(file.name);
      promises.push(blockBlobClient.uploadBrowserData(file));
    }

    await Promise.all(promises);
    reportStatus("Done.");
    listFiles();
  } catch (error) {
    reportStatus(error.message);
  }
};

selectButton.addEventListener("click", () => fileInput.click());
fileInput.addEventListener("change", uploadFiles);

const deleteFiles = async () => {
  try {
    if (fileList.selectedOptions.length > 0) {
      reportStatus("Deleting files...");

      for (const option of fileList.selectedOptions) {
        await containerClient.deleteBlob(option.text);
      }

      reportStatus("Done.");
      listFiles();
    } else {
      reportStatus("No files selected.");
    }
  } catch (error) {
    reportStatus(error.message);
  }
};

deleteButton.addEventListener("click", deleteFiles);
},{"@azure/storage-blob":"node_modules/@azure/storage-blob/dist-esm/storage-blob/src/index.browser.js"}],"../../../AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "59139" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["../../../AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/hmr-runtime.js","index.js"], null)
//# sourceMappingURL=/jsapp.e31bb0bc.js.map